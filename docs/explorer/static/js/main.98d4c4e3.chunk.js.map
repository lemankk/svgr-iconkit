{"version":3,"sources":["components/IconListView.js","components/IconsetPanel.js","components/Picker.js","components/Toolbar.js","config.js","App.js","reportWebVitals.js","index.js"],"names":["IconWrapper","styled","div","color","size","IconListView","iconsetInfo","matchedIconNames","variantName","iconSize","keyword","iconColor","isSearchMode","isUsingStyledComponent","maxIconsShown","onShowMore","iconNames","IconComponent","component","styledProps","iconProps","className","slice","map","name","variant","length","onClick","require","codemirrorOptions","mode","lineNumbers","IconsetPanel","onVariantChange","familyName","packageName","variantNames","options","iconName","codeWeb","createWebExample","codeNative","createNativeExample","useState","usageTabIndex","setUsageTabIndex","isUsageModalShow","setUsageModalShow","handleClose","useCallback","href","fade","isOpen","toggle","tabs","active","value","Wrapper","PickerBackdrop","PickerContent","Picker","children","content","onClose","Toolbar","iconsets","resources","defaultVariant","App","currentIconsetIndex","setIconsetIndex","setKeyword","currentVariant","setVariant","onChangeIconset","newIndex","setMaxIconsShown","setIconSize","setIconColor","isColorPickerOpen","setColorPickerOpen","setUsingStyledComponent","setUpdateTime","filter","includes","useEffect","a","Icon","restProps","__loaded","Date","now","run","style","marginBottom","target","type","onChange","evt","index","onKeywordChange","label","onChangeComplete","hex","backgroundColor","inline","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sUAIMA,EAAcC,IAAOC,IAAV,wFAEN,qBAAEC,SACF,qBAAEC,QACD,qBAAEA,QAIC,SAASC,EAAT,GAWX,IAVFC,EAUC,EAVDA,YACAC,EASC,EATDA,iBASC,IARDC,mBAQC,MARa,UAQb,EANDC,GAMC,EAPDC,QAOC,EANDD,UACAE,EAKC,EALDA,UAKC,KAJDC,aAIC,EAHDC,+BAGC,aAFDC,qBAEC,MAFe,GAEf,EADDC,EACC,EADDA,WAEQC,EAAyCV,EAAzCU,UAAsBC,EAAmBX,EAA9BY,UAEbC,EAAmB,GACnBC,EAAiB,GAQvB,OAPKP,GACHM,EAAYf,KAAOK,EACnBU,EAAYhB,MAAQQ,IAEpBS,EAAUhB,KAAOK,EACjBW,EAAUjB,MAAQQ,GAGlB,eAACX,EAAD,2BAAiBmB,GAAjB,cACE,oBAAIE,UAAU,OAAd,SACGd,EAAiBe,MAAM,EAAGR,GAAeS,KAAI,SAACC,GAAD,OAC5C,qBAAeH,UAAU,OAAzB,UACE,qBAAKA,UAAU,UAAf,SAA0BJ,GAAiB,cAACA,EAAD,aAAeQ,QAASjB,EAAcgB,KAAMA,GAAUJ,MACjG,qBAAKC,UAAU,OAAf,SACE,+BAAOG,QAHFA,QAQZjB,EAAiBmB,OAAS,GAAKnB,EAAiBmB,OAASZ,GAAiBA,EAAgBE,EAAUU,QACnG,qCACE,uBACA,8BACE,cAAC,IAAD,CAAQC,QAAS,kBAAMZ,EAAW,KAAlC,yC,2BC/BZa,EAAQ,KAER,I,MAAMC,EAAoB,CAAEC,KAAM,aAAcC,aAAa,GAoC9C,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,gBACAzB,EAIC,EAJDA,YACAF,EAGC,EAHDA,YACAG,EAEC,EAFDA,SACAE,EACC,EADDA,UAGQuB,EAIJ5B,EAJFkB,KACAW,EAGE7B,EAHF6B,YAHD,EAMG7B,EAFF8B,oBAJD,MAIgB,GAJhB,IAMG9B,EADFU,iBALD,MAKa,GALb,EAOKqB,EAAU,CAAEF,cAAa3B,cAAa8B,SAAUtB,EAAU,GAAIL,YAAWF,YACzE8B,EAhDiB,SAAC,GAAD,IACvBJ,EADuB,EACvBA,YADuB,IAEvB3B,mBAFuB,MAET,UAFS,MAGvB8B,gBAHuB,MAGZ,aAHY,MAIvB7B,gBAJuB,MAIZ,GAJY,MAKvBE,iBALuB,MAKX,OALW,kEAQLwB,EARK,oFAYPG,EAZO,sBAYe9B,EAZf,mBAYqCC,EAZrC,oBAYyDE,EAZzD,wBAgDP6B,CAAiBH,GAC3BI,EAjCoB,SAAC,GAAD,IAC1BN,EAD0B,EAC1BA,YAD0B,IAE1B3B,mBAF0B,MAEZ,UAFY,MAG1B8B,gBAH0B,MAGf,aAHe,MAI1B7B,gBAJ0B,MAIf,GAJe,MAK1BE,iBAL0B,MAKd,OALc,wGASRwB,EATQ,qFAaVG,EAbU,sBAaY9B,EAbZ,mBAakCC,EAblC,oBAasDE,EAbtD,yBAiCP+B,CAAoBL,GATtC,EAWyCM,mBAAS,GAXlD,mBAWMC,EAXN,KAWqBC,EAXrB,OAa6CF,oBAAS,GAbtD,mBAaMG,EAbN,KAawBC,EAbxB,KAcKC,EAAcC,uBAAY,WAC9BF,GAAkB,KACjB,IAEH,OACE,qCACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,UAAYb,IACZ,eAAC,IAAD,oBAAiBlB,EAAUU,OAA3B,eACA,cAAC,IAAD,4BACA,+BAAOS,OAERC,GAAgBA,EAAaV,OAAS,GACrC,mCACE,eAAC,IAAD,WACE,cAAC,IAAD,wBACA,cAAC,IAAD,UACGU,EAAab,KAAI,SAACC,GAAD,OAChB,cAAC,IAAD,CACEG,QAAS,kBAAMM,EAAgBT,IAC/BrB,MAAOK,IAAgBgB,EAAO,UAAY,QAF5C,SAIGA,cAOb,cAAC,IAAD,UACE,cAAC,IAAD,CACE0B,KAAK,IACLvB,QAAS,kBAAMoB,GAAkB,IACjC5C,MAAM,OAHR,8BAUJ,eAAC,IAAD,CAAOgD,MAAI,EAAC/C,KAAK,KAAKgD,OAAQN,EAAkBO,OAAQL,EAAxD,UACE,cAAC,IAAD,CAAaK,OAAQL,EAArB,2BACA,eAAC,IAAD,WACE,eAAC,IAAD,CAAKM,MAAI,EAAT,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACE3B,QAAS,kBAAMkB,EAAiB,IAChCU,OAA0B,IAAlBX,EAFV,+BAOF,cAAC,IAAD,UACE,cAAC,IAAD,CACEjB,QAAS,kBAAMkB,EAAiB,IAChCU,OAA0B,IAAlBX,EAFV,+BAQe,IAAlBA,GACC,8BACE,cAAC,aAAD,CAAYP,QAASR,EAAmB2B,MAAOjB,MAGhC,IAAlBK,GACC,8BACE,cAAC,aAAD,CAAYP,QAASR,EAAmB2B,MAAOf,eCjJ7D,I,EAAMgB,EAAUxD,IAAOC,IAAV,mDAIPwD,EAAiBzD,IAAOC,IAAV,kGAQdyD,EAAgB1D,IAAOC,IAAV,kEAKJ,SAAS0D,EAAT,GAAiE,IAA/CC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,QAAoC,IAA3BV,cAA2B,SAAXW,EAAW,EAAXA,QAClE,OACE,eAACN,EAAD,WACGI,EAEAT,GACC,qCACE,cAACM,EAAD,CAAgB/B,QAASoC,IACzB,eAACJ,EAAD,WAAgBG,EAAhB,aCzBV,IAgBeE,EAhBC/D,IAAOC,IAAV,mWCDA+D,EAAW,CACtB,CACE9B,YAAa,6BACbX,KAAM,eACN0C,UAAW,kBAAM,uDAEnB,CACE/B,YAAa,oCACbX,KAAM,wBACN0C,UAAW,kBAAM,sDAEnB,CACE/B,YAAa,gCACbX,KAAM,iBACN0C,UAAW,kBAAM,uDAEnB,CACE/B,YAAa,wBACbX,KAAM,UACN0C,UAAW,kBAAM,uDAEnB,CACE/B,YAAa,2BACbX,KAAM,aACN0C,UAAW,kBAAM,sDAEnB,CACE/B,YAAa,2BACbX,KAAM,mBACN2C,eAAgB,SAChBD,UAAW,kBAAM,gCAEnB,CACE/B,YAAa,uBACbX,KAAM,SACN0C,UAAW,kBAAM,uDAEnB,CACE/B,YAAa,yBACbX,KAAM,WACN0C,UAAW,kBAAM,wDAEnB,CACE/B,YAAa,yBACbX,KAAM,WACN0C,UAAW,kBAAM,wDAEnB,CACE/B,YAAa,mCACbX,KAAM,qBACN0C,UAAW,kBAAM,yDCjCN,SAASE,IAAO,IAAD,EACmBzB,mBAAS,GAD5B,mBACrB0B,EADqB,KACAC,EADA,OAEE3B,mBAAS,IAFX,mBAErBjC,EAFqB,KAEZ6D,EAFY,OAGS5B,mBAAS,WAHlB,mBAGrB6B,EAHqB,KAGLC,EAHK,KAItBC,EAAkBzB,uBAAY,SAAC0B,GACnCL,EAAgBK,GADgC,MAETV,EAASU,GAAxCR,eACRM,OAHgD,MAEvB,UAFuB,GAIhDG,EAAiB,OAChB,IATyB,EAUIjC,mBAAS,IAVb,mBAUrBlC,EAVqB,KAUXoE,EAVW,OAWMlC,mBAAS,WAXf,mBAWrBhC,EAXqB,KAWVmE,EAXU,OAYoBnC,oBAAS,GAZ7B,mBAYrBoC,EAZqB,KAYFC,EAZE,OAa8BrC,oBAAS,GAbvC,mBAarB9B,EAbqB,KAaGoE,EAbH,OAeFtC,mBAAS,GAA1BuC,EAfmB,oBAkBtB5E,EAAc2D,EAASI,IAAwB,GAlBzB,EAoBD/D,EAAnBU,iBApBoB,MAoBR,GApBQ,EAsBtBJ,IACFF,GAA8B,kBAAZA,GAAwBA,EAAQgB,OAAS,EAvBnC,EAwBciB,mBAAS,IAxBvB,mBAwBrB7B,EAxBqB,KAwBN8D,EAxBM,KA0BtBrE,GAAoBK,EAEtBI,EAAUmE,QAAO,SAAC3D,GAAD,OAAUA,EAAK4D,SAAS1E,MADzCM,EAIJqE,qBAAU,WAAM,4CAId,gCAAAC,EAAA,sEACuChF,EAAY4D,YADnD,gBACUqB,EADV,EACUA,KAASC,EADnB,wBAGEvB,EAASI,GAAT,2BACK/D,GADL,IAEEY,UAAWqE,EACXE,UAAU,GACPD,GAELN,EAAcQ,KAAKC,OATrB,4CAJc,sBACTrF,EAAY4D,WAA8C,oBAA1B5D,EAAY4D,YAA4B5D,EAAYmF,UAD3E,mCAedG,KACC,CAACtF,EAAa+D,IAGjB,OACE,cAAC,IAAD,UACE,qBAAKhD,UAAU,MAAf,SACE,sBAAKA,UAAU,UAAf,UACE,kCACE,sBAAKwE,MAAO,CAAEC,aAAc,IAA5B,UACE,8CACA,sDACA,4CACc,IACZ,mBAAG5C,KAAK,oCAAoC6C,OAAO,SAAnD,4BAEK,IAJP,MAKM,IACJ,mBACE7C,KAAK,uDACL6C,OAAO,SAFT,+CANF,kFAeA,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,KAAK,SACLC,SAAU,SAACC,GAAD,OAASxB,EAAgBwB,EAAIH,OAAOvC,QAFhD,SAIGS,EAAS1C,KAAI,WAAwB4E,GAAxB,IAAG3E,EAAH,EAAGA,KAAMW,EAAT,EAASA,YAAT,OACZ,cAAC,IAAD,CAA0BqB,MAAO2C,EAAjC,SACG3E,GADUW,eAQvB,cAAC,EAAD,CACE3B,YAAagE,EACb9D,QAASA,EACT0F,gBAAiB7B,EACjBtC,gBAAiBwC,EACjBnE,YAAaA,EACbG,SAAUA,EACVE,UAAWA,OAGf,iCACE,eAAC,EAAD,WACE,8BACE,cAAC,IAAD,UACG,CAAC,GAAI,GAAI,GAAI,IAAIY,KAAI,SAACiC,GAAD,OACpB,cAAC,IAAD,CACE7B,QAAS,kBAAMkD,EAAYrB,IAE3BrD,MAAOM,IAAa+C,EAAQ,UAAY,UAH1C,SAKGA,GALH,gBAEgBA,WAQtB,8BACE,cAAC,IAAD,UACG,CACC,CAAEA,OAAO,EAAM6C,MAAO,qBACtB,CAAE7C,OAAO,EAAO6C,MAAO,UACvB9E,KAAI,gBAAGiC,EAAH,EAAGA,MAAO6C,EAAV,EAAUA,MAAV,OACJ,cAAC,IAAD,CACE1E,QAAS,kBAAMsD,EAAwBzB,IAEvCrD,MACEU,IAA2B2C,EAAQ,UAAY,UAJnD,SAOG6C,GAPH,wBAEwB7C,WAU9B,cAACI,EAAD,CACER,OAAQ2B,EACRhB,QAAS,kBAAMiB,GAAmB,IAClClB,QACE,cAAC,IAAD,CACE3D,MAAOQ,EACP2F,iBAAkB,SAACnG,GAAD,OAAW2E,EAAa3E,EAAMoG,QANtD,SAUE,cAAC,IAAD,UACE,cAAC,IAAD,CACE5E,QAAS,kBAAMqD,GAAmB,IAClC7E,MAAM,QACN0F,MAAO,CAAEW,gBAAiB7F,GAH5B,SAKGA,QAIP,8BACE,cAAC,IAAD,CAAM8F,QAAM,EAACpF,UAAU,eAAvB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CACE2E,KAAK,OACLxC,MAAO9C,EACPgG,YAAY,kBACZT,SAAU,SAACC,GACT3B,EAAW2B,EAAIH,OAAOvC,OACtBoB,EAAiB,iBAO7B,8BACGhE,GACC,iCACGL,GAAiBmB,OADpB,0CAMJ,cAAC,EAAD,CACElB,YAAagE,EACb9D,QAASA,EACTD,SAAUA,EACVE,UAAWA,EACXL,YAAaA,EACbO,uBAAwBA,EACxBN,iBAAkBA,GAClBO,cAAeA,EACfF,aAAcA,EACdG,WAxIO,kBAAM6D,EAAiB9D,EAAgB,iBCnE5D,IAYe6F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAClD,EAAD,MAEFmD,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.98d4c4e3.chunk.js","sourcesContent":["import { Button } from \"@bootstrap-styled/v4\";\n\nimport styled from \"styled-components\";\n\nconst IconWrapper = styled.div`\nsvg {\n  color: ${({color}) => color};\n  width: ${({size}) => size}px;\n  height: ${({size}) => size}px;\n}\n`;\n\nexport default function IconListView({\n  iconsetInfo,\n  matchedIconNames,\n  variantName = \"regular\",\n  keyword,\n  iconSize,\n  iconColor,\n  isSearchMode = false,\n  isUsingStyledComponent = false,\n  maxIconsShown = 50,\n  onShowMore,\n}) {\n  const { iconNames, component: IconComponent, } = iconsetInfo;\n\n  const styledProps: any = {};\n  const iconProps: any = {};\n  if ( isUsingStyledComponent ) {\n    styledProps.size = iconSize;\n    styledProps.color = iconColor;\n  } else {\n    iconProps.size = iconSize;\n    iconProps.color = iconColor;\n  }\n  return (\n    <IconWrapper {...styledProps}>\n      <ul className=\"list\">\n        {matchedIconNames.slice(0, maxIconsShown).map((name) => (\n          <li key={name} className=\"item\">\n            <div className=\"graphic\">{IconComponent && <IconComponent variant={variantName}  name={name} {...iconProps} />}</div>\n            <div className=\"text\">\n              <code>{name}</code>\n            </div>\n          </li>\n        ))}\n      </ul>\n      {matchedIconNames.length > 0 && matchedIconNames.length > maxIconsShown && maxIconsShown < iconNames.length && (\n        <>\n          <hr />\n          <div>\n            <Button onClick={() => onShowMore(50)}>Show more 50 icons</Button>\n          </div>\n        </>\n      )}\n    </IconWrapper>\n  );\n}\n","import {\n  Button,\n  ButtonGroup,\n  Card,\n  CardBlock,\n  CardLink,\n  CardSubtitle,\n  CardText,\n  CardTitle,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  Nav,\n  NavItem,\n  NavLink,\n} from \"@bootstrap-styled/v4\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\nimport { useCallback, useState } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nrequire(\"codemirror/mode/javascript/javascript\");\n\nconst codemirrorOptions = { mode: \"javascript\", lineNumbers: true };\n\nconst createWebExample = ({\n  packageName,\n  variantName = \"regular\",\n  iconName = \"arrow-left\",\n  iconSize = 24,\n  iconColor = '#000',\n}) => `\nimport React from 'react';\nimport Icon from '${packageName}';\n\nexport default function App() {\n  return (<div>\n    <Icon name=\"${iconName}\" variant=\"${variantName}\" size={${iconSize}} color=\"${iconColor}\" />\n  </div>)\n}\n`;\nconst createNativeExample = ({\n  packageName,\n  variantName = \"regular\",\n  iconName = \"arrow-left\",\n  iconSize = 24,\n  iconColor = '#000',\n}) => `\nimport React from 'react';\nimport { View } from 'react-native';\nimport Icon from '${packageName}';\n\nexport default function App() {\n  return (<View>\n    <Icon name=\"${iconName}\" variant=\"${variantName}\" size={${iconSize}} color=\"${iconColor}\" />\n  </View>)\n}\n`;\n\nexport default function IconsetPanel({\n  onVariantChange,\n  variantName,\n  iconsetInfo,\n  iconSize,\n  iconColor,\n}) {\n  const {\n    name: familyName,\n    packageName,\n    variantNames = [],\n    iconNames = [],\n  } = iconsetInfo;\n  const options = { packageName, variantName, iconName: iconNames[0], iconColor, iconSize };\n  const codeWeb = createWebExample(options);\n  const codeNative = createNativeExample(options);\n\n  const [usageTabIndex, setUsageTabIndex] = useState(0);\n\n  const [isUsageModalShow, setUsageModalShow] = useState(false);\n  const handleClose = useCallback(() => {\n    setUsageModalShow(false);\n  }, []);\n\n  return (\n    <>\n      <Card>\n        <CardBlock>\n          <CardTitle>{familyName}</CardTitle>\n          <CardText>Total {iconNames.length} icon(s).</CardText>\n          <CardSubtitle>Package name:</CardSubtitle>\n          <code>{packageName}</code>\n        </CardBlock>\n        {variantNames && variantNames.length > 0 && (\n          <>\n            <CardBlock>\n              <CardSubtitle>Variants:</CardSubtitle>\n              <ButtonGroup>\n                {variantNames.map((name) => (\n                  <Button\n                    onClick={() => onVariantChange(name)}\n                    color={variantName === name ? \"primary\" : \"light\"}\n                  >\n                    {name}\n                  </Button>\n                ))}\n              </ButtonGroup>\n            </CardBlock>\n          </>\n        )}\n        <CardBlock>\n          <CardLink\n            href=\"#\"\n            onClick={() => setUsageModalShow(true)}\n            color=\"link\"\n          >\n            How to use?\n          </CardLink>\n        </CardBlock>\n      </Card>\n\n      <Modal fade size=\"lg\" isOpen={isUsageModalShow} toggle={handleClose}>\n        <ModalHeader toggle={handleClose}>Usage example</ModalHeader>\n        <ModalBody>\n          <Nav tabs>\n            <NavItem>\n              <NavLink\n                onClick={() => setUsageTabIndex(0)}\n                active={usageTabIndex === 0}\n              >\n                React.js in Web\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink\n                onClick={() => setUsageTabIndex(1)}\n                active={usageTabIndex === 1}\n              >\n                React Native\n              </NavLink>\n            </NavItem>\n          </Nav>\n          {usageTabIndex === 0 && (\n            <div>\n              <CodeMirror options={codemirrorOptions} value={codeWeb} />\n            </div>\n          )}\n          {usageTabIndex === 1 && (\n            <div>\n              <CodeMirror options={codemirrorOptions} value={codeNative} />\n            </div>\n          )}\n        </ModalBody>\n      </Modal>\n    </>\n  );\n}\n","import styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  position: relative;\n`;\n\nconst PickerBackdrop = styled.div`\n  position: fixed;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n`;\n\nconst PickerContent = styled.div`\n  position: absolute;\n  z-index: 2;\n`;\n\nexport default function Picker({ children, content, isOpen = false, onClose }) {\n  return (\n    <Wrapper>\n      {children}\n\n      {isOpen && (\n        <>\n          <PickerBackdrop onClick={onClose} />\n          <PickerContent>{content} </PickerContent>\n        </>\n      )}\n    </Wrapper>\n  );\n}\n","import styled from \"styled-components\";\n\nconst Toolbar = styled.div`\n  margin-bottom: 5px;\n  padding: 5px;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n  display: flex;\n  flex-direction: column;\n  @media screen and (min-width: 768px) {\n    margin-bottom: 10px;\n    padding: 10px;\n    flex-direction: row;\n    justify-content: space-between;\n    position: sticky;\n    top: 0;\n  }\n`;\nexport default Toolbar;\n","\nexport const iconsets = [\n  {\n    packageName: \"@svgr-iconkit/fontawesome5\",\n    name: \"FontAwesome5\",\n    resources: () => import('./iconset/FontAwesome5'),\n  },\n  {\n    packageName: \"@svgr-iconkit/fontawesome5-brands\",\n    name: \"FontAwesome5 - Brands\",\n    resources: () => import('./iconset/FontAwesome5-brands'),\n  },\n  {\n    packageName: \"@svgr-iconkit/fluentui-system\",\n    name: \"FluentUISystem\",\n    resources: () => import('./iconset/FluentUISystem'),\n  },\n  {\n    packageName: \"@svgr-iconkit/feather\",\n    name: \"Feather\",\n    resources: () => import('./iconset/Feather'),\n  },\n  {\n    packageName: \"@svgr-iconkit/foundation\",\n    name: \"Foundation\",\n    resources: () => import('./iconset/FontAwesome5-brands'),\n  },\n  {\n    packageName: \"@svgr-iconkit/ant-design\",\n    name: \"Ant Design Icons\",\n    defaultVariant: 'filled',\n    resources: () => import('./iconset/AntDesignIcon'),\n  },\n  {\n    packageName: \"@svgr-iconkit/entypo\",\n    name: \"Entypo\",\n    resources: () => import('./iconset/Entypo'),\n  },\n  {\n    packageName: \"@svgr-iconkit/ionicons\",\n    name: \"Ionicons\",\n    resources: () => import('./iconset/Ionicons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/octicons\",\n    name: \"Octicons\",\n    resources: () => import('./iconset/Octicons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/material-community\",\n    name: \"Material Community\",\n    resources: () => import('./iconset/MaterialCommunity'),\n  }\n];\n","import { BootstrapProvider } from \"@bootstrap-styled/provider\";\nimport {\n  Button,\n  ButtonGroup,\n  Form,\n  FormGroup,\n  Input,\n  InputGroup,\n  Option,\n} from \"@bootstrap-styled/v4\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { TwitterPicker } from \"react-color\";\nimport IconsetListView from \"./components/IconListView\";\nimport IconsetInfoPanel from \"./components/IconsetPanel\";\nimport Picker from \"./components/Picker\";\nimport Toolbar from \"./components/Toolbar\";\nimport { iconsets } from \"./config\";\n\nexport default function App() {\n  const [currentIconsetIndex, setIconsetIndex] = useState(0);\n  const [keyword, setKeyword] = useState(\"\");\n  const [currentVariant, setVariant] = useState(\"regular\");\n  const onChangeIconset = useCallback((newIndex) => {\n    setIconsetIndex(newIndex);\n    const { defaultVariant = 'regular' } = iconsets[newIndex];\n    setVariant(defaultVariant);\n    setMaxIconsShown(100);\n  }, []);\n  const [iconSize, setIconSize] = useState(24);\n  const [iconColor, setIconColor] = useState(\"#0693E3\");\n  const [isColorPickerOpen, setColorPickerOpen] = useState(false);\n  const [isUsingStyledComponent, setUsingStyledComponent] = useState(true);\n\n  const [, setUpdateTime] = useState(0);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const iconsetInfo = iconsets[currentIconsetIndex] || {};\n\n  const { iconNames = [] } = iconsetInfo;\n\n  const isSearchMode =\n    !!keyword && typeof keyword === \"string\" && keyword.length > 0;\n  const [maxIconsShown, setMaxIconsShown] = useState(50);\n\n  const matchedIconNames = !isSearchMode\n    ? iconNames\n    : iconNames.filter((name) => name.includes(keyword));\n\n\n  useEffect(() => {\n    if (!iconsetInfo.resources || typeof iconsetInfo.resources !== \"function\" || iconsetInfo.__loaded){\n      return;\n    }\n    async function run() {\n      const { Icon, ...restProps } = await iconsetInfo.resources(); \n\n      iconsets[currentIconsetIndex] = {\n        ...iconsetInfo,\n        component: Icon,\n        __loaded: true,\n        ...restProps,\n      };\n      setUpdateTime(Date.now());\n    }\n    run();\n  }, [iconsetInfo, currentIconsetIndex]);\n\n  const onShowMore = () => setMaxIconsShown(maxIconsShown + 50);\n  return (\n    <BootstrapProvider>\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <aside>\n            <div style={{ marginBottom: 20 }}>\n              <h1>svgr-iconkit</h1>\n              <i>SVG Iconkit for React</i>\n              <p>\n                Inspired by{\" \"}\n                <a href=\"https://github.com/gregberge/svgr\" target=\"_blank\">\n                  gregberge/svgr\n                </a>{\" \"}\n                and{\" \"}\n                <a\n                  href=\"https://github.com/oblador/react-native-vector-icons\"\n                  target=\"_blank\"\n                >\n                  oblador/react-native-vector-icons\n                </a>\n                , the kit set for rendering SVG based icon content in\n                React.js/React-Native.\n              </p>\n              <Form>\n                <FormGroup>\n                  <Input\n                    type=\"select\"\n                    onChange={(evt) => onChangeIconset(evt.target.value)}\n                  >\n                    {iconsets.map(({ name, packageName }, index) => (\n                      <Option key={packageName} value={index}>\n                        {name}\n                      </Option>\n                    ))}\n                  </Input>\n                </FormGroup>\n              </Form>\n            </div>\n            <IconsetInfoPanel\n              variantName={currentVariant}\n              keyword={keyword}\n              onKeywordChange={setKeyword}\n              onVariantChange={setVariant}\n              iconsetInfo={iconsetInfo}\n              iconSize={iconSize}\n              iconColor={iconColor}\n            />\n          </aside>\n          <main>\n            <Toolbar>\n              <div>\n                <ButtonGroup>\n                  {[16, 24, 32, 48].map((value) => (\n                    <Button\n                      onClick={() => setIconSize(value)}\n                      key={`$size-${value}`}\n                      color={iconSize === value ? \"primary\" : \"default\"}\n                    >\n                      {value}\n                    </Button>\n                  ))}\n                </ButtonGroup>\n              </div>\n              <div>\n                <ButtonGroup>\n                  {[\n                    { value: true, label: \"styled-components\" },\n                    { value: false, label: \"props\" },\n                  ].map(({ value, label }) => (\n                    <Button\n                      onClick={() => setUsingStyledComponent(value)}\n                      key={`$stylingprops-${value}`}\n                      color={\n                        isUsingStyledComponent === value ? \"primary\" : \"default\"\n                      }\n                    >\n                      {label}\n                    </Button>\n                  ))}\n                </ButtonGroup>\n              </div>\n              <Picker\n                isOpen={isColorPickerOpen}\n                onClose={() => setColorPickerOpen(false)}\n                content={\n                  <TwitterPicker\n                    color={iconColor}\n                    onChangeComplete={(color) => setIconColor(color.hex)}\n                  />\n                }\n              >\n                <ButtonGroup>\n                  <Button\n                    onClick={() => setColorPickerOpen(true)}\n                    color=\"light\"\n                    style={{ backgroundColor: iconColor }}\n                  >\n                    {iconColor}\n                  </Button>\n                </ButtonGroup>\n              </Picker>\n              <div>\n                <Form inline className=\"my-2 my-lg-0\">\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      value={keyword}\n                      placeholder=\"Search icons...\"\n                      onChange={(evt) => {\n                        setKeyword(evt.target.value);\n                        setMaxIconsShown(100);\n                      }}\n                    />\n                  </InputGroup>\n                </Form>\n              </div>\n            </Toolbar>\n            <div>\n              {isSearchMode && (\n                <span>\n                  {matchedIconNames.length} icon(s) matched by given keyword.\n                </span>\n              )}\n            </div>\n\n            <IconsetListView\n              variantName={currentVariant}\n              keyword={keyword}\n              iconSize={iconSize}\n              iconColor={iconColor}\n              iconsetInfo={iconsetInfo}\n              isUsingStyledComponent={isUsingStyledComponent}\n              matchedIconNames={matchedIconNames}\n              maxIconsShown={maxIconsShown}\n              isSearchMode={isSearchMode}\n              onShowMore={onShowMore}\n            />\n          </main>\n        </div>\n      </div>\n    </BootstrapProvider>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"react-app-polyfill/ie9\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}