{"version":3,"sources":["../../@svgr-iconkit/core/src/createIconsetFactory.tsx","../../../../@svgr-iconkit/core/node_modules/lower-case/src/index.ts","../../../../@svgr-iconkit/core/node_modules/no-case/src/index.ts","../../../../@svgr-iconkit/core/node_modules/pascal-case/src/index.ts","../../../../@svgr-iconkit/core/node_modules/camel-case/src/index.ts","../../@svgr-iconkit/core/src/utils.ts","../../@svgr-iconkit/core/src/createWebIcon.tsx","../../@svgr-iconkit/core/src/index.ts","iconset/Entypo.js"],"names":["Iconset","lowerCase","str","toLowerCase","DEFAULT_SPLIT_REGEXP","DEFAULT_STRIP_REGEXP","replace","input","re","value","RegExp","reduce","pascalCaseTransform","index","firstChar","charAt","lowerChars","substr","toUpperCase","options","camelCaseTransform","removePx","String","ignoredAttrNames","convertReactProps","attrs","originalContent","_props","Object","keys","filter","propName","includes","forEach","convertedName","_b","_c","_d","result","splitRegexp","stripRegexp","start","end","length","slice","split","map","transform","join","delimiter","pascalCase","filterNode","node","tagName","renderChildren","nodes","parentKey","children","nodeKey","childrenNodes","key","React","createElement","InternalWebIcon","forwardRef","props","svgRef","c","restProps","content","width","height","_a","viewBox","orgWidth","orgHeight","restAttrs","_viewBox","ref","data","displayName","WebIcon","createIconset","BaseIconComponent","familyName","variants","defaultVariant","_map","_variants","_defaultVariant","size","style","color","iconComponentConfig","variant","name","otherProps","internalStyle","fill","createIconsetFactory","Icon","iconNames","regular","variantNames"],"mappings":"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","file":"static/js/18.4a395ea8.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  IconsetBaseProps,\n  CreateIconsetOptions,\n  IconProps,\n} from \"./types\";\n\nexport const DEFAULT_VARIANT = \"regular\";\n\nexport function createIconsetFactory<\n  IconNames extends string = string,\n  IconVariant extends string = string\n>(\n  {\n    familyName,\n    map,\n    variants,\n    defaultVariant,\n  }: CreateIconsetOptions<IconNames, IconVariant>,\n  BaseIconComponent: React.ComponentType<IconProps>\n) {\n  const _map: any = map;\n  const _variants: string[] = variants || [];\n  const _defaultVariant: string = defaultVariant || DEFAULT_VARIANT;\n\n  const Iconset = (\n    props: IconsetBaseProps<IconNames, IconVariant>,\n    ref: any\n  ) => {\n    const {\n      name,\n      variant = _defaultVariant,\n      size,\n      style,\n      color,\n      ...restProps\n    } = props;\n    const iconComponentConfig =\n      _variants.length > 0 && _map[variant]\n      // select target variant or defaultVariant if not exist\n        ? _map[variant][name] || _map[defaultVariant][name]\n        : _map[name];\n    if (!iconComponentConfig) {\n      if (process.env.NODE_ENV === \"development\") {\n        console.warn(\n          `Icon ${name} (${variant}/${defaultVariant}) not found from iconset ${familyName}.`\n        );\n      }\n      return null;\n    }\n    const otherProps: any = {};\n    const internalStyle: any = {};\n    if (size) {\n      internalStyle.width = size;\n      internalStyle.height = size;\n    }\n    if (\n      !iconComponentConfig.attrs ||\n      iconComponentConfig.attrs.fill !== \"none\"\n    ) {\n      otherProps.fill = \"currentColor\";\n    }\n    if (color) {\n      // For some iconset, they use stroke to styling and cannot use fill properties\n      if (\n        !iconComponentConfig.attrs ||\n        iconComponentConfig.attrs.fill !== \"none\"\n      ) {\n        otherProps.fill = color;\n      }\n      internalStyle.color = color;\n    }\n    otherProps.style = {\n      ...internalStyle,\n      ...(style || {}),\n    };\n\n    return <BaseIconComponent ref={ref} content={iconComponentConfig} {...otherProps} {...restProps} />;\n  };\n  Iconset.displayName = `Iconset(${familyName})`;\n\n  return React.forwardRef(Iconset);\n}\n","/**\n * Locale character mapping rules.\n */\ninterface Locale {\n  regexp: RegExp;\n  map: Record<string, string>;\n}\n\n/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nconst SUPPORTED_LOCALE: Record<string, Locale> = {\n  tr: {\n    regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n    map: {\n      İ: \"\\u0069\",\n      I: \"\\u0131\",\n      İ: \"\\u0069\",\n    },\n  },\n  az: {\n    regexp: /\\u0130/g,\n    map: {\n      İ: \"\\u0069\",\n      I: \"\\u0131\",\n      İ: \"\\u0069\",\n    },\n  },\n  lt: {\n    regexp: /\\u0049|\\u004A|\\u012E|\\u00CC|\\u00CD|\\u0128/g,\n    map: {\n      I: \"\\u0069\\u0307\",\n      J: \"\\u006A\\u0307\",\n      Į: \"\\u012F\\u0307\",\n      Ì: \"\\u0069\\u0307\\u0300\",\n      Í: \"\\u0069\\u0307\\u0301\",\n      Ĩ: \"\\u0069\\u0307\\u0303\",\n    },\n  },\n};\n\n/**\n * Localized lower case.\n */\nexport function localeLowerCase(str: string, locale: string) {\n  const lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n  if (lang) return lowerCase(str.replace(lang.regexp, (m) => lang.map[m]));\n  return lowerCase(str);\n}\n\n/**\n * Lower case as a function.\n */\nexport function lowerCase(str: string) {\n  return str.toLowerCase();\n}\n","import { lowerCase } from \"lower-case\";\n\nexport interface Options {\n  splitRegexp?: RegExp | RegExp[];\n  stripRegexp?: RegExp | RegExp[];\n  delimiter?: string;\n  transform?: (part: string, index: number, parts: string[]) => string;\n}\n\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nconst DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n\n// Remove all non-word characters.\nconst DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input: string, options: Options = {}) {\n  const {\n    splitRegexp = DEFAULT_SPLIT_REGEXP,\n    stripRegexp = DEFAULT_STRIP_REGEXP,\n    transform = lowerCase,\n    delimiter = \" \",\n  } = options;\n\n  let result = replace(\n    replace(input, splitRegexp, \"$1\\0$2\"),\n    stripRegexp,\n    \"\\0\"\n  );\n  let start = 0;\n  let end = result.length;\n\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") start++;\n  while (result.charAt(end - 1) === \"\\0\") end--;\n\n  // Transform each token independently.\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input: string, re: RegExp | RegExp[], value: string) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce((input, re) => input.replace(re, value), input);\n}\n","import { noCase, Options } from \"no-case\";\n\nexport { Options };\n\nexport function pascalCaseTransform(input: string, index: number) {\n  const firstChar = input.charAt(0);\n  const lowerChars = input.substr(1).toLowerCase();\n  if (index > 0 && firstChar >= \"0\" && firstChar <= \"9\") {\n    return `_${firstChar}${lowerChars}`;\n  }\n  return `${firstChar.toUpperCase()}${lowerChars}`;\n}\n\nexport function pascalCaseTransformMerge(input: string) {\n  return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();\n}\n\nexport function pascalCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \"\",\n    transform: pascalCaseTransform,\n    ...options,\n  });\n}\n","import {\n  pascalCase,\n  pascalCaseTransform,\n  pascalCaseTransformMerge,\n  Options,\n} from \"pascal-case\";\n\nexport { Options };\n\nexport function camelCaseTransform(input: string, index: number) {\n  if (index === 0) return input.toLowerCase();\n  return pascalCaseTransform(input, index);\n}\n\nexport function camelCaseTransformMerge(input: string, index: number) {\n  if (index === 0) return input.toLowerCase();\n  return pascalCaseTransformMerge(input);\n}\n\nexport function camelCase(input: string, options: Options = {}) {\n  return pascalCase(input, {\n    transform: camelCaseTransform,\n    ...options,\n  });\n}\n","import { camelCase } from \"change-case\";\n\nexport const removePx = (str?: string | number) =>\n  !str ? \"\" : String(str).replace(\"px\", \"\");\n\nconst ignoredAttrNames = [\"xmlns\", \"title\"];\n\nexport const convertReactProps = (\n  attrs: Record<string, any>,\n  originalContent: any = {}\n) => {\n  const _props: any = {\n    ...originalContent,\n  };\n\n  Object.keys(attrs)\n    .filter((propName) => !ignoredAttrNames.includes(propName))\n    .forEach((propName) => {\n      let convertedName = camelCase(propName);\n      if (propName === \"class\") {\n        convertedName = \"className\";\n      }\n      _props[convertedName] = attrs[propName];\n    });\n  return _props;\n};\n","import React from \"react\";\nimport {\n  CreateIconFactoryType,\n  IconProps,\n  IconBaseProps,\n  IconSVG,\n  IconSVGNode,\n} from \"./types\";\nimport { convertReactProps, removePx } from \"./utils\";\n\nconst filterNode = (node: IconSVGNode) => node.tagName !== \"title\";\n/**\n * Travel children node\n */\nconst renderChildren = (nodes: any[], parentKey: string = \"#\") => {\n  const filteredNodes = nodes.filter(filterNode);\n  return filteredNodes.map((node, index) => {\n    const { tagName, attrs, children } = node;\n    const nodeKey = `${parentKey}/$${tagName}_${index}`;\n\n    let childrenNodes: any[] = [];\n    if (children && children.length > 0) {\n      childrenNodes = renderChildren(children, nodeKey);\n    }\n    const _props: any = convertReactProps(attrs, {\n      key: nodeKey,\n    });\n\n    return React.createElement(tagName, _props, ...childrenNodes);\n  });\n};\nconst InternalWebIcon = React.forwardRef(function(\n  props: IconProps,\n  svgRef?: any\n) {\n  const { content, ...restProps } = props;\n  if (!content) {\n    return null;\n  }\n  const { attrs, width, height, data = [] } = content;\n  const { viewBox, width: orgWidth, height: orgHeight, ...restAttrs } =\n    attrs || {};\n  const _viewBox =\n    viewBox ||\n    `0 0 ${removePx(orgWidth || width)} ${removePx(orgHeight || height)}`;\n  return (\n    <svg\n      viewBox={_viewBox}\n      {...convertReactProps(restProps)}\n      {...convertReactProps(restAttrs)}\n      ref={svgRef}\n    >\n      {renderChildren(data)}\n    </svg>\n  );\n});\nInternalWebIcon.displayName = \"WebIcon\";\n\nexport const WebIcon = InternalWebIcon;\n\nexport const createWebIcon: CreateIconFactoryType = (content: IconSVG) => {\n  function WebIconWrapper(props: IconBaseProps, svgRef?: any) {\n    return <InternalWebIcon ref={svgRef} content={content} {...props} />;\n  }\n  return React.forwardRef(WebIconWrapper);\n};\n","import { CreateIconsetOptions } from \"./types\";\nimport { createIconsetFactory } from \"./createIconsetFactory\";\nimport { createWebIcon, WebIcon } from \"./createWebIcon\";\n\nexport * from \"./types\";\nexport * from \"./createIconsetFactory\";\n\nexport function createIconset<\n  IconNames extends string = string,\n  IconVariant extends string = string\n>(options: CreateIconsetOptions<IconNames, IconVariant>) {\n  return createIconsetFactory(options, WebIcon);\n}\n\nexport const createIconComponent = createWebIcon;\nexport const Icon = WebIcon;\n","import Iconset, { map } from '@svgr-iconkit/entypo';\n\nexport const Icon = Iconset;\nexport const iconNames = Object.keys(map.regular);\nexport const variantNames = Object.keys(map);\n"],"sourceRoot":""}