{"version":3,"sources":["src/config.js","src/components/IconList.js","src/components/Header.js","src/components/Content.js","src/components/ColorPicker.js","src/containers/SideMenu.js","src/containers/Home.js"],"names":["iconsets","packageName","name","resources","defaultVariant","IconContent","styled","Box","IconWrapper","Pressable","IconListWrapper","View","displayName","IconLabel","Text","IconList","maxCount","allVariantNames","color","size","variant","allIconNames","Iconset","component","onIconPress","searching","numColumn","useToast","length","alignItems","columns","spacingY","spacingX","slice","map","icon","onPress","key","noOfLines","numberOfLines","HeaderWrapper","HeaderBody","HeaderRow","HeaderItem","leftSide","css","rightSide","Header","safeAreaTop","children","rest","Item","Row","Content","contentContainerStyle","padder","restProps","contentStyles","paddingTop","paddingBottom","ScrollView","style","flex","scrollIndicatorInsets","top","bottom","left","right","defaultColors","ColorPicker","value","colors","onValueChange","flexWrap","py","borderColor","borderWidth","borderRadius","m","backgroundColor","width","height","maxLength","onChangeText","text","SideMenu","currentIconsetIndex","onChangeIconset","zIndex","bg","p","justifyContent","href","as","AppIcon","safeAreaBottom","margin","item","index","accessibilityLabel","colorScheme","undefined","textAlign","title","Home","useDisclose","isDrawerOpen","isOpen","onDrawerOpen","onOpen","onDrawerClose","onClose","toast","isSettingOpen","onSettingOpen","onSettingClose","windowSize","Dimensions","get","useMediaQuery","minWidth","isTablet","isLandscape","useState","setIconsetIndex","keyword","setKeyword","currentVariant","setVariant","useCallback","newIndex","setMaxIconsShown","iconSize","setIconSize","iconColor","setIconColor","setUpdateTime","iconsetInfo","iconNames","isSearchMode","maxIconsShown","matchedIconNames","filter","toLowerCase","includes","useEffect","__loaded","a","async","Icon","Date","now","run","iconsColumns","Math","floor","hasVariants","Array","isArray","variantNames","shouldVariantShowInHeader","borderRightColor","borderRightWidth","content","AppIconMap","regular","menu","placeholder","settings","bold","fontSize","closeOnSelect","trigger","triggerProps","flexDirection","isDisabled","BrandsIconMap","npm","Clipboard","setString","show","duration","flexBasis","mx","mb","my","padding","maxWidth","CloseButton","Body","Label","selectedValue","label","minValue","maxValue","defaultValue","onChangeEnd","Track","FilledTrack","Thumb","in","placement","rounded"],"mappings":"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","file":"static/js/5.b6373745.chunk.js","sourcesContent":["\nexport const iconsets = [\n  {\n    packageName: \"@svgr-iconkit/fontawesome5\",\n    name: \"FontAwesome5\",\n    resources: () => import('./iconset/FontAwesome5'),\n  },\n  {\n    packageName: \"@svgr-iconkit/fontawesome5-brands\",\n    name: \"FontAwesome5 - Brands\",\n    resources: () => import('./iconset/FontAwesome5-brands'),\n  },\n  {\n    packageName: \"@svgr-iconkit/fluentui-system\",\n    name: \"FluentUISystem\",\n    resources: () => import('./iconset/FluentUISystem'),\n  },\n  {\n    packageName: \"@svgr-iconkit/feather\",\n    name: \"Feather\",\n    resources: () => import('./iconset/Feather'),\n  },\n  {\n    packageName: \"@svgr-iconkit/foundation\",\n    name: \"Foundation\",\n    resources: () => import('./iconset/FontAwesome5-brands'),\n  },\n  {\n    packageName: \"@svgr-iconkit/ant-design\",\n    name: \"Ant Design Icons\",\n    defaultVariant: 'filled',\n    resources: () => import('./iconset/AntDesignIcon'),\n  },\n  {\n    packageName: \"@svgr-iconkit/entypo\",\n    name: \"Entypo\",\n    resources: () => import('./iconset/Entypo'),\n  },\n  {\n    packageName: \"@svgr-iconkit/ionicons\",\n    name: \"Ionicons\",\n    resources: () => import('./iconset/Ionicons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/octicons\",\n    name: \"Octicons\",\n    resources: () => import('./iconset/Octicons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/material-community\",\n    name: \"Material Community\",\n    resources: () => import('./iconset/MaterialCommunity'),\n  },\n  {\n    packageName: \"@svgr-iconkit/material-design\",\n    name: \"Material Design Icons\",\n    resources: () => import('./iconset/MaterialDesignIcons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/bootstrap\",\n    name: \"Bootstrap Icons\",\n    resources: () => import('./iconset/BootstrapIcon'),\n  },\n  {\n    packageName: \"@svgr-iconkit/css-gg\",\n    name: \"css.gg\",\n    resources: () => import('./iconset/css.gg'),\n  },\n  {\n    packageName: \"@svgr-iconkit/heroicons\",\n    name: \"Heroicons\",\n    defaultVariant: 'solid',\n    resources: () => import('./iconset/Heroicons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/simple-icons\",\n    name: \"Simple Icons\",\n    resources: () => import('./iconset/SimpleIcons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/typicons\",\n    name: \"Typicons Icons\",\n    resources: () => import('./iconset/Typicons'),\n  }\n];\n","import React from \"react\";\nimport { ClipboardStatic } from \"react-native\";\nimport {\n  Box,\n  SimpleGrid,\n  Text,\n  Icon,\n  Pressable,\n  useToast,\n  Divider,\n} from \"native-base\";\nimport styled, { css } from \"styled-components/native\";\nimport Clipboard from \"expo-clipboard\";\n\nconst IconContent = styled(Box)`\n  border-bottom-width: 1px;\n  border-bottom-color: #ccc;\n  align-items: center;\n  justify-content: center;\n  width: 100px;\n  height: 70px;\n`;\nconst IconWrapper = styled(Pressable)`\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  width: 100px;\n  height: 100px;\n`;\nconst IconListWrapper = styled.View`\n  position: relative;\n  width: 100%;\n`;\nIconListWrapper.displayName = \"IconListWrapper\";\n\nconst IconLabel = styled(Text)`\n  align-items: center;\n  justify-content: center;\n  padding: 2px;\n  width: 100px;\n  height: 30px;\n  font-size: 9px;\n  text-align: center;\n`;\n\nexport default function IconList({\n  maxCount,\n  allVariantNames = [],\n  color = \"#ccc\",\n  size = 24,\n  variant = \"regular\",\n  allIconNames = [],\n  component: Iconset,\n  searching = false,\n  onIconPress,\n  numColumn = 3,\n}) {\n  const toast = useToast();\n\n  if (!Iconset) {\n    return null;\n  }\n\n  return (\n      <IconListWrapper color={color} size={size}>\n        {allIconNames && allIconNames.length > 0 && (\n          <SimpleGrid\n            alignItems=\"center\"\n            columns={numColumn}\n            spacingY={4}\n            spacingX={4}\n          >\n            {allIconNames.slice(0, maxCount).map((icon) => (\n              <IconWrapper\n                onPress={() => onIconPress && onIconPress(icon)}\n                key={icon}\n              >\n                <IconContent>\n                  <Iconset\n                    variant={variant}\n                    name={icon}\n                    size={size}\n                    color={color}\n                  />\n                </IconContent>\n                <IconLabel noOfLines={3} numberOfLines={3}>\n                  {icon}\n                </IconLabel>\n              </IconWrapper>\n            ))}\n          </SimpleGrid>\n        )}\n      </IconListWrapper>\n  );\n}\n","import React from \"react\";\nimport { Dimensions } from \"react-native\";\nimport { Box, SimpleGrid, Text } from \"native-base\";\nimport styled, { css } from \"styled-components/native\";\n\nconst HeaderWrapper = styled(Box)`\n  position: relative;\n`;\n\nconst HeaderBody = styled(Box)`\n  background-color: #f8fafc;\n  border-bottom-width: 1px;\n  border-bottom-color: #f1f5f9;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  position: relative;\n`;\nHeaderBody.displayName = 'HeaderBody';\n\nconst HeaderRow = styled(Box)`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  min-height: 48px;\n  padding-left: 8px;\n  padding-right: 8px;\n  position: relative;\n`;\nHeaderRow.displayName = 'HeaderRow';\n\nconst HeaderItem = styled(Box)`\n  height: 40px;\n  min-width: 40px;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  margin-left: 6px;\n  margin-right: 6px;\n  ${({ leftSide = false }) =>\n    !!leftSide &&\n    css`\n      justify-content: flex-start;\n    `}\n  ${({ rightSide = false }) =>\n    !!rightSide &&\n    css`\n      justify-content: flex-end;\n    `}\n`;\nHeaderItem.displayName = 'HeaderItem';\n\nfunction Header({ safeAreaTop, children, ...rest }) {\n  return (\n    <HeaderWrapper {...rest}>\n      <HeaderBody safeAreaTop={safeAreaTop}>{children}</HeaderBody>\n    </HeaderWrapper>\n  );\n}\n\nHeader.Item = HeaderItem;\nHeader.Row = HeaderRow;\n\nexport const Item = HeaderItem;\n\nexport default Header;\n","import React from \"react\";\nimport { Box } from \"native-base\";\nimport { ScrollView } from \"react-native\";\n\nfunction Content({\n  children,\n  contentContainerStyle,\n  padder = false,\n  ...restProps\n}) {\n  const contentStyles = {};\n  if (padder) {\n    contentStyles.paddingTop = 20;\n    contentStyles.paddingBottom = 20;\n  }\n  return (\n    <ScrollView\n      style={{flex: 1}}\n      scrollIndicatorInsets={{ top: 4, bottom: 4, left: 4, right: 4 }}\n      contentContainerStyle={[contentStyles, contentContainerStyle]}\n      {...restProps}\n    >\n      {children}\n    </ScrollView>\n  );\n}\n\nexport default Content;\n","import React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { HStack, Input, Pressable } from \"native-base\";\n\nconst defaultColors = [\"#FF6900\", \"#FCB900\", \"#7BDCB5\", \"#00D084\", \"#8ED1FC\", \"#0693E3\", \"#ABB8C3\", \"#EB144C\", \"#F78DA7\", \"#9900EF\"];\nexport default function ColorPicker({\n  value = \"#000\",\n  colors = defaultColors,\n  onValueChange,\n}) {\n  return (<>\n    <HStack flexWrap=\"wrap\" py={2} alignItems=\"center\">\n      {colors.map((color) => (\n        <Pressable\n          borderColor={value === color ? \"#333\" : \"transparent\"}\n          borderWidth={2}\n          borderRadius={5}\n          m={1}\n          key={color}\n          backgroundColor={color}\n          width={38}\n          height={38}\n          onPress={() => onValueChange && onValueChange(color)}\n        />\n      ))}\n      <Input width=\"130px\" m={1} size=\"sm\" height={38} maxLength={9} value={value} onChangeText={(text) => onValueChange && onValueChange(text)} />\n    </HStack>\n\n    </>\n  );\n}\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport { Platform, ScrollView, Dimensions } from \"react-native\";\nimport {\n  Button,\n  Box,\n  Container,\n  IconButton,\n  SimpleGrid,\n  Text,\n  Tabs,\n  Input,\n  Icon,\n  Select,\n  Slide,\n  Divider,\n  useDisclose,\n  Modal,\n  VStack,\n  HStack,\n  FormControl,\n  Slider,\n  Heading,\n  Link,\n  useToast,\n  useMediaQuery,\n} from \"native-base\";\nimport AppIcon from \"@svgr-iconkit/material-community\";\nimport BrandsIcon from \"@svgr-iconkit/fontawesome5-brands\";\n\nexport default function SideMenu({\n  iconsets = [],\n  currentIconsetIndex = 0,\n  onChangeIconset,\n}) {\n  return (\n    <>\n      <Box zIndex={2} safeAreaTop bg=\"primary.500\" p={3} paddingBottom={5}>\n        <Heading alignItems=\"flex-start\" justifyContent=\"center\" color=\"#fff\">\n          svgr-iconkit{\" \"}\n          <Link href=\"https://svgr-iconkit.dev\">\n            <Icon as={AppIcon} name=\"link\" size={20} color=\"#ececec\" />{\" \"}\n          </Link>\n        </Heading>\n        <Heading color=\"#fff\" size=\"md\">\n          explorer for expo\n        </Heading>\n      </Box>\n      <Box as={ScrollView} safeAreaBottom>\n        <Heading margin={5} size=\"sm\">\n          Iconsets\n        </Heading>\n        <Box p={1}>\n          {iconsets.map((item, index) => (\n            <>\n              <Button\n                key={item.packageName}\n                accessibilityLabel={item.name}\n                colorScheme={\n                  currentIconsetIndex === index ? \"secondary\" : undefined\n                }\n                variant=\"ghost\"\n                textAlign=\"left\"\n                justifyContent=\"flex-start\"\n                onPress={() => {\n                  onChangeIconset(index);\n                }}\n                title={item.name}\n              >\n                {item.name}\n              </Button>\n            </>\n          ))}\n        </Box>\n      </Box>\n    </>\n  );\n}\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport { Platform, ScrollView, Dimensions } from \"react-native\";\nimport {\n  Button,\n  Box,\n  Container,\n  IconButton,\n  SimpleGrid,\n  Text,\n  Tabs,\n  Input,\n  Pressable,\n  Icon,\n  Select,\n  Slide,\n  Divider,\n  useDisclose,\n  Modal,\n  VStack,\n  Menu,\n  HStack,\n  FormControl,\n  Slider,\n  Heading,\n  Link,\n  useToast,\n  useMediaQuery,\n} from \"native-base\";\nimport Clipboard from \"expo-clipboard\";\nimport { Icon as SVGIcon } from \"@svgr-iconkit/core\";\nimport { map as AppIconMap } from \"@svgr-iconkit/material-design\";\nimport { map as BrandsIconMap } from \"@svgr-iconkit/fontawesome5-brands\";\n\nimport { iconsets } from \"../config\";\nimport IconList from \"../components/IconList\";\nimport Header from \"../components/Header\";\nimport Content from \"../components/Content\";\nimport ColorPicker from \"../components/ColorPicker\";\nimport SlideMenu from \"./SideMenu\";\n\nconst defaultMaxShownNum = 60;\n\nexport default function Home() {\n  const {\n    isOpen: isDrawerOpen,\n    onOpen: onDrawerOpen,\n    onClose: onDrawerClose,\n  } = useDisclose();\n  const toast = useToast();\n\n  const {\n    isOpen: isSettingOpen,\n    onOpen: onSettingOpen,\n    onClose: onSettingClose,\n  } = useDisclose();\n  const windowSize = Dimensions.get(\"window\");\n\n  const [isTablet] = useMediaQuery({ minWidth: 768 });\n  const isLandscape = windowSize.width > windowSize.height;\n\n  const [currentIconsetIndex, setIconsetIndex] = useState(0);\n  const [keyword, setKeyword] = useState(\"\");\n  const [currentVariant, setVariant] = useState(\"regular\");\n  const onChangeIconset = useCallback((newIndex) => {\n    onDrawerClose();\n    setIconsetIndex(newIndex);\n    const { defaultVariant = \"regular\" } = iconsets[newIndex];\n    setVariant(defaultVariant);\n    setMaxIconsShown(defaultMaxShownNum);\n  }, []);\n  const [iconSize, setIconSize] = useState(24);\n  const [iconColor, setIconColor] = useState(\"#0693E3\");\n  const [isColorPickerOpen, setColorPickerOpen] = useState(false);\n  const [isUsingStyledComponent, setUsingStyledComponent] = useState(true);\n\n  const [, setUpdateTime] = useState(0);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const iconsetInfo = iconsets[currentIconsetIndex] || {};\n\n  const { iconNames = [] } = iconsetInfo;\n\n  const isSearchMode =\n    !!keyword && typeof keyword === \"string\" && keyword.length > 0;\n  const [maxIconsShown, setMaxIconsShown] = useState(defaultMaxShownNum);\n\n  const matchedIconNames = !isSearchMode\n    ? iconNames\n    : iconNames.filter((name) =>\n        name.toLowerCase().includes(keyword.toLowerCase())\n      );\n\n  useEffect(() => {\n    if (\n      !iconsetInfo.resources ||\n      typeof iconsetInfo.resources !== \"function\" ||\n      iconsetInfo.__loaded\n    ) {\n      return;\n    }\n    async function run() {\n      const { Icon, ...restProps } = await iconsetInfo.resources();\n\n      iconsets[currentIconsetIndex] = {\n        ...iconsetInfo,\n        component: Icon,\n        __loaded: true,\n        ...restProps,\n      };\n      setUpdateTime(Date.now());\n    }\n    run();\n  }, [iconsetInfo, currentIconsetIndex]);\n\n  const onIconPress = (icon) => {\n    Clipboard.setString(icon);\n    toast.show({\n      duration: 6000,\n      title: `Icon name ${icon} copied in clipboard!`,\n    });\n  };\n  const onPackageNamePress = () => {\n    Clipboard.setString(iconsetInfo.packageName);\n    toast.show({\n      duration: 6000,\n      title: `Package name ${iconsetInfo.packageName} copied in clipboard!`,\n    });\n  };\n\n  const iconsColumns = Math.floor(\n    (windowSize.width - 20 - (isTablet ? 300 : 0)) / 120\n  );\n\n  const onShowMore = () => setMaxIconsShown(maxIconsShown + 60);\n\n  const hasVariants = Array.isArray(iconsetInfo.variantNames);\n  const shouldVariantShowInHeader = isLandscape && isTablet;\n\n  return (\n    <>\n      <HStack>\n        {isTablet && (\n          <Box\n            width={300}\n            height={windowSize.height}\n            backgroundColor=\"white\"\n            borderRightColor=\"#ececec\"\n            borderRightWidth={1}\n          >\n            <SlideMenu\n              iconsets={iconsets}\n              currentIconsetIndex={currentIconsetIndex}\n              onChangeIconset={onChangeIconset}\n            />\n          </Box>\n        )}\n        <Box flex={1} height={windowSize.height}>\n          <Header safeAreaTop>\n            <Header.Row>\n              {!isTablet && (\n                <Header.Item>\n                  <IconButton\n                    onPress={onDrawerOpen}\n                    icon={\n                      <SVGIcon\n                        content={AppIconMap.regular.menu}\n                        size={24}\n                        color=\"black\"\n                      />\n                    }\n                  />\n                </Header.Item>\n              )}\n              <Header.Item flex={1}>\n                <Input\n                  flex={1}\n                  size=\"xs\"\n                  placeholder=\"Filter by keywords\"\n                  value={keyword}\n                  onChangeText={setKeyword}\n                  bg=\"white\"\n                />\n              </Header.Item>\n              <Header.Item>\n                <IconButton\n                  onPress={onSettingOpen}\n                  icon={\n                    <SVGIcon\n                      content={AppIconMap.regular.settings}\n                      size={24}\n                      color=\"black\"\n                    />\n                  }\n                />\n              </Header.Item>\n            </Header.Row>\n            <Header.Row>\n              <Header.Item leftSide>\n                <Text bold fontSize=\"14px\">\n                  {iconsetInfo.packageName}\n                </Text>\n              </Header.Item>\n              {hasVariants && shouldVariantShowInHeader && (\n                <Header.Item>\n                  <Menu\n                    closeOnSelect\n                    trigger={(triggerProps) => {\n                      return (\n                        <Pressable\n                          flexDirection=\"row\"\n                          alignItems=\"center\"\n                          {...triggerProps}\n                        >\n                          <Text fontSize=\"14px\">Variants: </Text>\n                          <Text fontSize=\"14px\" bold color=\"secondary.500\">\n                            {currentVariant}\n                          </Text>\n\n                          <SVGIcon\n                            content={AppIconMap.regular[\"expand-more\"]}\n                            size={18}\n                            color=\"black\"\n                          />\n                        </Pressable>\n                      );\n                    }}\n                  >\n                    {iconsetInfo.variantNames.map((name) => (\n                      <Menu.Item\n                        isDisabled={name === currentVariant}\n                        onPress={() => setVariant(name)}\n                      >\n                        {name}\n                      </Menu.Item>\n                    ))}\n                  </Menu>\n                </Header.Item>\n              )}\n              <Header.Item rightSide>\n                <Link\n                  href={`https://npmjs.com/package/${iconsetInfo.packageName}`}\n                >\n                  <SVGIcon\n                    content={BrandsIconMap.regular.npm}\n                    name=\"npm\"\n                    size={24}\n                    color=\"red\"\n                  />{\" \"}\n                </Link>\n                <IconButton\n                  onPress={onPackageNamePress}\n                  icon={\n                    <SVGIcon\n                      content={AppIconMap.regular[\"content-copy\"]}\n                      name=\"content-copy\"\n                      size={18}\n                      color=\"black\"\n                    />\n                  }\n                />\n              </Header.Item>\n            </Header.Row>\n          </Header>\n          <Content padder>\n            {iconsetInfo && (\n              <>\n                {iconsetInfo.__loaded && matchedIconNames && matchedIconNames.length < 1 && (\n                  <Box height=\"40px\" style={{flexBasis: \"auto\"}} mx={4} flex={1}>\n                    <Text bold fontSize=\"12px\">\n                      No matched icons\n                    </Text>\n                  </Box>\n                )}\n                {matchedIconNames && matchedIconNames.length > 0 && (\n                  <Box height=\"40px\" style={{flexBasis: \"auto\"}} mb={4} mx={4} flex={1}>\n                    <Text fontSize=\"12px\">\n                      Found {matchedIconNames.length} matched icons\n                    </Text>\n                    <Divider my={4} />\n                  </Box>\n                )}\n                <IconList\n                  maxCount={maxIconsShown}\n                  component={iconsetInfo.component}\n                  variant={currentVariant}\n                  searching={isSearchMode}\n                  size={iconSize}\n                  color={iconColor}\n                  allIconNames={matchedIconNames}\n                  allVariantNames={iconsetInfo.variantNames}\n                  onIconPress={onIconPress}\n                  numColumn={iconsColumns}\n                />\n\n                {Array.isArray(matchedIconNames) &&\n                  maxIconsShown < matchedIconNames.length && (\n                    <Box safeAreaBottom padding={8}>\n                      <Button onPress={onShowMore}>Show more icons</Button>\n                    </Box>\n                  )}\n              </>\n            )}\n          </Content>\n        </Box>\n        <Modal isOpen={isSettingOpen} onClose={onSettingClose}>\n          <Modal.Content maxWidth=\"460px\">\n            <Modal.Header>Setting</Modal.Header>\n            <Modal.CloseButton />\n            <Modal.Body>\n              {hasVariants && !shouldVariantShowInHeader && (\n                <>\n                  <FormControl>\n                    <FormControl.Label>{`Variants`}</FormControl.Label>\n                    <Select\n                      selectedValue={currentVariant}\n                      onValueChange={setVariant}\n                    >\n                      {Array.isArray(iconsetInfo.variantNames) &&\n                        iconsetInfo.variantNames.map((name) => (\n                          <Select.Item key={name} label={name} value={name} />\n                        ))}\n                    </Select>\n                  </FormControl>\n                  <Divider my={2} />\n                </>\n              )}\n              <FormControl>\n                <FormControl.Label>{`Size: ${iconSize}px`}</FormControl.Label>\n                <Slider\n                  minValue={12}\n                  maxValue={48}\n                  defaultValue={iconSize}\n                  onChangeEnd={setIconSize}\n                >\n                  <Slider.Track>\n                    <Slider.FilledTrack />\n                  </Slider.Track>\n                  <Slider.Thumb />\n                </Slider>\n              </FormControl>\n              <Divider my={2} />\n              <FormControl>\n                <FormControl.Label>{`Color:`}</FormControl.Label>\n\n                <ColorPicker value={iconColor} onValueChange={setIconColor} />\n              </FormControl>\n            </Modal.Body>\n          </Modal.Content>\n        </Modal>\n      </HStack>\n\n      {!isTablet && (\n        <Slide\n          in={isDrawerOpen}\n          placement=\"left\"\n          height=\"100%\"\n          bottom={0}\n          bg=\"white\"\n        >\n          <Box\n            width=\"80%\"\n            minWidth={300}\n            bottom={0}\n            height=\"100%\"\n            bg=\"white\"\n            borderRightColor=\"#ececec\"\n            borderRightWidth={1}\n            rounded=\"md\"\n          >\n            <SlideMenu\n              iconsets={iconsets}\n              currentIconsetIndex={currentIconsetIndex}\n              onChangeIconset={onChangeIconset}\n            />\n          </Box>\n        </Slide>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}