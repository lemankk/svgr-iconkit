{"version":3,"sources":["src/config.js","src/components/StyledIcon.js","src/components/IconList.js","src/components/Header.js","src/components/Content.js","src/components/ColorPicker.js","src/containers/SideMenu.js","src/containers/Home.js"],"names":["iconsets","packageName","name","resources","defaultVariant","StyledIcon","styled","SVGIcon","size","css","color","IconContent","Box","IconWrapper","Pressable","IconListWrapper","View","displayName","IconLabel","Text","IconList","maxCount","allVariantNames","map","variant","allIconNames","Iconset","component","onIconPress","searching","numColumn","useToast","length","alignItems","columns","spacingY","spacingX","slice","iconName","onPress","key","content","noOfLines","numberOfLines","console","warn","HeaderWrapper","HeaderBody","HeaderRow","HeaderItem","leftSide","rightSide","Header","safeAreaTop","children","rest","Item","Row","Content","contentContainerStyle","padder","restProps","contentStyles","paddingTop","paddingBottom","ScrollView","style","flex","scrollIndicatorInsets","top","bottom","left","right","defaultColors","ColorPicker","value","colors","onValueChange","flexWrap","py","borderColor","borderWidth","borderRadius","m","backgroundColor","width","height","maxLength","onChangeText","text","SideMenu","currentIconsetIndex","onChangeIconset","zIndex","bg","p","justifyContent","_web","href","as","AppIcon","safeAreaBottom","margin","item","index","accessibilityLabel","colorScheme","undefined","textAlign","title","Home","useDisclose","isDrawerOpen","isOpen","onDrawerOpen","onOpen","onDrawerClose","onClose","toast","isSettingOpen","onSettingOpen","onSettingClose","windowSize","Dimensions","get","useMediaQuery","minWidth","isTablet","isLandscape","useState","setIconsetIndex","keyword","setKeyword","currentVariant","setVariant","useCallback","newIndex","setMaxIconsShown","iconSize","setIconSize","iconColor","setIconColor","setUpdateTime","iconsetInfo","iconNames","isSearchMode","maxIconsShown","matchedIconNames","filter","toLowerCase","includes","useEffect","__loaded","a","async","Icon","Date","now","run","iconsColumns","Math","floor","hasVariants","Array","isArray","variantNames","shouldVariantShowInHeader","borderRightColor","borderRightWidth","icon","AppIconMap","regular","menu","placeholder","settings","bold","fontSize","mx","closeOnSelect","trigger","triggerProps","flexDirection","isDisabled","BrandsIconMap","npm","Clipboard","setString","show","duration","fill","flexBasis","mb","my","padding","maxWidth","CloseButton","Body","Label","selectedValue","label","minValue","maxValue","defaultValue","onChangeEnd","Track","FilledTrack","Thumb","in","placement","rounded"],"mappings":"sSACaA,EAAW,CACtB,CACEC,YAAa,6BACbC,KAAM,eACNC,UAAW,kBAAM,wDAEnB,CACEF,YAAa,oCACbC,KAAM,wBACNC,UAAW,kBAAM,gCAEnB,CACEF,YAAa,gCACbC,KAAM,iBACNC,UAAW,kBAAM,wDAEnB,CACEF,YAAa,wBACbC,KAAM,UACNC,UAAW,kBAAM,uDAEnB,CACEF,YAAa,2BACbC,KAAM,aACNC,UAAW,kBAAM,gCAEnB,CACEF,YAAa,2BACbC,KAAM,mBACNE,eAAgB,SAChBD,UAAW,kBAAM,uDAEnB,CACEF,YAAa,uBACbC,KAAM,SACNC,UAAW,kBAAM,uDAEnB,CACEF,YAAa,yBACbC,KAAM,WACNC,UAAW,kBAAM,wDAEnB,CACEF,YAAa,yBACbC,KAAM,WACNC,UAAW,kBAAM,wDAEnB,CACEF,YAAa,mCACbC,KAAM,qBACNC,UAAW,kBAAM,iCAEnB,CACEF,YAAa,gCACbC,KAAM,wBACNC,UAAW,kBAAM,iCAEnB,CACEF,YAAa,0BACbC,KAAM,kBACNC,UAAW,kBAAM,uDAEnB,CACEF,YAAa,uBACbC,KAAM,SACNC,UAAW,kBAAM,wDAEnB,CACEF,YAAa,0BACbC,KAAM,YACNE,eAAgB,QAChBD,UAAW,kBAAM,wDAEnB,CACEF,YAAa,6BACbC,KAAM,eACNC,UAAW,kBAAM,wDAEnB,CACEF,YAAa,yBACbC,KAAM,iBACNC,UAAW,kBAAM,yD,mCCjENE,EAdIC,kBAAOC,OAAPD,CAAH,kCACZ,gBAAGE,EAAH,EAAGA,KAAH,OACAA,GACAC,cADI,kEAEOD,EACCA,MAEZ,gBAAGE,EAAH,EAAGA,MAAH,OACAA,GACAD,cADK,0CAEMC,MCETC,EAAcL,kBAAOM,MAAPN,CAAH,qKAQXO,EAAcP,kBAAOQ,YAAPR,CAAH,yGAMXS,EAAkBT,UAAOU,KAAV,2DAIrBD,EAAgBE,YAAc,kBAE9B,IAAMC,EAAYZ,kBAAOa,OAAPb,CAAH,qKAUA,SAASc,EAAT,GAYX,IAXFC,EAWC,EAXDA,SAWC,KAVDC,gBAUC,EATDC,YASC,MATK,GASL,MARDb,aAQC,MARO,OAQP,MAPDF,YAOC,MAPM,GAON,MANDgB,eAMC,MANS,UAMT,MALDC,oBAKC,MALc,GAKd,EAJUC,EAIV,EAJDC,UAEAC,GAEC,EAHDC,UAGC,EAFDD,aAEC,IADDE,iBACC,MADW,EACX,EACaC,qBAEd,OAAKL,EAIAH,EAAIC,GAOL,kBAACT,EAAD,CAAiBL,MAAOA,EAAOF,KAAMA,GAClCiB,GAAgBA,EAAaO,OAAS,GACrC,kBAAC,aAAD,CACEC,WAAW,SACXC,QAASJ,EACTK,SAAU,EACVC,SAAU,GAETX,EAAaY,MAAM,EAAGhB,GAAUE,KAAI,SAACe,GAAD,OACnC,kBAACzB,EAAD,CACE0B,QAAS,kBAAMX,GAAeA,EAAYU,IAC1CE,IAAKF,GAEL,kBAAC3B,EAAD,KACE,kBAAC,EAAD,CACE8B,QAASlB,EAAIC,GAASc,GACtB9B,KAAMA,EACNE,MAAOA,KAGX,kBAACQ,EAAD,CAAWwB,UAAW,EAAGC,cAAe,GACrCL,UA3BfM,QAAQC,KAAK,sCAAuCrB,EAASD,GAEtD,MANA,K,6CCxDLuB,EAAgBxC,kBAAOM,MAAPN,CAAH,2CAIbyC,EAAazC,kBAAOM,MAAPN,CAAH,gPAUhByC,EAAW9B,YAAc,aAEzB,IAAM+B,EAAY1C,kBAAOM,MAAPN,CAAH,kOAWf0C,EAAU/B,YAAc,YAExB,IAAMgC,EAAa3C,kBAAOM,MAAPN,CAAH,8LAQZ,oBAAG4C,SAAH,yBAEAzC,cADA,+DAIA,oBAAG0C,UAAH,yBAEA1C,cADA,6DAOJ,SAAS2C,EAAT,GAAqD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,SAAaC,EAAQ,SAClD,OACE,kBAACT,EAAkBS,EACjB,kBAACR,EAAD,CAAYM,YAAaA,GAAcC,IAL7CL,EAAWhC,YAAc,aAUzBmC,EAAOI,KAAOP,EACdG,EAAOK,IAAMT,EAEN,IAEQI,I,wDCzCAM,MAvBf,YAKI,IAJFJ,EAIC,EAJDA,SACAK,EAGC,EAHDA,sBAGC,IAFDC,cAEC,SADEC,EACF,SACKC,EAAgB,GAKtB,OAJIF,IACFE,EAAcC,WAAa,GAC3BD,EAAcE,cAAgB,IAG9B,kBAACC,EAAA,EAAD,KACEC,MAAO,CAACC,KAAM,GACdC,sBAAuB,CAAEC,IAAK,EAAGC,OAAQ,EAAGC,KAAM,EAAGC,MAAO,GAC5Db,sBAAuB,CAACG,EAAeH,IACnCE,GAEHP,IClBDmB,GAAgB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAC3G,SAASC,GAAT,GAIX,IAAD,IAHDC,aAGC,MAHO,OAGP,MAFDC,cAEC,MAFQH,GAER,EADDI,EACC,EADDA,cAEA,OAAQ,oCACN,kBAAC,SAAD,CAAQC,SAAS,OAAOC,GAAI,EAAG9C,WAAW,UACvC2C,EAAOrD,KAAI,SAACb,GAAD,OACV,kBAAC,YAAD,CACEsE,YAAaL,IAAUjE,EAAQ,OAAS,cACxCuE,YAAa,EACbC,aAAc,EACdC,EAAG,EACH3C,IAAK9B,EACL0E,gBAAiB1E,EACjB2E,MAAO,GACPC,OAAQ,GACR/C,QAAS,kBAAMsC,GAAiBA,EAAcnE,SAGlD,kBAAC,QAAD,CAAO2E,MAAM,QAAQF,EAAG,EAAG3E,KAAK,KAAK8E,OAAQ,GAAIC,UAAW,EAAGZ,MAAOA,EAAOa,aAAc,SAACC,GAAD,OAAUZ,GAAiBA,EAAcY,Q,cCI3H,SAASC,GAAT,GAIX,IAAD,IAHD1F,gBAGC,MAHU,GAGV,MAFD2F,2BAEC,MAFqB,EAErB,EADDC,EACC,EADDA,gBAEA,OACE,oCACE,kBAAC,MAAD,CAAKC,OAAQ,EAAGxC,aAAW,EAACyC,GAAG,cAAcC,EAAG,EAAG/B,cAAe,GAChE,kBAAC,UAAD,CAAS/B,WAAW,aAAa+D,eAAe,SAAStF,MAAM,QAA/D,eACe,IACb,kBAAC,OAAD,CACEuF,KAAM,CACJ,gBAAiB,oBACjB,cAAc,qBAEhBC,KAAK,4BAEL,kBAAC,OAAD,CAAMC,GAAIC,KAASlG,KAAK,OAAOM,KAAM,EAAGE,MAAM,YAAa,MAG/D,kBAAC,UAAD,CAASA,MAAM,OAAOF,KAAK,MAA3B,sBAIF,kBAAC,MAAD,CAAK2F,GAAIlC,IAAYoC,gBAAc,GACjC,kBAAC,UAAD,CAASC,OAAQ,EAAG9F,KAAK,MAAzB,YAGA,kBAAC,MAAD,CAAKuF,EAAG,GACL/F,EAASuB,KAAI,SAACgF,EAAMC,GAAP,OACZ,oCACE,kBAAC,SAAD,CACEhE,IAAK+D,EAAKtG,YACVwG,mBAAoBF,EAAKrG,KACzB+F,KAAM,CACJ,gBAAiB,eACjB,cAAc,gBAAiBM,EAAKtG,aAEtCyG,YACEf,IAAwBa,EAAQ,iBAAcG,EAEhDnF,QAAQ,QACRoF,UAAU,OACVZ,eAAe,aACfzD,QAAS,WACPqD,EAAgBY,IAElBK,MAAON,EAAKrG,MAEXqG,EAAKrG,a,qlBCnCP,SAAS4G,KACtB,MAIIC,wBAHMC,EADV,EACEC,OACQC,EAFV,EAEEC,OACSC,EAHX,EAGEC,QAEIC,EAAQvF,qBAEd,EAIIgF,wBAHMQ,EADV,EACEN,OACQO,EAFV,EAEEL,OACSM,EAHX,EAGEJ,QAEIK,EAAaC,IAAWC,IAAI,UAElC,EAAmBC,wBAAc,CAAEC,SAAU,MAAtCC,EAAP,YACMC,EAAcN,EAAWrC,MAAQqC,EAAWpC,OAElD,EAA+C2C,mBAAS,GAAxD,WAAOtC,EAAP,KAA4BuC,EAA5B,KACA,EAA8BD,mBAAS,IAAvC,WAAOE,EAAP,KAAgBC,EAAhB,KACA,EAAqCH,mBAAS,WAA9C,WAAOI,EAAP,KAAuBC,EAAvB,KACM1C,EAAkB2C,uBAAY,SAACC,GACnCpB,IACAc,EAAgBM,GAChB,MAAuCxI,EAASwI,GAAxCpI,eACRkI,OADA,MAAyB,UAAzB,GAEAG,GA5BuB,MA6BtB,IACH,EAAgCR,mBAAS,IAAzC,WAAOS,EAAP,KAAiBC,EAAjB,KACA,EAAkCV,mBAAS,WAA3C,WAAOW,EAAP,KAAkBC,EAAlB,KACA,EAAgDZ,oBAAS,GAAzD,WACA,GADA,UAC0DA,oBAAS,IAAnE,WAEA,IAFA,UAE0BA,mBAAS,IAA1Ba,GAAT,aAGMC,GAAc/I,EAAS2F,IAAwB,GAErD,GAA2BoD,GAAnBC,kBAAR,OAAoB,GAApB,GAEMC,KACFd,GAA8B,kBAAZA,GAAwBA,EAAQnG,OAAS,EAC/D,GAA0CiG,mBA5CjB,IA4CzB,aAAOiB,GAAP,MAAsBT,GAAtB,MAEMU,GAAoBF,GAEtBD,GAAUI,QAAO,SAAClJ,GAAD,OACfA,EAAKmJ,cAAcC,SAASnB,EAAQkB,kBAFtCL,GAKJO,qBAAU,WAELR,GAAY5I,WACoB,oBAA1B4I,GAAY5I,YACnB4I,GAAYS,UAId,uBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACuCV,GAAY5I,aADnD,gBACUwJ,EADV,EACUA,KAAS9F,EADnB,UAGE7D,EAAS2F,GAAT,SACKoD,IADL,IAEEpH,UAAWgI,EACXH,UAAU,GACP3F,GAELiF,GAAcc,KAAKC,OATrB,4DAWAC,KACC,CAACf,GAAapD,IAEjB,IAeMoE,GAAeC,KAAKC,OACvBvC,EAAWrC,MAAQ,IAAM0C,EAAW,IAAM,IAAM,KAK7CmC,GAAcC,MAAMC,QAAQrB,GAAYsB,cACxCC,GAA4BtC,GAAeD,EAEjD,OACE,oCACE,kBAAC,SAAD,KACGA,GACC,kBAAC,MAAD,CACE1C,MAAO,IACPC,OAAQoC,EAAWpC,OACnBF,gBAAgB,QAChBmF,iBAAiB,UACjBC,iBAAkB,GAElB,kBAAC,GAAD,CACExK,SAAUA,EACV2F,oBAAqBA,EACrBC,gBAAiBA,KAIvB,kBAAC,MAAD,CAAKzB,KAAM,EAAGmB,OAAQoC,EAAWpC,QAC/B,kBAAC,EAAD,CAAQjC,aAAW,GACjB,kBAAC,EAAOI,IAAR,MACIsE,GACA,kBAAC,EAAOvE,KAAR,KACE,kBAAC,aAAD,CACEyC,KAAM,CACJ,gBAAiB,aACjB,cAAc,cAAe8C,GAAY9I,aAE3CsC,QAAS2E,EACTuD,KACE,kBAAC,EAAD,CACEhI,QAASiI,IAAWC,QAAQC,KAC5BpK,KAAM,GACNE,MAAM,aAMhB,kBAAC,EAAO8C,KAAR,CAAaW,KAAM,GACjB,kBAAC,QAAD,CACEA,KAAM,EACN3D,KAAK,KACLyF,KAAM,CACJ,gBAAiB,oBACjB,cAAc,qBAAsB8C,GAAY9I,aAElD4K,YAAY,qBACZlG,MAAOwD,EACP3C,aAAc4C,EACdtC,GAAG,WAGP,kBAAC,EAAOtC,KAAR,KACE,kBAAC,aAAD,CACEjB,QAASiF,EACTvB,KAAM,CACJ,gBAAiB,aACjB,cAAc,cAAe8C,GAAY9I,aAE3CwK,KACE,kBAAC,EAAD,CACEhI,QAASiI,IAAWC,QAAQG,SAC5BtK,KAAM,GACNE,MAAM,cAMhB,kBAAC,EAAO+C,IAAR,KACE,kBAAC,EAAOD,KAAR,CAAaN,UAAQ,GACnB,kBAAC,OAAD,CAAM6H,MAAI,EAACC,SAAS,QACjBjC,GAAY9I,aAEdiK,IAAeI,IACd,oCACE,kBAAC,OAAD,CAAM5J,MAAM,OAAOsK,SAAS,OAAOC,GAAI,GAAvC,KAGA,kBAAC,OAAD,CACEC,eAAa,EACbC,QAAS,SAACC,GACR,OACE,kBAAC,YAAD,KACEC,cAAc,MACdpJ,WAAW,SACXgE,KAAM,CACJ,gBAAiB,cACjB,cAAc,eAAgB8C,GAAY9I,cAExCmL,GAEJ,kBAAC,OAAD,CAAMJ,SAAS,OAAOD,MAAI,EAACrK,MAAM,iBAC9B2H,GAGH,kBAAC,OAAD,CAAMlC,GAAI9F,EACRoC,QAASiI,IAAWC,QAAQ,eAC5BnK,KAAM,GACNE,MAAM,qBAMbqI,GAAYsB,aAAa9I,KAAI,SAACrB,GAAD,OAC5B,kBAAC,OAAKsD,KAAN,CACEsE,SAAS,QACT7B,KAAM,CACJ,gBAAiB,qBACjB,cAAc,sBAAuB8C,GAAY9I,YAAjD,IAAgEC,GAElEoL,WAAYpL,IAASmI,EACrB9F,QAAS,kBAAM+F,EAAWpI,KAEzBA,SAOb,kBAAC,EAAOsD,KAAR,CAAaL,WAAS,GACpB,kBAAC,OAAD,CACE8C,KAAM,CACJ,gBAAiB,UACjB,cAAc,WAAY8C,GAAY9I,aAExCiG,KAAI,6BAA+B6C,GAAY9I,aAE/C,kBAAC,EAAD,CACEwC,QAAS8I,IAAcZ,QAAQa,IAC/BtL,KAAK,MACLM,KAAM,GACNE,MAAM,QACL,KAEL,kBAAC,aAAD,CACE6B,QA5JW,WACzBkJ,IAAUC,UAAU3C,GAAY9I,aAChCqH,EAAMqE,KAAK,CACTC,SAAU,IACV/E,MAAM,gBAAiBkC,GAAY9I,YAA9B,2BAyJOgG,KAAM,CACJ,gBAAiB,mBACjB,cAAc,oBAAqB8C,GAAY9I,aAEjDwK,KACE,kBAAC,EAAD,CACEhI,QAASiI,IAAWC,QAAQ,gBAC5BzK,KAAK,eACL2L,KAAK,eACLrL,KAAM,GACNE,MAAM,eAOlB,kBAAC,EAAD,CAASkD,QAAM,GACZmF,IACC,oCACGA,GAAYS,UACXL,IACAA,GAAiBnH,OAAS,GACxB,kBAAC,MAAD,CACEsD,OAAO,OACPpB,MAAO,CAAE4H,UAAW,QACpBb,GAAI,EACJ9G,KAAM,GAEN,kBAAC,OAAD,CAAM4G,MAAI,EAACC,SAAS,QAApB,qBAKL7B,IAAoBA,GAAiBnH,OAAS,GAC7C,kBAAC,MAAD,CACEsD,OAAO,OACPpB,MAAO,CAAE4H,UAAW,QACpBC,GAAI,EACJd,GAAI,EACJ9G,KAAM,GAEN,kBAAC,OAAD,CAAM6G,SAAS,QAAf,SACS7B,GAAiBnH,OAD1B,kBAGA,kBAAC,UAAD,CAASgK,GAAI,KAGjB,kBAAC5K,EAAD,CACEC,SAAU6H,GACVvH,UAAWoH,GAAYpH,UACvBH,QAAS6G,EACTxG,UAAWoH,GACXzI,KAAMkI,EACNhI,MAAOkI,EACPnH,aAAc0H,GACd7H,gBAAiByH,GAAYsB,aAC7B9I,IAAKwH,GAAYxH,IACjBK,YA9NI,SAAC6I,GACnBgB,IAAUC,UAAUjB,GACpBnD,EAAMqE,KAAK,CACTC,SAAU,IACV/E,MAAM,aAAc4D,EAAf,2BA2NO3I,UAAWiI,KAGZI,MAAMC,QAAQjB,KACbD,GAAgBC,GAAiBnH,QAC/B,kBAAC,MAAD,CAAKqE,gBAAc,EAAC4F,QAAS,GAC3B,kBAAC,SAAD,CACE1J,QAnNH,kBAAMkG,GAAiBS,GAAgB,KAoNpCjD,KAAM,CACJ,gBAAiB,eACjB,cAAc,gBAAiB8C,GAAY9I,cAJ/C,uBAed,kBAAC,QAAD,CAAOgH,OAAQM,EAAeF,QAASI,GACrC,kBAAC,QAAM/D,QAAP,CAAewI,SAAS,SACtB,kBAAC,QAAM9I,OAAP,gBACA,kBAAC,QAAM+I,YAAP,MACA,kBAAC,QAAMC,KAAP,KACGlC,KAAgBI,IACf,oCACE,kBAAC,cAAD,KACE,kBAAC,cAAY+B,MAAb,iBACA,kBAAC,SAAD,CACEpG,KAAM,CACJ,gBAAiB,qBACjB,cAAc,sBAAuB8C,GAAY9I,aAEnDqM,cAAejE,EACfxD,cAAeyD,GAEd6B,MAAMC,QAAQrB,GAAYsB,eACzBtB,GAAYsB,aAAa9I,KAAI,SAACrB,GAAD,OAC3B,kBAAC,SAAOsD,KAAR,CAAahB,IAAKtC,EAAMqM,MAAOrM,EAAMyE,MAAOzE,SAIpD,kBAAC,UAAD,CAAS8L,GAAI,KAGjB,kBAAC,cAAD,KACE,kBAAC,cAAYK,MAAb,cAA6B3D,EAA7B,MACA,kBAAC,SAAD,CACE8D,SAAU,GACVC,SAAU,GACVC,aAAchE,EACdiE,YAAahE,GAEb,kBAAC,SAAOiE,MAAR,KACE,kBAAC,SAAOC,YAAR,OAEF,kBAAC,SAAOC,MAAR,QAGJ,kBAAC,UAAD,CAASd,GAAI,IACb,kBAAC,cAAD,KACE,kBAAC,cAAYK,MAAb,eAEA,kBAAC3H,GAAD,CAAaC,MAAOiE,EAAW/D,cAAegE,UAOtDd,GACA,kBAAC,QAAD,CACEgF,GAAI/F,EACJgG,UAAU,OACV1H,OAAO,OACPhB,OAAQ,EACRwB,GAAG,SAEH,kBAAC,MAAD,CACET,MAAM,MACNyC,SAAU,IACVxD,OAAQ,EACRgB,OAAO,OACPQ,GAAG,QACHyE,iBAAiB,UACjBC,iBAAkB,EAClByC,QAAQ,MAER,kBAAC,GAAD,CACEjN,SAAUA,EACV2F,oBAAqBA,EACrBC,gBAAiBA","file":"static/js/5.e9d19fa6.chunk.js","sourcesContent":["\nexport const iconsets = [\n  {\n    packageName: \"@svgr-iconkit/fontawesome5\",\n    name: \"FontAwesome5\",\n    resources: () => import('./iconset/FontAwesome5'),\n  },\n  {\n    packageName: \"@svgr-iconkit/fontawesome5-brands\",\n    name: \"FontAwesome5 - Brands\",\n    resources: () => import('./iconset/FontAwesome5-brands'),\n  },\n  {\n    packageName: \"@svgr-iconkit/fluentui-system\",\n    name: \"FluentUISystem\",\n    resources: () => import('./iconset/FluentUISystem'),\n  },\n  {\n    packageName: \"@svgr-iconkit/feather\",\n    name: \"Feather\",\n    resources: () => import('./iconset/Feather'),\n  },\n  {\n    packageName: \"@svgr-iconkit/foundation\",\n    name: \"Foundation\",\n    resources: () => import('./iconset/FontAwesome5-brands'),\n  },\n  {\n    packageName: \"@svgr-iconkit/ant-design\",\n    name: \"Ant Design Icons\",\n    defaultVariant: 'filled',\n    resources: () => import('./iconset/AntDesignIcon'),\n  },\n  {\n    packageName: \"@svgr-iconkit/entypo\",\n    name: \"Entypo\",\n    resources: () => import('./iconset/Entypo'),\n  },\n  {\n    packageName: \"@svgr-iconkit/ionicons\",\n    name: \"Ionicons\",\n    resources: () => import('./iconset/Ionicons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/octicons\",\n    name: \"Octicons\",\n    resources: () => import('./iconset/Octicons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/material-community\",\n    name: \"Material Community\",\n    resources: () => import('./iconset/MaterialCommunity'),\n  },\n  {\n    packageName: \"@svgr-iconkit/material-design\",\n    name: \"Material Design Icons\",\n    resources: () => import('./iconset/MaterialDesignIcons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/bootstrap\",\n    name: \"Bootstrap Icons\",\n    resources: () => import('./iconset/BootstrapIcon'),\n  },\n  {\n    packageName: \"@svgr-iconkit/css-gg\",\n    name: \"css.gg\",\n    resources: () => import('./iconset/css.gg'),\n  },\n  {\n    packageName: \"@svgr-iconkit/heroicons\",\n    name: \"Heroicons\",\n    defaultVariant: 'solid',\n    resources: () => import('./iconset/Heroicons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/simple-icons\",\n    name: \"Simple Icons\",\n    resources: () => import('./iconset/SimpleIcons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/typicons\",\n    name: \"Typicons Icons\",\n    resources: () => import('./iconset/Typicons'),\n  }\n];\n","import { Icon as SVGIcon } from \"@svgr-iconkit/core/index\";\nimport styled, { css } from \"styled-components/native\";\n\nconst StyledIcon = styled(SVGIcon)`\n  ${({ size }) =>\n    size &&\n    css`\n      width: ${size}px;\n      height: ${size}px;\n    `}\n  ${({ color }) =>\n    color &&\n    css`\n      color: ${color};\n    `}\n`;\n\nexport default StyledIcon;\n","import React from \"react\";\nimport { ClipboardStatic } from \"react-native\";\nimport {\n  Box,\n  SimpleGrid,\n  Text,\n  Icon,\n  Pressable,\n  useToast,\n  Divider,\n} from \"native-base\";\nimport styled, { css } from \"styled-components/native\";\nimport Clipboard from \"expo-clipboard\";\nimport StyledIcon from \"./StyledIcon\";\n\nconst IconContent = styled(Box)`\n  border-bottom-width: 1px;\n  border-bottom-color: #ccc;\n  align-items: center;\n  justify-content: center;\n  width: 100px;\n  height: 70px;\n`;\nconst IconWrapper = styled(Pressable)`\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  width: 100px;\n  height: 100px;\n`;\nconst IconListWrapper = styled.View`\n  position: relative;\n  width: 100%;\n`;\nIconListWrapper.displayName = \"IconListWrapper\";\n\nconst IconLabel = styled(Text)`\n  align-items: center;\n  justify-content: center;\n  padding: 2px;\n  width: 100px;\n  height: 30px;\n  font-size: 9px;\n  text-align: center;\n`;\n\nexport default function IconList({\n  maxCount,\n  allVariantNames = [],\n  map = {},\n  color = \"#ccc\",\n  size = 24,\n  variant = \"regular\",\n  allIconNames = [],\n  component: Iconset,\n  searching = false,\n  onIconPress,\n  numColumn = 3,\n}) {\n  const toast = useToast();\n\n  if (!Iconset) {\n    return null;\n  }\n\n  if (!map[variant]) {\n    console.warn('Variant %s not exist in map. map=%o', variant, map);\n    \n    return null;\n  }\n\n  return (\n      <IconListWrapper color={color} size={size}>\n        {allIconNames && allIconNames.length > 0 && (\n          <SimpleGrid\n            alignItems=\"center\"\n            columns={numColumn}\n            spacingY={4}\n            spacingX={4}\n          >\n            {allIconNames.slice(0, maxCount).map((iconName) => (\n              <IconWrapper\n                onPress={() => onIconPress && onIconPress(iconName)}\n                key={iconName}\n              >\n                <IconContent>\n                  <StyledIcon\n                    content={map[variant][iconName]}\n                    size={size}\n                    color={color}\n                  />\n                </IconContent>\n                <IconLabel noOfLines={3} numberOfLines={3}>\n                  {iconName}\n                </IconLabel>\n              </IconWrapper>\n            ))}\n          </SimpleGrid>\n        )}\n      </IconListWrapper>\n  );\n}\n","import React from \"react\";\nimport { Dimensions } from \"react-native\";\nimport { Box, SimpleGrid, Text } from \"native-base\";\nimport styled, { css } from \"styled-components/native\";\n\nconst HeaderWrapper = styled(Box)`\n  position: relative;\n`;\n\nconst HeaderBody = styled(Box)`\n  background-color: #f8fafc;\n  border-bottom-width: 1px;\n  border-bottom-color: #f1f5f9;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  position: relative;\n`;\nHeaderBody.displayName = 'HeaderBody';\n\nconst HeaderRow = styled(Box)`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  min-height: 48px;\n  padding-left: 8px;\n  padding-right: 8px;\n  position: relative;\n`;\nHeaderRow.displayName = 'HeaderRow';\n\nconst HeaderItem = styled(Box)`\n  height: 40px;\n  min-width: 40px;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  margin-left: 6px;\n  margin-right: 6px;\n  ${({ leftSide = false }) =>\n    !!leftSide &&\n    css`\n      justify-content: flex-start;\n    `}\n  ${({ rightSide = false }) =>\n    !!rightSide &&\n    css`\n      justify-content: flex-end;\n    `}\n`;\nHeaderItem.displayName = 'HeaderItem';\n\nfunction Header({ safeAreaTop, children, ...rest }) {\n  return (\n    <HeaderWrapper {...rest}>\n      <HeaderBody safeAreaTop={safeAreaTop}>{children}</HeaderBody>\n    </HeaderWrapper>\n  );\n}\n\nHeader.Item = HeaderItem;\nHeader.Row = HeaderRow;\n\nexport const Item = HeaderItem;\n\nexport default Header;\n","import React from \"react\";\nimport { Box } from \"native-base\";\nimport { ScrollView } from \"react-native\";\n\nfunction Content({\n  children,\n  contentContainerStyle,\n  padder = false,\n  ...restProps\n}) {\n  const contentStyles = {};\n  if (padder) {\n    contentStyles.paddingTop = 20;\n    contentStyles.paddingBottom = 20;\n  }\n  return (\n    <ScrollView\n      style={{flex: 1}}\n      scrollIndicatorInsets={{ top: 4, bottom: 4, left: 4, right: 4 }}\n      contentContainerStyle={[contentStyles, contentContainerStyle]}\n      {...restProps}\n    >\n      {children}\n    </ScrollView>\n  );\n}\n\nexport default Content;\n","import React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { HStack, Input, Pressable } from \"native-base\";\n\nconst defaultColors = [\"#FF6900\", \"#FCB900\", \"#7BDCB5\", \"#00D084\", \"#8ED1FC\", \"#0693E3\", \"#ABB8C3\", \"#EB144C\", \"#F78DA7\", \"#9900EF\"];\nexport default function ColorPicker({\n  value = \"#000\",\n  colors = defaultColors,\n  onValueChange,\n}) {\n  return (<>\n    <HStack flexWrap=\"wrap\" py={2} alignItems=\"center\">\n      {colors.map((color) => (\n        <Pressable\n          borderColor={value === color ? \"#333\" : \"transparent\"}\n          borderWidth={2}\n          borderRadius={5}\n          m={1}\n          key={color}\n          backgroundColor={color}\n          width={38}\n          height={38}\n          onPress={() => onValueChange && onValueChange(color)}\n        />\n      ))}\n      <Input width=\"130px\" m={1} size=\"sm\" height={38} maxLength={9} value={value} onChangeText={(text) => onValueChange && onValueChange(text)} />\n    </HStack>\n\n    </>\n  );\n}\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport { Platform, ScrollView, Dimensions } from \"react-native\";\nimport {\n  Button,\n  Box,\n  Container,\n  IconButton,\n  SimpleGrid,\n  Text,\n  Tabs,\n  Input,\n  Icon,\n  Select,\n  Slide,\n  Divider,\n  useDisclose,\n  Modal,\n  VStack,\n  HStack,\n  FormControl,\n  Slider,\n  Heading,\n  Link,\n  useToast,\n  useMediaQuery,\n} from \"native-base\";\nimport AppIcon from \"@svgr-iconkit/material-community\";\nimport BrandsIcon from \"@svgr-iconkit/fontawesome5-brands\";\n\nexport default function SideMenu({\n  iconsets = [],\n  currentIconsetIndex = 0,\n  onChangeIconset,\n}) {\n  return (\n    <>\n      <Box zIndex={2} safeAreaTop bg=\"primary.500\" p={3} paddingBottom={5}>\n        <Heading alignItems=\"flex-start\" justifyContent=\"center\" color=\"#fff\">\n          svgr-iconkit{\" \"}\n          <Link\n            _web={{\n              \"data-elm-type\": \"official-link-btn\",\n              \"data-elm-id\": `official-link-btn`,\n            }}\n            href=\"https://svgr-iconkit.dev\"\n          >\n            <Icon as={AppIcon} name=\"link\" size={6} color=\"#ececec\" />{\" \"}\n          </Link>\n        </Heading>\n        <Heading color=\"#fff\" size=\"md\">\n          explorer for expo\n        </Heading>\n      </Box>\n      <Box as={ScrollView} safeAreaBottom>\n        <Heading margin={5} size=\"sm\">\n          Iconsets\n        </Heading>\n        <Box p={1}>\n          {iconsets.map((item, index) => (\n            <>\n              <Button\n                key={item.packageName}\n                accessibilityLabel={item.name}\n                _web={{\n                  \"data-elm-type\": \"sidemenu-btn\",\n                  \"data-elm-id\": `sidemenu-btn:${item.packageName}`,\n                }}\n                colorScheme={\n                  currentIconsetIndex === index ? \"secondary\" : undefined\n                }\n                variant=\"ghost\"\n                textAlign=\"left\"\n                justifyContent=\"flex-start\"\n                onPress={() => {\n                  onChangeIconset(index);\n                }}\n                title={item.name}\n              >\n                {item.name}\n              </Button>\n            </>\n          ))}\n        </Box>\n      </Box>\n    </>\n  );\n}\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport { Platform, ScrollView, Dimensions } from \"react-native\";\nimport {\n  Button,\n  Box,\n  Container,\n  Icon,\n  IconButton,\n  SimpleGrid,\n  Text,\n  Tabs,\n  Input,\n  Pressable,\n  Select,\n  Slide,\n  Divider,\n  useDisclose,\n  Modal,\n  VStack,\n  Menu,\n  HStack,\n  FormControl,\n  Slider,\n  Heading,\n  Link,\n  useToast,\n  useMediaQuery,\n} from \"native-base\";\nimport Clipboard from \"expo-clipboard\";\nimport { map as AppIconMap } from \"@svgr-iconkit/material-design\";\nimport { map as BrandsIconMap } from \"@svgr-iconkit/fontawesome5-brands\";\n\nimport { iconsets } from \"../config\";\nimport IconList from \"../components/IconList\";\nimport Header from \"../components/Header\";\nimport Content from \"../components/Content\";\nimport ColorPicker from \"../components/ColorPicker\";\nimport StyledIcon from \"../components/StyledIcon\";\nimport SlideMenu from \"./SideMenu\";\n\n\nconst defaultMaxShownNum = 60;\n\nexport default function Home() {\n  const {\n    isOpen: isDrawerOpen,\n    onOpen: onDrawerOpen,\n    onClose: onDrawerClose,\n  } = useDisclose();\n  const toast = useToast();\n\n  const {\n    isOpen: isSettingOpen,\n    onOpen: onSettingOpen,\n    onClose: onSettingClose,\n  } = useDisclose();\n  const windowSize = Dimensions.get(\"window\");\n\n  const [isTablet] = useMediaQuery({ minWidth: 768 });\n  const isLandscape = windowSize.width > windowSize.height;\n\n  const [currentIconsetIndex, setIconsetIndex] = useState(0);\n  const [keyword, setKeyword] = useState(\"\");\n  const [currentVariant, setVariant] = useState(\"regular\");\n  const onChangeIconset = useCallback((newIndex) => {\n    onDrawerClose();\n    setIconsetIndex(newIndex);\n    const { defaultVariant = \"regular\" } = iconsets[newIndex];\n    setVariant(defaultVariant);\n    setMaxIconsShown(defaultMaxShownNum);\n  }, []);\n  const [iconSize, setIconSize] = useState(24);\n  const [iconColor, setIconColor] = useState(\"#0693E3\");\n  const [isColorPickerOpen, setColorPickerOpen] = useState(false);\n  const [isUsingStyledComponent, setUsingStyledComponent] = useState(true);\n\n  const [, setUpdateTime] = useState(0);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const iconsetInfo = iconsets[currentIconsetIndex] || {};\n\n  const { iconNames = [] } = iconsetInfo;\n\n  const isSearchMode =\n    !!keyword && typeof keyword === \"string\" && keyword.length > 0;\n  const [maxIconsShown, setMaxIconsShown] = useState(defaultMaxShownNum);\n\n  const matchedIconNames = !isSearchMode\n    ? iconNames\n    : iconNames.filter((name) =>\n        name.toLowerCase().includes(keyword.toLowerCase())\n      );\n\n  useEffect(() => {\n    if (\n      !iconsetInfo.resources ||\n      typeof iconsetInfo.resources !== \"function\" ||\n      iconsetInfo.__loaded\n    ) {\n      return;\n    }\n    async function run() {\n      const { Icon, ...restProps } = await iconsetInfo.resources();\n\n      iconsets[currentIconsetIndex] = {\n        ...iconsetInfo,\n        component: Icon,\n        __loaded: true,\n        ...restProps,\n      };\n      setUpdateTime(Date.now());\n    }\n    run();\n  }, [iconsetInfo, currentIconsetIndex]);\n\n  const onIconPress = (icon) => {\n    Clipboard.setString(icon);\n    toast.show({\n      duration: 6000,\n      title: `Icon name ${icon} copied in clipboard!`,\n    });\n  };\n  const onPackageNamePress = () => {\n    Clipboard.setString(iconsetInfo.packageName);\n    toast.show({\n      duration: 6000,\n      title: `Package name ${iconsetInfo.packageName} copied in clipboard!`,\n    });\n  };\n\n  const iconsColumns = Math.floor(\n    (windowSize.width - 20 - (isTablet ? 300 : 0)) / 120\n  );\n\n  const onShowMore = () => setMaxIconsShown(maxIconsShown + 60);\n\n  const hasVariants = Array.isArray(iconsetInfo.variantNames);\n  const shouldVariantShowInHeader = isLandscape && isTablet;\n\n  return (\n    <>\n      <HStack>\n        {isTablet && (\n          <Box\n            width={300}\n            height={windowSize.height}\n            backgroundColor=\"white\"\n            borderRightColor=\"#ececec\"\n            borderRightWidth={1}\n          >\n            <SlideMenu\n              iconsets={iconsets}\n              currentIconsetIndex={currentIconsetIndex}\n              onChangeIconset={onChangeIconset}\n            />\n          </Box>\n        )}\n        <Box flex={1} height={windowSize.height}>\n          <Header safeAreaTop>\n            <Header.Row>\n              {!isTablet && (\n                <Header.Item>\n                  <IconButton\n                    _web={{\n                      \"data-elm-type\": \"drawer-btn\",\n                      \"data-elm-id\": `drawer-btn:${iconsetInfo.packageName}`,\n                    }}\n                    onPress={onDrawerOpen}\n                    icon={\n                      <StyledIcon\n                        content={AppIconMap.regular.menu}\n                        size={24}\n                        color=\"black\"\n                      />\n                    }\n                  />\n                </Header.Item>\n              )}\n              <Header.Item flex={1}>\n                <Input\n                  flex={1}\n                  size=\"xs\"\n                  _web={{\n                    \"data-elm-type\": \"keyword-filter-tf\",\n                    \"data-elm-id\": `keyword-filter-tf:${iconsetInfo.packageName}`,\n                  }}\n                  placeholder=\"Filter by keywords\"\n                  value={keyword}\n                  onChangeText={setKeyword}\n                  bg=\"white\"\n                />\n              </Header.Item>\n              <Header.Item>\n                <IconButton\n                  onPress={onSettingOpen}\n                  _web={{\n                    \"data-elm-type\": \"setting-dd\",\n                    \"data-elm-id\": `setting-dd:${iconsetInfo.packageName}`,\n                  }}\n                  icon={\n                    <StyledIcon\n                      content={AppIconMap.regular.settings}\n                      size={24}\n                      color=\"black\"\n                    />\n                  }\n                />\n              </Header.Item>\n            </Header.Row>\n            <Header.Row>\n              <Header.Item leftSide>\n                <Text bold fontSize=\"14px\">\n                  {iconsetInfo.packageName}\n                </Text>\n                {hasVariants && shouldVariantShowInHeader && (\n                  <>\n                    <Text color=\"#666\" fontSize=\"14px\" mx={1}>\n                      @\n                    </Text>\n                    <Menu\n                      closeOnSelect\n                      trigger={(triggerProps) => {\n                        return (\n                          <Pressable\n                            flexDirection=\"row\"\n                            alignItems=\"center\"\n                            _web={{\n                              \"data-elm-type\": \"variants-dd\",\n                              \"data-elm-id\": `variants-dd:${iconsetInfo.packageName}`,\n                            }}\n                            {...triggerProps}\n                          >\n                            <Text fontSize=\"14px\" bold color=\"secondary.500\">\n                              {currentVariant}\n                            </Text>\n\n                            <Icon as={StyledIcon}\n                              content={AppIconMap.regular[\"expand-more\"]}\n                              size={18}\n                              color=\"secondary.400\"\n                            />\n                          </Pressable>\n                        );\n                      }}\n                    >\n                      {iconsetInfo.variantNames.map((name) => (\n                        <Menu.Item\n                          minWidth=\"200px\"\n                          _web={{\n                            \"data-elm-type\": \"change-variant-btn\",\n                            \"data-elm-id\": `change-variant-btn:${iconsetInfo.packageName}-${name}`,\n                          }}\n                          isDisabled={name === currentVariant}\n                          onPress={() => setVariant(name)}\n                        >\n                          {name}\n                        </Menu.Item>\n                      ))}\n                    </Menu>\n                  </>\n                )}\n              </Header.Item>\n              <Header.Item rightSide>\n                <Link\n                  _web={{\n                    \"data-elm-type\": \"npm-btn\",\n                    \"data-elm-id\": `npm-btn:${iconsetInfo.packageName}`,\n                  }}\n                  href={`https://npmjs.com/package/${iconsetInfo.packageName}`}\n                >\n                  <StyledIcon\n                    content={BrandsIconMap.regular.npm}\n                    name=\"npm\"\n                    size={24}\n                    color=\"red\"\n                  />{\" \"}\n                </Link>\n                <IconButton\n                  onPress={onPackageNamePress}\n                  _web={{\n                    \"data-elm-type\": \"copy-package-btn\",\n                    \"data-elm-id\": `copy-package-btn:${iconsetInfo.packageName}`,\n                  }}\n                  icon={\n                    <StyledIcon\n                      content={AppIconMap.regular[\"content-copy\"]}\n                      name=\"content-copy\"\n                      fill=\"currentcolor\"\n                      size={24}\n                      color=\"black\"\n                    />\n                  }\n                />\n              </Header.Item>\n            </Header.Row>\n          </Header>\n          <Content padder>\n            {iconsetInfo && (\n              <>\n                {iconsetInfo.__loaded &&\n                  matchedIconNames &&\n                  matchedIconNames.length < 1 && (\n                    <Box\n                      height=\"40px\"\n                      style={{ flexBasis: \"auto\" }}\n                      mx={4}\n                      flex={1}\n                    >\n                      <Text bold fontSize=\"12px\">\n                        No matched icons\n                      </Text>\n                    </Box>\n                  )}\n                {matchedIconNames && matchedIconNames.length > 0 && (\n                  <Box\n                    height=\"40px\"\n                    style={{ flexBasis: \"auto\" }}\n                    mb={4}\n                    mx={4}\n                    flex={1}\n                  >\n                    <Text fontSize=\"12px\">\n                      Found {matchedIconNames.length} matched icons\n                    </Text>\n                    <Divider my={4} />\n                  </Box>\n                )}\n                <IconList\n                  maxCount={maxIconsShown}\n                  component={iconsetInfo.component}\n                  variant={currentVariant}\n                  searching={isSearchMode}\n                  size={iconSize}\n                  color={iconColor}\n                  allIconNames={matchedIconNames}\n                  allVariantNames={iconsetInfo.variantNames}\n                  map={iconsetInfo.map}\n                  onIconPress={onIconPress}\n                  numColumn={iconsColumns}\n                />\n\n                {Array.isArray(matchedIconNames) &&\n                  maxIconsShown < matchedIconNames.length && (\n                    <Box safeAreaBottom padding={8}>\n                      <Button\n                        onPress={onShowMore}\n                        _web={{\n                          \"data-elm-type\": \"showmore-btn\",\n                          \"data-elm-id\": `showmore-btn:${iconsetInfo.packageName}`,\n                        }}\n                      >\n                        Show more icons\n                      </Button>\n                    </Box>\n                  )}\n              </>\n            )}\n          </Content>\n        </Box>\n        <Modal isOpen={isSettingOpen} onClose={onSettingClose}>\n          <Modal.Content maxWidth=\"460px\">\n            <Modal.Header>Setting</Modal.Header>\n            <Modal.CloseButton />\n            <Modal.Body>\n              {hasVariants && !shouldVariantShowInHeader && (\n                <>\n                  <FormControl>\n                    <FormControl.Label>{`Variants`}</FormControl.Label>\n                    <Select\n                      _web={{\n                        \"data-elm-type\": \"change-variants-dd\",\n                        \"data-elm-id\": `change-variants-dd:${iconsetInfo.packageName}`,\n                      }}\n                      selectedValue={currentVariant}\n                      onValueChange={setVariant}\n                    >\n                      {Array.isArray(iconsetInfo.variantNames) &&\n                        iconsetInfo.variantNames.map((name) => (\n                          <Select.Item key={name} label={name} value={name} />\n                        ))}\n                    </Select>\n                  </FormControl>\n                  <Divider my={2} />\n                </>\n              )}\n              <FormControl>\n                <FormControl.Label>{`Size: ${iconSize}px`}</FormControl.Label>\n                <Slider\n                  minValue={12}\n                  maxValue={48}\n                  defaultValue={iconSize}\n                  onChangeEnd={setIconSize}\n                >\n                  <Slider.Track>\n                    <Slider.FilledTrack />\n                  </Slider.Track>\n                  <Slider.Thumb />\n                </Slider>\n              </FormControl>\n              <Divider my={2} />\n              <FormControl>\n                <FormControl.Label>{`Color:`}</FormControl.Label>\n\n                <ColorPicker value={iconColor} onValueChange={setIconColor} />\n              </FormControl>\n            </Modal.Body>\n          </Modal.Content>\n        </Modal>\n      </HStack>\n\n      {!isTablet && (\n        <Slide\n          in={isDrawerOpen}\n          placement=\"left\"\n          height=\"100%\"\n          bottom={0}\n          bg=\"white\"\n        >\n          <Box\n            width=\"80%\"\n            minWidth={300}\n            bottom={0}\n            height=\"100%\"\n            bg=\"white\"\n            borderRightColor=\"#ececec\"\n            borderRightWidth={1}\n            rounded=\"md\"\n          >\n            <SlideMenu\n              iconsets={iconsets}\n              currentIconsetIndex={currentIconsetIndex}\n              onChangeIconset={onChangeIconset}\n            />\n          </Box>\n        </Slide>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}