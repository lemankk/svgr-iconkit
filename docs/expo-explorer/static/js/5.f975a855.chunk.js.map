{"version":3,"sources":["src/config.js","src/components/IconList.js","src/components/Header.js","src/components/Content.js","src/components/ColorPicker.js","src/containers/SideMenu.js","src/containers/Home.js"],"names":["iconsets","packageName","name","resources","defaultVariant","IconContent","styled","Box","IconWrapper","Pressable","IconListWrapper","View","displayName","IconLabel","Text","IconList","maxCount","allVariantNames","color","size","variant","allIconNames","Iconset","component","children","onIconPress","numColumn","useToast","alignItems","columns","spacingY","spacingX","slice","map","icon","onPress","key","noOfLines","numberOfLines","HeaderWrapper","HeaderBody","HeaderRow","HeaderItem","leftSide","css","rightSide","Header","safeAreaTop","rest","Item","Row","Content","contentContainerStyle","padder","restProps","contentStyles","paddingTop","paddingBottom","ScrollView","style","flex","scrollIndicatorInsets","top","bottom","left","right","defaultColors","ColorPicker","value","colors","onValueChange","space","py","borderColor","borderWidth","borderRadius","backgroundColor","width","height","maxLength","onChangeText","text","SideMenu","currentIconsetIndex","onChangeIconset","p","justifyContent","href","as","AppIcon","safeAreaBottom","margin","item","index","accessibilityLabel","colorScheme","undefined","textAlign","title","Home","useDisclose","isDrawerOpen","isOpen","onDrawerOpen","onOpen","onDrawerClose","onClose","toast","isSettingOpen","onSettingOpen","onSettingClose","windowSize","Dimensions","get","useMediaQuery","minWidth","isTablet","useState","setIconsetIndex","keyword","setKeyword","currentVariant","setVariant","useCallback","newIndex","setMaxIconsShown","iconSize","setIconSize","iconColor","setIconColor","setUpdateTime","iconsetInfo","iconNames","isSearchMode","length","maxIconsShown","matchedIconNames","filter","toLowerCase","includes","useEffect","__loaded","a","async","Icon","Date","now","run","iconsColumns","Math","floor","borderRightColor","borderRightWidth","content","AppIconMap","regular","menu","placeholder","settings","bold","fontSize","BrandsIconMap","npm","Clipboard","setString","show","duration","variantNames","Array","isArray","padding","mx","Label","selectedValue","label","minValue","maxValue","defaultValue","onChangeEnd","Track","FilledTrack","Thumb","in","placement","bg","rounded"],"mappings":"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","file":"static/js/5.f975a855.chunk.js","sourcesContent":["\nexport const iconsets = [\n  {\n    packageName: \"@svgr-iconkit/fontawesome5\",\n    name: \"FontAwesome5\",\n    resources: () => import('./iconset/FontAwesome5'),\n  },\n  {\n    packageName: \"@svgr-iconkit/fontawesome5-brands\",\n    name: \"FontAwesome5 - Brands\",\n    resources: () => import('./iconset/FontAwesome5-brands'),\n  },\n  {\n    packageName: \"@svgr-iconkit/fluentui-system\",\n    name: \"FluentUISystem\",\n    resources: () => import('./iconset/FluentUISystem'),\n  },\n  {\n    packageName: \"@svgr-iconkit/feather\",\n    name: \"Feather\",\n    resources: () => import('./iconset/Feather'),\n  },\n  {\n    packageName: \"@svgr-iconkit/foundation\",\n    name: \"Foundation\",\n    resources: () => import('./iconset/FontAwesome5-brands'),\n  },\n  {\n    packageName: \"@svgr-iconkit/ant-design\",\n    name: \"Ant Design Icons\",\n    defaultVariant: 'filled',\n    resources: () => import('./iconset/AntDesignIcon'),\n  },\n  {\n    packageName: \"@svgr-iconkit/entypo\",\n    name: \"Entypo\",\n    resources: () => import('./iconset/Entypo'),\n  },\n  {\n    packageName: \"@svgr-iconkit/ionicons\",\n    name: \"Ionicons\",\n    resources: () => import('./iconset/Ionicons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/octicons\",\n    name: \"Octicons\",\n    resources: () => import('./iconset/Octicons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/material-community\",\n    name: \"Material Community\",\n    resources: () => import('./iconset/MaterialCommunity'),\n  },\n  {\n    packageName: \"@svgr-iconkit/material-design\",\n    name: \"Material Design Icons\",\n    resources: () => import('./iconset/MaterialDesignIcons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/bootstrap\",\n    name: \"Bootstrap Icons\",\n    resources: () => import('./iconset/BootstrapIcon'),\n  },\n  {\n    packageName: \"@svgr-iconkit/css-gg\",\n    name: \"css.gg\",\n    resources: () => import('./iconset/css.gg'),\n  },\n  {\n    packageName: \"@svgr-iconkit/heroicons\",\n    name: \"Heroicons\",\n    defaultVariant: 'solid',\n    resources: () => import('./iconset/Heroicons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/simple-icons\",\n    name: \"Simple Icons\",\n    resources: () => import('./iconset/SimpleIcons'),\n  },\n  {\n    packageName: \"@svgr-iconkit/typicons\",\n    name: \"Typicons Icons\",\n    resources: () => import('./iconset/Typicons'),\n  }\n];\n","import React from \"react\";\nimport { ClipboardStatic } from \"react-native\";\nimport { Box, SimpleGrid, Text, Icon, Pressable, useToast } from \"native-base\";\nimport styled, { css } from \"styled-components/native\";\nimport Clipboard from \"expo-clipboard\";\n\nconst IconContent = styled(Box)`\n  border-bottom-width: 1px;\n  border-bottom-color: #ccc;\n  align-items: center;\n  justify-content: center;\n  width: 100px;\n  height: 70px;\n`;\nconst IconWrapper = styled(Pressable)`\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  width: 100px;\n  height: 100px;\n\n`;\nconst IconListWrapper = styled.View`\nposition: relative;\nwidth: 100%;\n`;\nIconListWrapper.displayName = 'IconListWrapper';\n\nconst IconLabel = styled(Text)`\n  align-items: center;\n  justify-content: center;\n  padding: 2px;\n  width: 100px;\n  height: 30px;\n  font-size: 9px;\n  text-align: center;\n`;\n\nexport default function IconList({\n  maxCount,\n  allVariantNames = [],\n  color = \"#ccc\",\n  size = 24,\n  variant = \"regular\",\n  allIconNames = [],\n  component: Iconset,\n  children,\n  onIconPress,\n  numColumn = 3,\n}) {\n  \n  const toast = useToast();\n  \n  if (!Iconset) {\n    return null;\n  }\n\n  return (\n    <>\n    <IconListWrapper color={color} size={size}>\n      <SimpleGrid\n        alignItems=\"center\"\n        columns={numColumn}\n        spacingY={4}\n        spacingX={4}\n      >\n        {allIconNames &&\n          allIconNames.slice(0, maxCount).map((icon) => (\n            <IconWrapper onPress={() => onIconPress && onIconPress(icon)} key={icon}>\n              <IconContent>\n                <Iconset variant={variant} name={icon} size={size} color={color} />\n              </IconContent>\n              <IconLabel noOfLines={3} numberOfLines={3}>\n                {icon}\n              </IconLabel>\n            </IconWrapper>\n          ))}\n      </SimpleGrid>\n          </IconListWrapper>\n      {children}\n    </>\n  );\n}\n","import React from \"react\";\nimport { Dimensions } from \"react-native\";\nimport { Box, SimpleGrid, Text } from \"native-base\";\nimport styled, { css } from \"styled-components/native\";\n\nconst HeaderWrapper = styled(Box)`\n  position: relative;\n`;\n\nconst HeaderBody = styled(Box)`\n  box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.2);\n  background-color: #fff;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  background-color: #fff;\n  position: relative;\n`;\nHeaderBody.displayName = 'HeaderBody';\n\nconst HeaderRow = styled(Box)`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  min-height: 48px;\n  padding-left: 8px;\n  padding-right: 8px;\n  position: relative;\n`;\nHeaderRow.displayName = 'HeaderRow';\n\nconst HeaderItem = styled(Box)`\n  min-height: 40px;\n  min-width: 40px;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  margin-left: 6px;\n  margin-right: 6px;\n  ${({ leftSide = false }) =>\n    !!leftSide &&\n    css`\n      justify-content: flex-start;\n    `}\n  ${({ rightSide = false }) =>\n    !!rightSide &&\n    css`\n      justify-content: flex-end;\n    `}\n`;\nHeaderItem.displayName = 'HeaderItem';\n\nfunction Header({ safeAreaTop, children, ...rest }) {\n  return (\n    <HeaderWrapper {...rest}>\n      <HeaderBody safeAreaTop={safeAreaTop}>{children}</HeaderBody>\n    </HeaderWrapper>\n  );\n}\n\nHeader.Item = HeaderItem;\nHeader.Row = HeaderRow;\n\nexport const Item = HeaderItem;\n\nexport default Header;\n","import React from \"react\";\nimport { Box } from \"native-base\";\nimport { ScrollView } from \"react-native\";\n\nfunction Content({\n  children,\n  contentContainerStyle,\n  padder = false,\n  ...restProps\n}) {\n  const contentStyles = {};\n  if (padder) {\n    contentStyles.paddingTop = 20;\n    contentStyles.paddingBottom = 20;\n  }\n  return (\n    <ScrollView\n      style={{flex: 1}}\n      scrollIndicatorInsets={{ top: 4, bottom: 4, left: 4, right: 4 }}\n      contentContainerStyle={[contentStyles, contentContainerStyle]}\n      {...restProps}\n    >\n      {children}\n    </ScrollView>\n  );\n}\n\nexport default Content;\n","import React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { HStack, Input, Pressable } from \"native-base\";\n\nconst defaultColors = [\"#FF6900\", \"#FCB900\", \"#7BDCB5\", \"#00D084\", \"#8ED1FC\", \"#0693E3\", \"#ABB8C3\", \"#EB144C\", \"#F78DA7\", \"#9900EF\"];\nexport default function ColorPicker({\n  value = \"#000\",\n  colors = defaultColors,\n  onValueChange,\n}) {\n  return (\n    <HStack space={2} py={2} alignItems=\"center\">\n      {colors.map((color) => (\n        <Pressable\n          borderColor={value === color ? \"#333\" : \"transparent\"}\n          borderWidth={2}\n          borderRadius={5}\n          key={color}\n          backgroundColor={color}\n          width={38}\n          height={38}\n          onPress={() => onValueChange && onValueChange(color)}\n        />\n      ))}\n      <Input size=\"sm\" maxLength={9} value={value} onChangeText={(text) => onValueChange && onValueChange(text)} />\n    </HStack>\n  );\n}\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport { Platform, ScrollView, Dimensions } from \"react-native\";\nimport {\n  Button,\n  Box,\n  Container,\n  IconButton,\n  SimpleGrid,\n  Text,\n  Tabs,\n  Input,\n  Icon,\n  Select,\n  Slide,\n  Divider,\n  useDisclose,\n  Modal,\n  VStack,\n  HStack,\n  FormControl,\n  Slider,\n  Heading,\n  Link,\n  useToast,\n  useMediaQuery,\n} from \"native-base\";\nimport AppIcon from \"@svgr-iconkit/material-community\";\nimport BrandsIcon from \"@svgr-iconkit/fontawesome5-brands\";\n\nexport default function SideMenu({\n  iconsets = [],\n  currentIconsetIndex = 0,\n  onChangeIconset,\n}) {\n  return (\n    <>\n      <Box safeAreaTop backgroundColor=\"#222\" p={3} paddingBottom={5}>\n        <Heading alignItems=\"flex-start\" justifyContent=\"center\" color=\"#fff\">\n          svgr-iconkit{\" \"}\n          <Link href=\"https://svgr-iconkit.dev\">\n            <Icon as={AppIcon} name=\"link\" size={20} color=\"#ccc\" />{\" \"}\n          </Link>\n        </Heading>\n        <Heading color=\"#fff\" size=\"md\">\n          explorer for expo\n        </Heading>\n      </Box>\n      <Box as={ScrollView} safeAreaBottom>\n        <Heading margin={5} size=\"sm\">\n          Iconsets\n        </Heading>\n        <Box p={1}>\n          {iconsets.map((item, index) => (\n            <>\n              <Button\n                key={item.packageName}\n                accessibilityLabel={item.name}\n                colorScheme={\n                  currentIconsetIndex === index ? \"secondary\" : undefined\n                }\n                variant=\"ghost\"\n                textAlign=\"left\"\n                justifyContent=\"flex-start\"\n                onPress={() => {\n                  onChangeIconset(index);\n                }}\n                title={item.name}\n              >\n                {item.name}\n              </Button>\n            </>\n          ))}\n        </Box>\n      </Box>\n    </>\n  );\n}\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport { Platform, ScrollView, Dimensions } from \"react-native\";\nimport {\n  Button,\n  Box,\n  Container,\n  IconButton,\n  SimpleGrid,\n  Text,\n  Tabs,\n  Input,\n  Icon,\n  Select,\n  Slide,\n  Divider,\n  useDisclose,\n  Modal,\n  VStack,\n  HStack,\n  FormControl,\n  Slider,\n  Heading,\n  Link,\n  useToast,\n  useMediaQuery,\n} from \"native-base\";\nimport Clipboard from \"expo-clipboard\";\nimport { Icon as SVGIcon } from \"@svgr-iconkit/core\";\nimport { map as AppIconMap } from \"@svgr-iconkit/material-design\";\nimport { map as BrandsIconMap } from \"@svgr-iconkit/fontawesome5-brands\";\n\nimport { iconsets } from \"../config\";\nimport IconList from \"../components/IconList\";\nimport Header from \"../components/Header\";\nimport Content from \"../components/Content\";\nimport ColorPicker from \"../components/ColorPicker\";\nimport SlideMenu from \"./SideMenu\";\n\nconst defaultMaxShownNum = 60;\n\nexport default function Home() {\n  const {\n    isOpen: isDrawerOpen,\n    onOpen: onDrawerOpen,\n    onClose: onDrawerClose,\n  } = useDisclose();\n  const toast = useToast();\n\n  const {\n    isOpen: isSettingOpen,\n    onOpen: onSettingOpen,\n    onClose: onSettingClose,\n  } = useDisclose();\n  const windowSize = Dimensions.get(\"window\");\n\n  const [isTablet] = useMediaQuery({ minWidth: 768 });\n\n  const [currentIconsetIndex, setIconsetIndex] = useState(0);\n  const [keyword, setKeyword] = useState(\"\");\n  const [currentVariant, setVariant] = useState(\"regular\");\n  const onChangeIconset = useCallback((newIndex) => {\n    onDrawerClose();\n    setIconsetIndex(newIndex);\n    const { defaultVariant = \"regular\" } = iconsets[newIndex];\n    setVariant(defaultVariant);\n    setMaxIconsShown(defaultMaxShownNum);\n  }, []);\n  const [iconSize, setIconSize] = useState(24);\n  const [iconColor, setIconColor] = useState(\"#0693E3\");\n  const [isColorPickerOpen, setColorPickerOpen] = useState(false);\n  const [isUsingStyledComponent, setUsingStyledComponent] = useState(true);\n\n  const [, setUpdateTime] = useState(0);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const iconsetInfo = iconsets[currentIconsetIndex] || {};\n\n  const { iconNames = [] } = iconsetInfo;\n\n  const isSearchMode =\n    !!keyword && typeof keyword === \"string\" && keyword.length > 0;\n  const [maxIconsShown, setMaxIconsShown] = useState(defaultMaxShownNum);\n\n  const matchedIconNames = !isSearchMode\n    ? iconNames\n    : iconNames.filter((name) =>\n        name.toLowerCase().includes(keyword.toLowerCase())\n      );\n\n  useEffect(() => {\n    if (\n      !iconsetInfo.resources ||\n      typeof iconsetInfo.resources !== \"function\" ||\n      iconsetInfo.__loaded\n    ) {\n      return;\n    }\n    async function run() {\n      const { Icon, ...restProps } = await iconsetInfo.resources();\n\n      iconsets[currentIconsetIndex] = {\n        ...iconsetInfo,\n        component: Icon,\n        __loaded: true,\n        ...restProps,\n      };\n      setUpdateTime(Date.now());\n    }\n    run();\n  }, [iconsetInfo, currentIconsetIndex]);\n\n  const onIconPress = (icon) => {\n    Clipboard.setString(icon);\n    toast.show({\n      duration: 6000,\n      title: `Icon name ${icon} copied in clipboard!`,\n    });\n  };\n  const onPackageNamePress = () => {\n    Clipboard.setString(iconsetInfo.packageName);\n    toast.show({\n      duration: 6000,\n      title: `Package name ${iconsetInfo.packageName} copied in clipboard!`,\n    });\n  };\n\n  const iconsColumns = Math.floor(\n    (windowSize.width - 20 - (isTablet ? 300 : 0)) / 120\n  );\n\n  const onShowMore = () => setMaxIconsShown(maxIconsShown + 60);\n\n  return (\n    <>\n      <HStack>\n        {isTablet && (\n          <Box\n            width={300}\n            height={windowSize.height}\n            backgroundColor=\"white\"\n            borderRightColor=\"#ececec\"\n            borderRightWidth={1}\n          >\n            <SlideMenu\n              iconsets={iconsets}\n              currentIconsetIndex={currentIconsetIndex}\n              onChangeIconset={onChangeIconset}\n            />\n          </Box>\n        )}\n        <Box flex={1} height={windowSize.height}>\n          <Header safeAreaTop>\n            <Header.Row>\n              {!isTablet && (\n                <Header.Item>\n                  <IconButton\n                    onPress={onDrawerOpen}\n                    icon={\n                      <SVGIcon content={AppIconMap.regular.menu} size={24} color=\"black\" />\n                    }\n                  />\n                </Header.Item>\n              )}\n              <Header.Item flex={1}>\n                <Input\n                  flex={1}\n                  size=\"xs\"\n                  placeholder=\"Filter by keywords\"\n                  value={keyword}\n                  onChangeText={setKeyword}\n                />\n              </Header.Item>\n              <Header.Item>\n                <IconButton\n                  onPress={onSettingOpen}\n                  icon={\n                    <SVGIcon content={AppIconMap.regular.settings} size={24} color=\"black\" />\n                  }\n                />\n              </Header.Item>\n            </Header.Row>\n            <Header.Row>\n              <Header.Item leftSide>\n                <Text bold fontSize=\"14px\">\n                  {iconsetInfo.packageName}\n                </Text>\n              </Header.Item>\n              <Header.Item rightSide>\n                <Link\n                  href={`https://npmjs.com/package/${iconsetInfo.packageName}`}\n                >\n                  <SVGIcon content={BrandsIconMap.regular.npm} name=\"npm\" size={26} color=\"red\" />{\" \"}\n                </Link>\n                <IconButton\n                  onPress={onPackageNamePress}\n                  icon={\n                    <SVGIcon\n                      content={AppIconMap.regular['content-copy']}\n                      name=\"content-copy\"\n                      size={18}\n                      color=\"black\"\n                    />\n                  }\n                />\n              </Header.Item>\n            </Header.Row>\n          </Header>\n          <Content padder>\n            {iconsetInfo && (\n              <>\n                <IconList\n                  maxCount={maxIconsShown}\n                  component={iconsetInfo.component}\n                  variant={currentVariant}\n                  size={iconSize}\n                  color={iconColor}\n                  allIconNames={matchedIconNames}\n                  allVariantNames={iconsetInfo.variantNames}\n                  onIconPress={onIconPress}\n                  numColumn={iconsColumns}\n                />\n\n                {Array.isArray(matchedIconNames) &&\n                  maxIconsShown < matchedIconNames.length && (\n                    <Box safeAreaBottom padding={8}>\n                      <Button onPress={onShowMore}>Show more icons</Button>\n                    </Box>\n                  )}\n              </>\n            )}\n          </Content>\n        </Box>\n        <Modal isOpen={isSettingOpen} onClose={onSettingClose}>\n          <VStack\n            p={4}\n            space={4}\n            mx={10}\n            width=\"80%\"\n            backgroundColor=\"#fff\"\n            borderRadius={5}\n          >\n            <FormControl>\n              <FormControl.Label>{`Variants`}</FormControl.Label>\n              <Select\n                safeAreaBottom\n                selectedValue={currentVariant}\n                onValueChange={setVariant}\n              >\n                {Array.isArray(iconsetInfo.variantNames) &&\n                  iconsetInfo.variantNames.map((name) => (\n                    <Select.Item key={name} label={name} value={name} />\n                  ))}\n              </Select>\n            </FormControl>\n            <Divider />\n            <FormControl>\n              <FormControl.Label>{`Size: ${iconSize}px`}</FormControl.Label>\n              <Slider\n                minValue={12}\n                maxValue={48}\n                defaultValue={iconSize}\n                onChangeEnd={setIconSize}\n              >\n                <Slider.Track>\n                  <Slider.FilledTrack />\n                </Slider.Track>\n                <Slider.Thumb />\n              </Slider>\n            </FormControl>\n            <Divider />\n            <FormControl>\n              <FormControl.Label>{`Color:`}</FormControl.Label>\n\n              <ColorPicker value={iconColor} onValueChange={setIconColor} />\n            </FormControl>\n          </VStack>\n        </Modal>\n      </HStack>\n\n      {!isTablet && (\n        <Slide in={isDrawerOpen} placement=\"left\"  height=\"100%\" bottom={0} bg=\"white\">\n          <Box width=\"80%\" minWidth={300} bottom={0} height=\"100%\" bg=\"white\"\n            borderRightColor=\"#ececec\"\n            borderRightWidth={1}\n             rounded=\"md\">\n            <SlideMenu\n              iconsets={iconsets}\n              currentIconsetIndex={currentIconsetIndex}\n              onChangeIconset={onChangeIconset}\n            />\n          </Box>\n        </Slide>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}