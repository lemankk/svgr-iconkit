{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"minimumValue\", \"maximumValue\", \"minimumTrackTintColor\", \"maximumTrackTintColor\", \"thumbTintColor\", \"styles\", \"style\", \"trackStyle\", \"trackImage\", \"thumbStyle\", \"vertical\", \"onValueChange\", \"thumbTouchSize\", \"animationType\", \"animateTransitions\"];\nvar _jsxFileName = \"/Users/leman/local-works/niceforum/svgr-iconkit/examples/expo-explorer/node_modules/react-native-smooth-slider/src/Slider.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport PropTypes from 'prop-types';\nvar TRACK_SIZE = 4;\nvar THUMB_SIZE = 20;\nvar DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0\n  }\n};\n\nvar Slider = function (_PureComponent) {\n  _inherits(Slider, _PureComponent);\n\n  var _super = _createSuper(Slider);\n\n  function Slider(_props) {\n    var _this;\n\n    _classCallCheck(this, Slider);\n\n    _this = _super.call(this, _props);\n\n    _this._onHandlerStateChange = function (event) {\n      if (event.nativeEvent.state === State.BEGAN) {\n        var x = event.nativeEvent.x;\n\n        _this._handlePanResponderGrant(x);\n      } else if (event.nativeEvent.oldState === State.ACTIVE) {\n        var translationX = _this.props.vertical ? -event.nativeEvent.translationY : event.nativeEvent.translationX;\n\n        _this._handlePanResponderEnd(translationX);\n      } else if (event.nativeEvent.oldState === State.BEGAN && (event.nativeEvent.state === State.FAILED || event.nativeEvent.state === State.END)) {\n        _this._handlePanResponderEnd(0);\n      }\n    };\n\n    _this.state = {\n      containerSize: {\n        width: 0,\n        height: 0\n      },\n      trackSize: {\n        width: 0,\n        height: 0\n      },\n      thumbSize: {\n        width: 0,\n        height: 0\n      },\n      allMeasured: false,\n      value: new Animated.Value(_this.props.value)\n    };\n\n    _this.setValue = function (value) {\n      if (!_this.isMoving && _this.state.containerSize.width) {\n        _this._translateX.setOffset(_this.props.vertical ? _this.state.containerSize.width - _this._getThumbCenter(value) : _this._getThumbCenter(value));\n\n        _this._translateX.setValue(0);\n      }\n\n      if (_this.props.animateTransitions) {\n        _this._setCurrentValueAnimated(value);\n      } else {\n        _this._setCurrentValue(value);\n      }\n    };\n\n    _this._handlePanResponderGrant = function (x) {\n      _this._lastOffsetX = x - _this._getTouchOverflowSize().width / 2;\n\n      if (_this._lastOffsetX < 0) {\n        _this._lastOffsetX = 0;\n      } else if (_this._lastOffsetX > _this.state.containerSize.width) {\n        _this._lastOffsetX = _this.state.containerSize.width;\n      }\n\n      _this._translateX.setOffset(_this.props.vertical ? _this.state.containerSize.width - _this._lastOffsetX : _this._lastOffsetX);\n\n      _this._translateX.setValue(0);\n\n      _this._fireChangeEvent('onSlidingStart');\n    };\n\n    _this._handlePanResponderMove = function (e) {\n      var translationX = e.nativeEvent.translationX;\n      var translationY = e.nativeEvent.translationY;\n      var velocityX = e.nativeEvent.velocityX;\n      var velocityY = e.nativeEvent.velocityY;\n\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.isMoving = true;\n      var translation = _this.props.vertical ? -translationY : translationX;\n      var offset = _this._lastOffsetX + translation;\n\n      if (offset < 0) {\n        offset = 0;\n      } else if (offset > _this.state.containerSize.width) {\n        offset = _this.state.containerSize.width;\n      }\n\n      var newValue = _this._getValue(offset);\n\n      if (_this._getCurrentValue() !== newValue) {\n        _this._setCurrentValue(newValue);\n\n        var velocity = Math.abs(_this.props.vertical ? velocityY : velocityX);\n\n        if (velocity < _this.props.moveVelocityThreshold) {\n          _this._fireChangeEvent('onValueChange');\n        }\n      }\n    };\n\n    _this._handlePanResponderEnd = function (translationX) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.isMoving = false;\n      _this._lastOffsetX += translationX;\n\n      if (_this._lastOffsetX < 0) {\n        _this._lastOffsetX = 0;\n      } else if (_this._lastOffsetX > _this.state.containerSize.width) {\n        _this._lastOffsetX = _this.state.containerSize.width;\n      }\n\n      var value = _this._getValue(_this._lastOffsetX);\n\n      var offset = _this._getThumbCenter(value);\n\n      _this._translateX.setOffset(_this.props.vertical ? _this.state.containerSize.width - offset : offset);\n\n      _this._translateX.setValue(0);\n\n      _this._setCurrentValue(value);\n\n      _this._fireChangeEvent('onSlidingComplete');\n    };\n\n    _this._measureContainer = function (x) {\n      _this._handleMeasure('containerSize', x);\n    };\n\n    _this._measureTrack = function (x) {\n      _this._handleMeasure('trackSize', x);\n    };\n\n    _this._measureThumb = function (x) {\n      _this._handleMeasure('thumbSize', x);\n    };\n\n    _this._handleMeasure = function (name, x) {\n      var _x$nativeEvent$layout = x.nativeEvent.layout,\n          width = _x$nativeEvent$layout.width,\n          height = _x$nativeEvent$layout.height;\n      var size = {\n        width: width,\n        height: height\n      };\n      var storeName = \"_\" + name;\n      var currentSize = _this[storeName];\n\n      if (currentSize && width === currentSize.width && height === currentSize.height) {\n        return;\n      }\n\n      _this[storeName] = size;\n\n      if (_this._containerSize && _this._trackSize && _this._thumbSize) {\n        _this.setState({\n          containerSize: _this._containerSize,\n          trackSize: _this._trackSize,\n          thumbSize: _this._thumbSize,\n          allMeasured: true\n        }, function () {\n          var offset = _this._getThumbCenter(_this.props.value);\n\n          _this._translateX.setOffset(_this.props.vertical ? _this.state.containerSize.width - offset : offset);\n\n          _this._translateX.setValue(0);\n\n          _this._lastOffsetX = offset;\n        });\n      }\n    };\n\n    _this._getRatio = function (value) {\n      return (value - _this.props.minimumValue) / (_this.props.maximumValue - _this.props.minimumValue);\n    };\n\n    _this._getThumbCenter = function (value) {\n      var ratio = _this._getRatio(value);\n\n      return ratio * _this.state.containerSize.width;\n    };\n\n    _this._getValue = function (offset) {\n      var length = _this.state.containerSize.width;\n      var thumbCenter = offset;\n      var ratio = thumbCenter / length;\n\n      if (_this.props.step) {\n        return Math.max(_this.props.minimumValue, Math.min(_this.props.maximumValue, _this.props.minimumValue + Math.round(ratio * (_this.props.maximumValue - _this.props.minimumValue) / _this.props.step) * _this.props.step));\n      } else {\n        return Math.max(_this.props.minimumValue, Math.min(_this.props.maximumValue, ratio * (_this.props.maximumValue - _this.props.minimumValue) + _this.props.minimumValue));\n      }\n    };\n\n    _this._getCurrentValue = function () {\n      return _this.state.value.__getValue();\n    };\n\n    _this._setCurrentValue = function (value) {\n      _this.state.value.setValue(value);\n    };\n\n    _this._setCurrentValueAnimated = function (value) {\n      var animationType = _this.props.animationType;\n\n      var animationConfig = _extends({}, DEFAULT_ANIMATION_CONFIGS[animationType], _this.props.animationConfig, {\n        toValue: value\n      });\n\n      Animated[animationType](_this.state.value, animationConfig).start();\n    };\n\n    _this._fireChangeEvent = function (event) {\n      if (_this.props[event]) {\n        _this.props[event](_this._getCurrentValue());\n      }\n    };\n\n    _this._getTouchOverflowSize = function () {\n      var state = _this.state;\n      var props = _this.props;\n      var size = {};\n\n      if (state.allMeasured === true) {\n        size.width = Math.max(0, props.thumbTouchSize.width - state.thumbSize.width);\n        size.height = Math.max(0, props.thumbTouchSize.height - state.containerSize.height);\n      }\n\n      return size;\n    };\n\n    _this._getTouchOverflowStyle = function () {\n      var _this$_getTouchOverfl = _this._getTouchOverflowSize(),\n          width = _this$_getTouchOverfl.width,\n          height = _this$_getTouchOverfl.height;\n\n      var touchOverflowStyle = {};\n\n      if (width !== undefined && height !== undefined) {\n        var verticalMargin = -height / 2;\n        touchOverflowStyle.marginTop = verticalMargin;\n        touchOverflowStyle.marginBottom = verticalMargin;\n        var horizontalMargin = -width / 2;\n        touchOverflowStyle.marginLeft = horizontalMargin;\n        touchOverflowStyle.marginRight = horizontalMargin;\n      }\n\n      return touchOverflowStyle;\n    };\n\n    _this._renderThumbImage = function () {\n      var _this$props = _this.props,\n          thumbImage = _this$props.thumbImage,\n          thumbStyle = _this$props.thumbStyle;\n\n      if (!thumbImage) {\n        return;\n      }\n\n      var imageStyle = {\n        width: defaultStyles.thumb.width,\n        height: defaultStyles.thumb.height\n      };\n\n      if (thumbStyle) {\n        imageStyle.width = thumbStyle.width || imageStyle.width;\n        imageStyle.height = thumbStyle.height || imageStyle.height;\n      }\n\n      return React.createElement(Image, {\n        source: thumbImage,\n        style: imageStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 16\n        }\n      });\n    };\n\n    _this.isMoving = false;\n    _this._translateX = new Animated.Value(0);\n    _this._lastOffsetX = 0;\n    _this._onGestureEvent = Animated.event([{\n      nativeEvent: _props.vertical ? {\n        translationY: _this._translateX\n      } : {\n        translationX: _this._translateX\n      }\n    }], {\n      useNativeDriver: _props.useNativeDriver,\n      listener: _this._handlePanResponderMove\n    });\n    return _this;\n  }\n\n  _createClass(Slider, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.value !== prevProps.value) {\n        this.setValue(this.props.value);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          minimumValue = _this$props2.minimumValue,\n          maximumValue = _this$props2.maximumValue,\n          minimumTrackTintColor = _this$props2.minimumTrackTintColor,\n          maximumTrackTintColor = _this$props2.maximumTrackTintColor,\n          thumbTintColor = _this$props2.thumbTintColor,\n          styles = _this$props2.styles,\n          style = _this$props2.style,\n          trackStyle = _this$props2.trackStyle,\n          trackImage = _this$props2.trackImage,\n          thumbStyle = _this$props2.thumbStyle,\n          vertical = _this$props2.vertical,\n          onValueChange = _this$props2.onValueChange,\n          thumbTouchSize = _this$props2.thumbTouchSize,\n          animationType = _this$props2.animationType,\n          animateTransitions = _this$props2.animateTransitions,\n          other = _objectWithoutProperties(_this$props2, _excluded);\n\n      var _this$state = this.state,\n          value = _this$state.value,\n          containerSize = _this$state.containerSize,\n          thumbSize = _this$state.thumbSize,\n          allMeasured = _this$state.allMeasured;\n      var mainStyles = styles || defaultStyles;\n      var thumbCenter = value.interpolate({\n        inputRange: [minimumValue, maximumValue],\n        outputRange: [0, containerSize.width - thumbSize.width / 2]\n      });\n      var valueVisibleStyle = {};\n\n      if (!allMeasured) {\n        valueVisibleStyle.opacity = 0;\n      }\n\n      var minimumTrackStyle = _objectSpread({\n        position: 'absolute',\n        width: Animated.add(thumbCenter, thumbSize.width / 2),\n        backgroundColor: minimumTrackTintColor\n      }, valueVisibleStyle);\n\n      var touchOverflowStyle = this._getTouchOverflowStyle();\n\n      var translate = this._translateX.interpolate({\n        inputRange: [0, containerSize.width || 200],\n        outputRange: [0, containerSize.width || 200],\n        extrapolate: 'clamp'\n      });\n\n      var transformStyle = {};\n\n      if (vertical) {\n        transformStyle.transform = [{\n          rotate: '-90deg'\n        }];\n        translate = Animated.multiply(Animated.add(translate, -containerSize.width), -1);\n      }\n\n      var thumbMarginLeftStyle = {\n        marginLeft: -thumbSize.width / 2\n      };\n      return React.createElement(View, _extends({}, other, {\n        style: [mainStyles.container, style, transformStyle],\n        onLayout: this._measureContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }\n      }), React.createElement(View, {\n        style: [{\n          backgroundColor: maximumTrackTintColor\n        }, mainStyles.track, trackStyle],\n        renderToHardwareTextureAndroid: true,\n        onLayout: this._measureTrack,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 17\n        }\n      }, trackImage ? React.createElement(Image, {\n        style: trackStyle,\n        source: trackImage,\n        resizeMode: \"stretch\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 35\n        }\n      }) : React.createElement(Animated.View, {\n        renderToHardwareTextureAndroid: true,\n        style: [mainStyles.track, trackStyle, minimumTrackStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 23\n        }\n      })), React.createElement(Animated.View, {\n        onLayout: this._measureThumb,\n        renderToHardwareTextureAndroid: true,\n        style: [{\n          backgroundColor: thumbTintColor\n        }, mainStyles.thumb, thumbStyle, thumbMarginLeftStyle, _objectSpread({\n          transform: [{\n            translateX: translate\n          }, {\n            translateY: 0\n          }]\n        }, valueVisibleStyle)],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 17\n        }\n      }, this._renderThumbImage()), React.createElement(PanGestureHandler, {\n        onGestureEvent: this.props.disabled ? undefined : this._onGestureEvent,\n        onHandlerStateChange: this.props.disabled ? undefined : this._onHandlerStateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 17\n        }\n      }, React.createElement(Animated.View, {\n        renderToHardwareTextureAndroid: true,\n        style: [defaultStyles.touchArea, touchOverflowStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return Slider;\n}(PureComponent);\n\nSlider.propTypes = {\n  value: PropTypes.number,\n  disabled: PropTypes.bool,\n  minimumValue: PropTypes.number,\n  maximumValue: PropTypes.number,\n  step: PropTypes.number,\n  minimumTrackTintColor: PropTypes.string,\n  maximumTrackTintColor: PropTypes.string,\n  thumbTintColor: PropTypes.string,\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number\n  }),\n  moveVelocityThreshold: PropTypes.number,\n  onValueChange: PropTypes.func,\n  onSlidingStart: PropTypes.func,\n  onSlidingComplete: PropTypes.func,\n  style: ViewPropTypes.style,\n  trackStyle: ViewPropTypes.style,\n  trackImage: Image.propTypes.source,\n  thumbStyle: ViewPropTypes.style,\n  thumbImage: Image.propTypes.source,\n  vertical: PropTypes.bool,\n  useNativeDriver: PropTypes.bool,\n  animateTransitions: PropTypes.bool,\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n  animationConfig: PropTypes.object\n};\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  thumbTintColor: '#343434',\n  thumbTouchSize: {\n    width: 40,\n    height: 40\n  },\n  vertical: false,\n  moveVelocityThreshold: 2000,\n  useNativeDriver: false,\n  animationType: 'timing'\n};\nexport { Slider as default };\nvar defaultStyles = StyleSheet.create({\n  container: {\n    height: 40,\n    justifyContent: 'center'\n  },\n  track: {\n    height: TRACK_SIZE,\n    borderRadius: TRACK_SIZE / 2\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n});","map":{"version":3,"sources":["/Users/leman/local-works/niceforum/svgr-iconkit/examples/expo-explorer/node_modules/react-native-smooth-slider/src/Slider.js"],"names":["React","PureComponent","ViewPropTypes","PanGestureHandler","State","PropTypes","TRACK_SIZE","THUMB_SIZE","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","Easing","inOut","ease","delay","Slider","props","_onHandlerStateChange","event","nativeEvent","state","BEGAN","x","_handlePanResponderGrant","oldState","ACTIVE","translationX","vertical","translationY","_handlePanResponderEnd","FAILED","END","containerSize","width","height","trackSize","thumbSize","allMeasured","value","Animated","Value","setValue","isMoving","_translateX","setOffset","_getThumbCenter","animateTransitions","_setCurrentValueAnimated","_setCurrentValue","_lastOffsetX","_getTouchOverflowSize","_fireChangeEvent","_handlePanResponderMove","e","velocityX","velocityY","disabled","translation","offset","newValue","_getValue","_getCurrentValue","velocity","Math","abs","moveVelocityThreshold","_measureContainer","_handleMeasure","_measureTrack","_measureThumb","name","layout","size","storeName","currentSize","_containerSize","_trackSize","_thumbSize","setState","_getRatio","minimumValue","maximumValue","ratio","length","thumbCenter","step","max","min","round","__getValue","animationType","animationConfig","toValue","start","thumbTouchSize","_getTouchOverflowStyle","touchOverflowStyle","undefined","verticalMargin","marginTop","marginBottom","horizontalMargin","marginLeft","marginRight","_renderThumbImage","thumbImage","thumbStyle","imageStyle","defaultStyles","thumb","_onGestureEvent","useNativeDriver","listener","prevProps","prevState","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","styles","style","trackStyle","trackImage","onValueChange","other","mainStyles","interpolate","inputRange","outputRange","valueVisibleStyle","opacity","minimumTrackStyle","position","add","backgroundColor","translate","extrapolate","transformStyle","transform","rotate","multiply","thumbMarginLeftStyle","container","track","translateX","translateY","touchArea","propTypes","number","bool","string","shape","func","onSlidingStart","onSlidingComplete","Image","source","oneOf","object","defaultProps","StyleSheet","create","justifyContent","borderRadius","top","left","right","bottom"],"mappings":"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","sourcesContent":["'use strict';\n\nimport React, {\n    PureComponent,\n} from 'react';\n\nimport {\n    Animated,\n    Easing,\n    Image,\n    StyleSheet,\n    View,\n    ViewPropTypes,\n} from 'react-native';\n\nimport {\n    PanGestureHandler,\n    State,\n} from 'react-native-gesture-handler';\n\nimport PropTypes from 'prop-types';\n\nvar TRACK_SIZE = 4;\nvar THUMB_SIZE = 20;\n\nvar DEFAULT_ANIMATION_CONFIGS = {\n    spring: {\n        friction: 7,\n        tension: 100\n    },\n    timing: {\n        duration: 150,\n        easing: Easing.inOut(Easing.ease),\n        delay: 0\n    },\n};\n\nexport default class Slider extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.isMoving = false;\n        this._translateX = new Animated.Value(0);\n        this._lastOffsetX = 0;\n        this._onGestureEvent = Animated.event(\n            [{\n                nativeEvent: props.vertical ? {\n                    translationY: this._translateX,\n                } : {\n                    translationX: this._translateX,\n                },\n            }], {\n                useNativeDriver: props.useNativeDriver,\n                listener: this._handlePanResponderMove,\n            }\n        );\n    }\n\n    _onHandlerStateChange = event => {\n        if (event.nativeEvent.state === State.BEGAN) {\n            // This synthetic event is reused for performance reasons, so save it first\n            var x = event.nativeEvent.x;\n            this._handlePanResponderGrant(x);\n        } else if (event.nativeEvent.oldState === State.ACTIVE) {\n            // This synthetic event is reused for performance reasons, so save it first\n            var translationX = this.props.vertical ? -event.nativeEvent.translationY : event.nativeEvent.translationX;\n            this._handlePanResponderEnd(translationX);\n        } else if (event.nativeEvent.oldState === State.BEGAN &&\n            (event.nativeEvent.state === State.FAILED ||\n            event.nativeEvent.state === State.END)) {\n            // Just tap not move on the slider, will comes here\n            this._handlePanResponderEnd(0);\n        }\n    };\n\n    static propTypes = {\n        /**\n         * Initial value of the slider. The value should be between minimumValue\n         * and maximumValue, which default to 0 and 1 respectively.\n         * Default value is 0.\n         *\n         * *This is not a controlled component*, e.g. if you don't update\n         * the value, the component won't be reset to its inital value.\n         */\n        value: PropTypes.number,\n\n        /**\n         * If true the user won't be able to move the slider.\n         * Default value is false.\n         */\n        disabled: PropTypes.bool,\n\n        /**\n         * Initial minimum value of the slider. Default value is 0.\n         */\n        minimumValue: PropTypes.number,\n\n        /**\n         * Initial maximum value of the slider. Default value is 1.\n         */\n        maximumValue: PropTypes.number,\n\n        /**\n         * Step value of the slider. The value should be between 0 and\n         * (maximumValue - minimumValue). Default value is 0.\n         */\n        step: PropTypes.number,\n\n        /**\n         * The color used for the track to the left of the button. Overrides the\n         * default blue gradient image.\n         */\n        minimumTrackTintColor: PropTypes.string,\n\n        /**\n         * The color used for the track to the right of the button. Overrides the\n         * default blue gradient image.\n         */\n        maximumTrackTintColor: PropTypes.string,\n\n        /**\n         * The color used for the thumb.\n         */\n        thumbTintColor: PropTypes.string,\n\n        /**\n         * The size of the touch area that allows moving the thumb.\n         * The touch area has the same center has the visible thumb.\n         * This allows to have a visually small thumb while still allowing the user\n         * to move it easily.\n         * The default is {width: 40, height: 40}.\n         */\n        thumbTouchSize: PropTypes.shape({\n            width: PropTypes.number,\n            height: PropTypes.number\n        }),\n\n        /**\n         * Prevent onValueChange if velocityX or velocityY (vertical is true)\n         * of nativeEvent is over the moveVelocityThreshold.\n         */\n        moveVelocityThreshold: PropTypes.number,\n\n        /**\n         * Callback continuously called while the user is dragging the slider\n         * and the dragging movement speed is below the moveVelocityThreshold.\n         */\n        onValueChange: PropTypes.func,\n\n        /**\n         * Callback called when the user starts changing the value (e.g. when\n         * the slider is pressed).\n         */\n        onSlidingStart: PropTypes.func,\n\n        /**\n         * Callback called when the user finishes changing the value (e.g. when\n         * the slider is released).\n         */\n        onSlidingComplete: PropTypes.func,\n\n        /**\n         * The style applied to the slider container.\n         */\n        style: ViewPropTypes.style,\n\n        /**\n         * The style applied to the track.\n         */\n        trackStyle: ViewPropTypes.style,\n\n        /**\n         * Sets an image for the track.\n         */\n        trackImage: Image.propTypes.source,\n\n        /**\n         * The style applied to the thumb.\n         */\n        thumbStyle: ViewPropTypes.style,\n\n        /**\n         * Sets an image for the thumb.\n         */\n        thumbImage: Image.propTypes.source,\n\n        /**\n         * Set this to true to be a vertical slider.\n         */\n        vertical: PropTypes.bool,\n\n        /**\n         * The useNativeDriver parameter in Animated used by react-native-gesture-handler when the user change the value.\n         * Default value is false, because some Android phone [PanGestureHandler causes Animated Value to jump when using native driver](https://github.com/software-mansion/react-native-gesture-handler/issues/984)\n         */\n        useNativeDriver: PropTypes.bool,\n\n        /**\n         * Set to true to animate values with default 'timing' animation type when value in next props is different.\n         */\n        animateTransitions: PropTypes.bool,\n\n        /**\n         * Custom Animation type when value in next props is different. 'spring' or 'timing'.\n         */\n        animationType: PropTypes.oneOf(['spring', 'timing']),\n\n        /**\n         * Used to configure the animation parameters when value in next props is different. These are the same parameters in the Animated library.\n         */\n        animationConfig: PropTypes.object,\n    };\n\n    static defaultProps = {\n        value: 0,\n        minimumValue: 0,\n        maximumValue: 1,\n        step: 0,\n        minimumTrackTintColor: '#3f3f3f',\n        maximumTrackTintColor: '#b3b3b3',\n        thumbTintColor: '#343434',\n        thumbTouchSize: {\n            width: 40,\n            height: 40\n        },\n        vertical: false,\n        moveVelocityThreshold: 2000,\n        useNativeDriver: false,\n        animationType: 'timing'\n    };\n\n    state = {\n        containerSize: {\n            width: 0,\n            height: 0\n        },\n        trackSize: {\n            width: 0,\n            height: 0\n        },\n        thumbSize: {\n            width: 0,\n            height: 0\n        },\n        allMeasured: false,\n        value: new Animated.Value(this.props.value),\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.value !== prevProps.value) {\n            this.setValue(this.props.value);\n        }\n    }\n\n    setValue = (value: number) => {\n        if (!this.isMoving && this.state.containerSize.width) {\n            this._translateX.setOffset(this.props.vertical ? this.state.containerSize.width - this._getThumbCenter(value) : this._getThumbCenter(value));\n            this._translateX.setValue(0);\n        }\n\n        if (this.props.animateTransitions) {\n            this._setCurrentValueAnimated(value);\n        } else {\n            this._setCurrentValue(value);\n        }\n    }\n\n    render() {\n        var {\n            minimumValue,\n            maximumValue,\n            minimumTrackTintColor,\n            maximumTrackTintColor,\n            thumbTintColor,\n            styles,\n            style,\n            trackStyle,\n            trackImage,\n            thumbStyle,\n            vertical,\n            onValueChange,\n            thumbTouchSize,\n            animationType,\n            animateTransitions,\n            ...other\n        } = this.props;\n        var {\n            value,\n            containerSize,\n            thumbSize,\n            allMeasured\n        } = this.state;\n        var mainStyles = styles || defaultStyles;\n        var thumbCenter = value.interpolate({\n            inputRange: [minimumValue, maximumValue],\n            outputRange: [0, containerSize.width - thumbSize.width / 2],\n            //extrapolate: 'clamp',\n        });\n        var valueVisibleStyle = {};\n        if (!allMeasured) {\n            valueVisibleStyle.opacity = 0;\n        }\n\n        var minimumTrackStyle = {\n            position: 'absolute',\n            width: Animated.add(thumbCenter, thumbSize.width / 2),\n            backgroundColor: minimumTrackTintColor,\n            ...valueVisibleStyle\n        };\n\n        var touchOverflowStyle = this._getTouchOverflowStyle();\n\n        var translate = this._translateX.interpolate({\n            inputRange: [0, containerSize.width || 200],\n            outputRange: [0, containerSize.width || 200],\n            extrapolate: 'clamp',\n        });\n\n        var transformStyle = {};\n        if (vertical) {\n            transformStyle.transform = [{\n                rotate: '-90deg'\n            }];\n            translate = Animated.multiply(Animated.add(translate, -containerSize.width), -1);\n        }\n\n        var thumbMarginLeftStyle = {\n            marginLeft: -thumbSize.width / 2,\n        };\n\n        return (\n            <View {...other} style={[mainStyles.container, style, transformStyle]} onLayout={this._measureContainer}>\n                <View\n                    style={[{backgroundColor: maximumTrackTintColor}, mainStyles.track, trackStyle]}\n                    renderToHardwareTextureAndroid={true}\n                    onLayout={this._measureTrack} >\n                    {trackImage ? <Image\n                        style={trackStyle}\n                        source={trackImage}\n                        resizeMode=\"stretch\" />\n                    : <Animated.View\n                        renderToHardwareTextureAndroid={true}\n                        style={[mainStyles.track, trackStyle, minimumTrackStyle]} />\n                    }\n                </View>\n                <Animated.View\n                    onLayout={this._measureThumb}\n                    renderToHardwareTextureAndroid={true}\n                    style={[\n                        {backgroundColor: thumbTintColor},\n                        mainStyles.thumb, thumbStyle, thumbMarginLeftStyle,\n                        {\n                            transform: [\n                                { translateX: translate},\n                                { translateY: 0},\n                            ],\n                            ...valueVisibleStyle\n                        }\n                    ]}\n                >\n                    {this._renderThumbImage()}\n                </Animated.View>\n                <PanGestureHandler\n                    onGestureEvent={this.props.disabled ? undefined : this._onGestureEvent}\n                    onHandlerStateChange={this.props.disabled ? undefined : this._onHandlerStateChange}>\n                    <Animated.View\n                        renderToHardwareTextureAndroid={true}\n                        style={[defaultStyles.touchArea, touchOverflowStyle]}\n                    />\n                </PanGestureHandler>\n            </View>\n        );\n    }\n\n    _handlePanResponderGrant = (x: number) => {\n        this._lastOffsetX = x - this._getTouchOverflowSize().width / 2;\n        if (this._lastOffsetX < 0) {\n            this._lastOffsetX = 0;\n        } else if (this._lastOffsetX > this.state.containerSize.width) {\n            this._lastOffsetX = this.state.containerSize.width;\n        }\n\n        this._translateX.setOffset(this.props.vertical ? this.state.containerSize.width - this._lastOffsetX : this._lastOffsetX);\n        this._translateX.setValue(0);\n\n        this._fireChangeEvent('onSlidingStart');\n    };\n\n    _handlePanResponderMove = (e: Object) => {\n        // This synthetic event is reused for performance reasons, so save it first\n        var translationX = e.nativeEvent.translationX;\n        var translationY = e.nativeEvent.translationY;\n        var velocityX = e.nativeEvent.velocityX;\n        var velocityY = e.nativeEvent.velocityY;\n\n        if (this.props.disabled) {\n            return;\n        }\n        this.isMoving = true;\n\n        var translation = this.props.vertical ? -translationY : translationX;\n        var offset = this._lastOffsetX + translation;\n        if (offset < 0) {\n            offset = 0;\n        } else if (offset > this.state.containerSize.width) {\n            offset = this.state.containerSize.width;\n        }\n\n        var newValue = this._getValue(offset);\n        if (this._getCurrentValue() !== newValue) {\n            this._setCurrentValue(newValue);\n            var velocity = Math.abs(this.props.vertical ? velocityY : velocityX);\n            if (velocity < this.props.moveVelocityThreshold) {\n                this._fireChangeEvent('onValueChange');\n            }\n        }\n    };\n\n    _handlePanResponderEnd = (translationX: number) => {\n        if (this.props.disabled) {\n            return;\n        }\n\n        this.isMoving = false;\n\n        this._lastOffsetX += translationX;\n        if (this._lastOffsetX < 0) {\n            this._lastOffsetX = 0;\n        } else if (this._lastOffsetX > this.state.containerSize.width) {\n            this._lastOffsetX = this.state.containerSize.width;\n        }\n\n        var value = this._getValue(this._lastOffsetX);\n        var offset = this._getThumbCenter(value);\n        this._translateX.setOffset(this.props.vertical ? this.state.containerSize.width - offset : offset);\n        this._translateX.setValue(0);\n\n        this._setCurrentValue(value);\n        this._fireChangeEvent('onSlidingComplete');\n    };\n\n    _measureContainer = (x: Object) => {\n        this._handleMeasure('containerSize', x);\n    };\n\n    _measureTrack = (x: Object) => {\n        this._handleMeasure('trackSize', x);\n    };\n\n    _measureThumb = (x: Object) => {\n        this._handleMeasure('thumbSize', x);\n    };\n\n    _handleMeasure = (name: string, x: Object) => {\n        var {\n            width,\n            height\n        } = x.nativeEvent.layout;\n        var size = {\n            width: width,\n            height: height\n        };\n\n        var storeName = `_${name}`;\n        var currentSize = this[storeName];\n        if (currentSize && width === currentSize.width && height === currentSize.height) {\n            return;\n        }\n        this[storeName] = size;\n\n        if (this._containerSize && this._trackSize && this._thumbSize) {\n            this.setState({\n                containerSize: this._containerSize,\n                trackSize: this._trackSize,\n                thumbSize: this._thumbSize,\n                allMeasured: true,\n            }, () => {\n                var offset = this._getThumbCenter(this.props.value);\n                this._translateX.setOffset(this.props.vertical ? this.state.containerSize.width - offset : offset);\n                this._translateX.setValue(0);\n                this._lastOffsetX = offset;\n            });\n        }\n    };\n\n    _getRatio = (value: number) => {\n        return (value - this.props.minimumValue) / (this.props.maximumValue - this.props.minimumValue);\n    };\n\n    _getThumbCenter = (value: number) => {\n        var ratio = this._getRatio(value);\n        return ratio * this.state.containerSize.width;\n    };\n\n    _getValue = (offset: number) => {\n        var length = this.state.containerSize.width;\n        var thumbCenter = offset;\n\n        var ratio = thumbCenter / length;\n\n        if (this.props.step) {\n            return Math.max(this.props.minimumValue,\n                Math.min(this.props.maximumValue,\n                    this.props.minimumValue + Math.round(ratio * (this.props.maximumValue - this.props.minimumValue) / this.props.step) * this.props.step\n                )\n            );\n        } else {\n            return Math.max(this.props.minimumValue,\n                Math.min(this.props.maximumValue,\n                    ratio * (this.props.maximumValue - this.props.minimumValue) + this.props.minimumValue\n                )\n            );\n        }\n    };\n\n    _getCurrentValue = () => {\n        return this.state.value.__getValue();\n    };\n\n    _setCurrentValue = (value: number) => {\n        this.state.value.setValue(value);\n    };\n\n    _setCurrentValueAnimated = (value: number) => {\n        var animationType = this.props.animationType;\n        var animationConfig = Object.assign({},\n            DEFAULT_ANIMATION_CONFIGS[animationType],\n            this.props.animationConfig, {\n                toValue: value\n            }\n        );\n\n        Animated[animationType](this.state.value, animationConfig).start();\n    };\n\n    _fireChangeEvent = (event) => {\n        if (this.props[event]) {\n            this.props[event](this._getCurrentValue());\n        }\n    };\n\n    _getTouchOverflowSize = () => {\n        var state = this.state;\n        var props = this.props;\n\n        var size = {};\n        if (state.allMeasured === true) {\n            size.width = Math.max(0, props.thumbTouchSize.width - state.thumbSize.width);\n            size.height = Math.max(0, props.thumbTouchSize.height - state.containerSize.height);\n        }\n\n        return size;\n    };\n\n    _getTouchOverflowStyle = () => {\n        var {\n            width,\n            height\n        } = this._getTouchOverflowSize();\n\n        var touchOverflowStyle = {};\n        if (width !== undefined && height !== undefined) {\n            var verticalMargin = -height / 2;\n            touchOverflowStyle.marginTop = verticalMargin;\n            touchOverflowStyle.marginBottom = verticalMargin;\n\n            var horizontalMargin = -width / 2;\n            touchOverflowStyle.marginLeft = horizontalMargin;\n            touchOverflowStyle.marginRight = horizontalMargin;\n        }\n\n        return touchOverflowStyle;\n    };\n\n    _renderThumbImage = () => {\n        var {\n            thumbImage,\n            thumbStyle,\n        } = this.props;\n\n        if (!thumbImage) {\n            return;\n        }\n\n        var imageStyle = {\n            width: defaultStyles.thumb.width,\n            height: defaultStyles.thumb.height,\n        };\n        if (thumbStyle) {\n            imageStyle.width = thumbStyle.width || imageStyle.width;\n            imageStyle.height = thumbStyle.height || imageStyle.height;\n        }\n\n        return <Image source={thumbImage} style={imageStyle} />;\n    };\n}\n\nvar defaultStyles = StyleSheet.create({\n    container: {\n        height: 40,\n        justifyContent: 'center',\n    },\n    track: {\n        height: TRACK_SIZE,\n        borderRadius: TRACK_SIZE / 2,\n    },\n    thumb: {\n        position: 'absolute',\n        width: THUMB_SIZE,\n        height: THUMB_SIZE,\n        borderRadius: THUMB_SIZE / 2,\n    },\n    touchArea: {\n        position: 'absolute',\n        backgroundColor: 'transparent',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n    },\n});\n"]},"metadata":{},"sourceType":"module"}