{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport default {\n  get name() {\n    return 'ExpoClipboard';\n  },\n\n  getStringAsync: function getStringAsync() {\n    var text;\n    return _regeneratorRuntime.async(function getStringAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            text = '';\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(navigator.clipboard.readText());\n\n          case 4:\n            text = _context.sent;\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](1);\n\n            try {\n              text = window.clipboardData.getData('Text');\n            } catch (e) {\n              Promise.reject(new Error('Unable to retrieve item from clipboard.'));\n            }\n\n          case 10:\n            return _context.abrupt(\"return\", text);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 7]], Promise);\n  },\n  setString: function setString(text) {\n    var success = false;\n    var textField = document.createElement('textarea');\n    textField.innerText = text;\n    document.body.appendChild(textField);\n    textField.select();\n\n    try {\n      document.execCommand('copy');\n      success = true;\n    } catch (e) {}\n\n    document.body.removeChild(textField);\n    return success;\n  }\n};","map":{"version":3,"sources":["../src/ExpoClipboard.web.ts"],"names":[],"mappings":";AAAA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,eAAP;AACD,GAHY;;AAIP,EAAA,cAJO;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,YAAA,IALO,GAKA,EALA;AAAA;AAAA;AAAA,6CAOI,SAAS,CAAC,SAAV,CAAoB,QAApB,EAPJ;;AAAA;AAOT,YAAA,IAPS;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAST,gBAAI;AAGF,cAAA,IAAI,GAAG,MAAM,CAAC,aAAP,CAAqB,OAArB,CAA6B,MAA7B,CAAP;AACD,aAJD,CAIE,OAAO,CAAP,EAAU;AACV,cAAA,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,yCAAV,CAAf;AACD;;AAfQ;AAAA,6CAiBJ,IAjBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBb,EAAA,SAnBa,qBAmBH,IAnBG,EAmBS;AACpB,QAAI,OAAO,GAAG,KAAd;AACA,QAAM,SAAS,GAAG,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CAAlB;AACA,IAAA,SAAS,CAAC,SAAV,GAAsB,IAAtB;AACA,IAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,SAA1B;AACA,IAAA,SAAS,CAAC,MAAV;;AACA,QAAI;AACF,MAAA,QAAQ,CAAC,WAAT,CAAqB,MAArB;AACA,MAAA,OAAO,GAAG,IAAV;AACD,KAHD,CAGE,OAAO,CAAP,EAAU,CAAE;;AACd,IAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,SAA1B;AACA,WAAO,OAAP;AACD;AA/BY,CAAf","sourcesContent":["export default {\n  get name(): string {\n    return 'ExpoClipboard';\n  },\n  async getStringAsync(): Promise<string> {\n    let text = '';\n    try {\n      text = await navigator.clipboard.readText();\n    } catch (e) {\n      try {\n        // Internet Explorer\n        // @ts-ignore\n        text = window.clipboardData.getData('Text');\n      } catch (e) {\n        Promise.reject(new Error('Unable to retrieve item from clipboard.'));\n      }\n    }\n    return text;\n  },\n  setString(text: string): boolean {\n    let success = false;\n    const textField = document.createElement('textarea');\n    textField.innerText = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      success = true;\n    } catch (e) {}\n    document.body.removeChild(textField);\n    return success;\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}