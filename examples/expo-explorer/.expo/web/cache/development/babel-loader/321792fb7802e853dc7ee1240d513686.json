{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject,\n    _templateObject2,\n    _templateObject3,\n    _templateObject4,\n    _jsxFileName = \"/Users/leman/local-works/niceforum/svgr-iconkit/examples/expo-explorer/src/components/IconList.js\";\n\nimport React from \"react\";\nimport { ClipboardStatic } from \"react-native-web/dist/index\";\nimport { Box, SimpleGrid, Text, Icon, Pressable, useToast } from \"native-base\";\nimport styled, { css } from \"styled-components/native\";\nimport Clipboard from \"expo-clipboard\";\nvar IconContent = styled(Box)(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  border-bottom-width: 1px;\\n  border-bottom-color: #ccc;\\n  align-items: center;\\n  justify-content: center;\\n  width: 100px;\\n  height: 70px;\\n\"])));\nvar IconWrapper = styled(Pressable)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  border: 1px solid #ccc;\\n  border-radius: 5px;\\n  width: 100px;\\n  height: 100px;\\n\\n\"])));\nvar IconListWrapper = styled.View(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"\\nposition: relative;\\nwidth: 100%;\\n\"])));\nIconListWrapper.displayName = 'IconListWrapper';\nvar IconLabel = styled(Text)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose([\"\\n  align-items: center;\\n  justify-content: center;\\n  padding: 2px;\\n  width: 100px;\\n  height: 30px;\\n  font-size: 9px;\\n  text-align: center;\\n\"])));\nexport default function IconList(_ref) {\n  var _this = this;\n\n  var maxCount = _ref.maxCount,\n      _ref$allVariantNames = _ref.allVariantNames,\n      allVariantNames = _ref$allVariantNames === void 0 ? [] : _ref$allVariantNames,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? \"#ccc\" : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? \"regular\" : _ref$variant,\n      _ref$allIconNames = _ref.allIconNames,\n      allIconNames = _ref$allIconNames === void 0 ? [] : _ref$allIconNames,\n      Iconset = _ref.component,\n      children = _ref.children,\n      onIconPress = _ref.onIconPress,\n      _ref$numColumn = _ref.numColumn,\n      numColumn = _ref$numColumn === void 0 ? 3 : _ref$numColumn;\n  var toast = useToast();\n\n  if (!Iconset) {\n    return null;\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(IconListWrapper, {\n    color: color,\n    size: size,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, React.createElement(SimpleGrid, {\n    alignItems: \"center\",\n    columns: numColumn,\n    spacingY: 4,\n    spacingX: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, allIconNames && allIconNames.slice(0, maxCount).map(function (icon) {\n    return React.createElement(IconWrapper, {\n      onPress: function onPress() {\n        return onIconPress && onIconPress(icon);\n      },\n      key: icon,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, React.createElement(IconContent, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }, React.createElement(Iconset, {\n      variant: variant,\n      name: icon,\n      size: size,\n      color: color,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    })), React.createElement(IconLabel, {\n      noOfLines: 3,\n      numberOfLines: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }, icon));\n  }))), children);\n}","map":{"version":3,"sources":["/Users/leman/local-works/niceforum/svgr-iconkit/examples/expo-explorer/src/components/IconList.js"],"names":["React","ClipboardStatic","Box","SimpleGrid","Text","Icon","Pressable","useToast","styled","css","Clipboard","IconContent","IconWrapper","IconListWrapper","View","displayName","IconLabel","IconList","maxCount","allVariantNames","color","size","variant","allIconNames","Iconset","component","children","onIconPress","numColumn","toast","slice","map","icon"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;SACSC,e;AACT,SAASC,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsCC,SAAtC,EAAiDC,QAAjD,QAAiE,aAAjE;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,0BAA5B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA,IAAMC,WAAW,GAAGH,MAAM,CAACN,GAAD,CAAT,6NAAjB;AAQA,IAAMU,WAAW,GAAGJ,MAAM,CAACF,SAAD,CAAT,qKAAjB;AAOA,IAAMO,eAAe,GAAGL,MAAM,CAACM,IAAV,iHAArB;AAIAD,eAAe,CAACE,WAAhB,GAA8B,iBAA9B;AAEA,IAAMC,SAAS,GAAGR,MAAM,CAACJ,IAAD,CAAT,+NAAf;AAUA,eAAe,SAASa,QAAT,OAWZ;AAAA;;AAAA,MAVDC,QAUC,QAVDA,QAUC;AAAA,kCATDC,eASC;AAAA,MATDA,eASC,qCATiB,EASjB;AAAA,wBARDC,KAQC;AAAA,MARDA,KAQC,2BARO,MAQP;AAAA,uBAPDC,IAOC;AAAA,MAPDA,IAOC,0BAPM,EAON;AAAA,0BANDC,OAMC;AAAA,MANDA,OAMC,6BANS,SAMT;AAAA,+BALDC,YAKC;AAAA,MALDA,YAKC,kCALc,EAKd;AAAA,MAJUC,OAIV,QAJDC,SAIC;AAAA,MAHDC,QAGC,QAHDA,QAGC;AAAA,MAFDC,WAEC,QAFDA,WAEC;AAAA,4BADDC,SACC;AAAA,MADDA,SACC,+BADW,CACX;AAED,MAAMC,KAAK,GAAGtB,QAAQ,EAAtB;;AAEA,MAAI,CAACiB,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,SACE,0CACA,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAEJ,KAAxB;AAA+B,IAAA,IAAI,EAAEC,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AACE,IAAA,UAAU,EAAC,QADb;AAEE,IAAA,OAAO,EAAEO,SAFX;AAGE,IAAA,QAAQ,EAAE,CAHZ;AAIE,IAAA,QAAQ,EAAE,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGL,YAAY,IACXA,YAAY,CAACO,KAAb,CAAmB,CAAnB,EAAsBZ,QAAtB,EAAgCa,GAAhC,CAAoC,UAACC,IAAD;AAAA,WAClC,oBAAC,WAAD;AAAa,MAAA,OAAO,EAAE;AAAA,eAAML,WAAW,IAAIA,WAAW,CAACK,IAAD,CAAhC;AAAA,OAAtB;AAA8D,MAAA,GAAG,EAAEA,IAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAEV,OAAlB;AAA2B,MAAA,IAAI,EAAEU,IAAjC;AAAuC,MAAA,IAAI,EAAEX,IAA7C;AAAmD,MAAA,KAAK,EAAED,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAIE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAE,CAAtB;AAAyB,MAAA,aAAa,EAAE,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGY,IADH,CAJF,CADkC;AAAA,GAApC,CAPJ,CADF,CADA,EAqBGN,QArBH,CADF;AAyBD","sourcesContent":["import React from \"react\";\nimport { ClipboardStatic } from \"react-native\";\nimport { Box, SimpleGrid, Text, Icon, Pressable, useToast } from \"native-base\";\nimport styled, { css } from \"styled-components/native\";\nimport Clipboard from \"expo-clipboard\";\n\nconst IconContent = styled(Box)`\n  border-bottom-width: 1px;\n  border-bottom-color: #ccc;\n  align-items: center;\n  justify-content: center;\n  width: 100px;\n  height: 70px;\n`;\nconst IconWrapper = styled(Pressable)`\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  width: 100px;\n  height: 100px;\n\n`;\nconst IconListWrapper = styled.View`\nposition: relative;\nwidth: 100%;\n`;\nIconListWrapper.displayName = 'IconListWrapper';\n\nconst IconLabel = styled(Text)`\n  align-items: center;\n  justify-content: center;\n  padding: 2px;\n  width: 100px;\n  height: 30px;\n  font-size: 9px;\n  text-align: center;\n`;\n\nexport default function IconList({\n  maxCount,\n  allVariantNames = [],\n  color = \"#ccc\",\n  size = 24,\n  variant = \"regular\",\n  allIconNames = [],\n  component: Iconset,\n  children,\n  onIconPress,\n  numColumn = 3,\n}) {\n  \n  const toast = useToast();\n  \n  if (!Iconset) {\n    return null;\n  }\n\n  return (\n    <>\n    <IconListWrapper color={color} size={size}>\n      <SimpleGrid\n        alignItems=\"center\"\n        columns={numColumn}\n        spacingY={4}\n        spacingX={4}\n      >\n        {allIconNames &&\n          allIconNames.slice(0, maxCount).map((icon) => (\n            <IconWrapper onPress={() => onIconPress && onIconPress(icon)} key={icon}>\n              <IconContent>\n                <Iconset variant={variant} name={icon} size={size} color={color} />\n              </IconContent>\n              <IconLabel noOfLines={3} numberOfLines={3}>\n                {icon}\n              </IconLabel>\n            </IconWrapper>\n          ))}\n      </SimpleGrid>\n          </IconListWrapper>\n      {children}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}