{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.useBackHandler=useBackHandler;exports.useKeyboardDismissable=exports.keyboardDismissHandlerManager=void 0;var _react=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");var keyboardDismissHandlers=[];var keyboardDismissHandlerManager={push:function push(handler){keyboardDismissHandlers.push(handler);return function(){keyboardDismissHandlers=keyboardDismissHandlers.filter(function(h){return h!==handler;});};},length:function length(){return keyboardDismissHandlers.length;},pop:function pop(){return keyboardDismissHandlers.pop();}};exports.keyboardDismissHandlerManager=keyboardDismissHandlerManager;var useKeyboardDismissable=function useKeyboardDismissable(_ref){var enabled=_ref.enabled,callback=_ref.callback;_react.default.useEffect(function(){var cleanupFn=function cleanupFn(){};if(enabled){cleanupFn=keyboardDismissHandlerManager.push(callback);}else{cleanupFn();}return function(){cleanupFn();};},[enabled,callback]);useBackHandler({enabled:enabled,callback:callback});};exports.useKeyboardDismissable=useKeyboardDismissable;function useBackHandler(_ref2){var enabled=_ref2.enabled,callback=_ref2.callback;(0,_react.useEffect)(function(){var backHandler=function backHandler(){callback();return true;};if(enabled){_reactNative.BackHandler.addEventListener('hardwareBackPress',backHandler);}else{_reactNative.BackHandler.removeEventListener('hardwareBackPress',backHandler);}return function(){return _reactNative.BackHandler.removeEventListener('hardwareBackPress',backHandler);};},[enabled,callback]);}","map":{"version":3,"sources":["useKeyboardDismissable.ts"],"names":["keyboardDismissHandlers","keyboardDismissHandlerManager","push","h","length","pop","useKeyboardDismissable","enabled","callback","React","cleanupFn","useBackHandler","backHandler","BackHandler"],"mappings":"gQAAA,GAAA,CAAA,MAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,C,wDASA,GAAIA,CAAAA,uBAAyC,CAA7C,EAAA,CACO,GAAMC,CAAAA,6BAA6B,CAAG,CAC3CC,IAAI,CAAE,QAAA,CAAA,IAAA,CAAA,OAAA,CAAwB,CAC5BF,uBAAuB,CAAvBA,IAAAA,CAAAA,OAAAA,EACA,MAAO,WAAM,CACXA,uBAAuB,CAAGA,uBAAuB,CAAvBA,MAAAA,CACxB,SAAA,CAAA,CAAA,CAAA,MAAOG,CAAAA,CAAC,GAAR,OAAA,CADFH,CAA0BA,CAA1BA,CADF,CAAA,CAHyC,CAAA,CAS3CI,MAAM,CAAE,QAAA,CAAA,MAAA,EAAA,CAAA,MAAMJ,CAAAA,uBAAuB,CAA7B,MAAA,CATmC,CAAA,CAU3CK,GAAG,CAAE,QAAA,CAAA,GAAA,EAAM,CACT,MAAOL,CAAAA,uBAAuB,CAA9B,GAAOA,EAAP,CAXG,CAAsC,CAAtC,C,oEAkBA,GAAMM,CAAAA,sBAAsB,CAAtBA,QAAAA,CAAAA,sBAAAA,CAAyB,IAAzBA,CAA6D,CAAjCC,GAAAA,CAAAA,OAAiC,CAAA,IAAA,CAAjCA,OAAAA,CAASC,QAAwB,CAAA,IAAA,CAAxBA,QAATD,CACvCE,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAgB,UAAM,CACpB,GAAIC,CAAAA,SAAS,CAAG,QAAA,CAAA,SAAA,EAAM,CAAtB,CAAA,CACA,GAAA,OAAA,CAAa,CACXA,SAAS,CAAGT,6BAA6B,CAA7BA,IAAAA,CAAZS,QAAYT,CAAZS,CADF,CAAA,IAEO,CACLA,SAAS,GAEX,OAAO,WAAM,CACXA,SAAS,GADX,CAAA,CAPFD,CAAAA,CAUG,CAAA,OAAA,CAVHA,QAUG,CAVHA,EAYAE,cAAc,CAAC,CAAEJ,OAAO,CAAT,OAAA,CAAWC,QAAQ,CAAlCG,QAAe,CAAD,CAAdA,CAbK,CAAA,C,sDAgBA,QAAA,CAAA,cAAA,CAAA,KAAA,CAAwD,CAA9BJ,GAAAA,CAAAA,OAA8B,CAAA,KAAA,CAA9BA,OAAAA,CAASC,QAAqB,CAAA,KAAA,CAArBA,QAATD,CAC/B,CAAA,EAAA,MAAA,CAAA,SAAA,EAAU,UAAM,CACd,GAAIK,CAAAA,WAAW,CAAXA,QAAAA,CAAAA,WAAAA,EAAoB,CACtBJ,QAAQ,GACR,MAAA,KAAA,CAFF,CAAA,CAIA,GAAA,OAAA,CAAa,CACXK,YAAAA,CAAAA,WAAAA,CAAAA,gBAAAA,CAAAA,mBAAAA,CAAAA,WAAAA,EADF,CAAA,IAEO,CACLA,YAAAA,CAAAA,WAAAA,CAAAA,mBAAAA,CAAAA,mBAAAA,CAAAA,WAAAA,EAEF,OAAO,WAAA,CAAA,MACLA,CAAAA,YAAAA,CAAAA,WAAAA,CAAAA,mBAAAA,CAAAA,mBAAAA,CADK,WACLA,CADK,CAAP,CAAA,CAVF,CAAA,CAYG,CAAA,OAAA,CAZH,QAYG,CAZH,EAaD","sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { BackHandler } from 'react-native';\n\ntype IParams = {\n  enabled?: boolean;\n  callback: () => any;\n};\n\nlet keyboardDismissHandlers: Array<() => any> = [];\nexport const keyboardDismissHandlerManager = {\n  push: (handler: () => any) => {\n    keyboardDismissHandlers.push(handler);\n    return () => {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(\n        (h) => h !== handler\n      );\n    };\n  },\n  length: () => keyboardDismissHandlers.length,\n  pop: () => {\n    return keyboardDismissHandlers.pop();\n  },\n};\n\n/**\n * Handles attaching callback for Escape key listener on web and Back button listener on Android\n */\nexport const useKeyboardDismissable = ({ enabled, callback }: IParams) => {\n  React.useEffect(() => {\n    let cleanupFn = () => {};\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n    return () => {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n\n  useBackHandler({ enabled, callback });\n};\n\nexport function useBackHandler({ enabled, callback }: IParams) {\n  useEffect(() => {\n    let backHandler = () => {\n      callback();\n      return true;\n    };\n    if (enabled) {\n      BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n    return () =>\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n  }, [enabled, callback]);\n}\n"]},"metadata":{},"sourceType":"script"}