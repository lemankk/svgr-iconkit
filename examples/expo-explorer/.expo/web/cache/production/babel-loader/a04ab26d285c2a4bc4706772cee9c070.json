{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{usePress}from'@react-native-aria/interactions';import{useSelectableItem}from'@react-aria/selection';import{useMapDomPropsToRN}from'@react-native-aria/utils';var tabsIds=new WeakMap();export function useTab(props,state,ref){var item=props.item,propsDisabled=props.isDisabled;var key=item.key;var manager=state.selectionManager,selectedKey=state.selectedKey;var isSelected=key===selectedKey;var _useSelectableItem=useSelectableItem({selectionManager:manager,key:key,ref:ref}),itemProps=_useSelectableItem.itemProps;var isDisabled=propsDisabled||state.disabledKeys.has(key);var _usePress=usePress(_objectSpread(_objectSpread({},itemProps),{},{isDisabled:isDisabled})),pressProps=_usePress.pressProps;var tabId=generateId(state,key,'tab');var tabPanelId=generateId(state,key,'tabpanel');var tabIndex=pressProps.tabIndex;if(isSelected&&!isDisabled){tabIndex=0;}var onMouseDown=function onMouseDown(e){return e.stopPropagation();};var tabPropsTemp=_objectSpread(_objectSpread({},pressProps),{},{onMouseDown:onMouseDown,'id':tabId,'aria-selected':isSelected,'aria-disabled':isDisabled||undefined,'aria-controls':isSelected?tabPanelId:undefined,'tabIndex':isDisabled?undefined:tabIndex,'role':'tab'});var tabProps=useMapDomPropsToRN(tabPropsTemp,ref);return{tabProps:tabProps};}function generateId(state,key,role){if(typeof key==='string'){key=key.replace(/\\s+/g,'');}var baseId=tabsIds.get(state);return baseId+\"-\"+role+\"-\"+key;}","map":{"version":3,"sources":["useTab.web.ts"],"names":["tabsIds","isDisabled","propsDisabled","key","selectionManager","selectedKey","isSelected","itemProps","useSelectableItem","ref","state","pressProps","usePress","tabId","generateId","tabPanelId","tabIndex","onMouseDown","e","tabPropsTemp","tabProps","useMapDomPropsToRN","baseId","role"],"mappings":"+1BAGA,OAAA,QAAA,KAAA,iCAAA,CACA,OAAA,iBAAA,KAAA,uBAAA,CAGA,OAAA,kBAAA,KAAA,0BAAA,CAGA,GAAMA,CAAAA,OAAO,CAAG,GAAhB,CAAA,OAAgB,EAAhB,CAOA,MAAO,SAAA,CAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,GAAA,CAII,CACT,GAAI,CAAA,IAAJ,CAAA,KAAA,CAAI,IAAJ,CAAwBE,aAAxB,CAAA,KAAA,CAAYD,UAAZ,CACA,GAAME,CAAAA,GAAN,CAAA,IAAA,CAAMA,GAAN,CACA,GAAI,CAAA,OAAJ,CAAA,KAAA,CAAMC,gBAAN,CAAiCC,WAAjC,CAAA,KAAA,CAAiCA,WAAjC,CAEA,GAAIC,CAAAA,UAAU,CAAGH,GAAG,GAApB,WAAA,CAEA,uBAAoBK,iBAAiB,CAAC,CACpCJ,gBAAgB,CADoB,OAAA,CAEpCD,GAFoC,CAEpCA,GAFoC,CAGpCM,GAAAA,CAAAA,GAHoC,CAAD,CAArC,CAAMF,SAAN,oBAAMA,SAAN,CAKA,GAAIN,CAAAA,UAAU,CAAGC,aAAa,EAAIQ,KAAK,CAALA,YAAAA,CAAAA,GAAAA,CAAlC,GAAkCA,CAAlC,CAEA,cAAqBE,QAAQ,gCAAC,SAAD,MAAiBX,UAAAA,CAAAA,UAAjB,GAA7B,CAAMU,UAAN,WAAMA,UAAN,CACA,GAAIE,CAAAA,KAAK,CAAGC,UAAU,CAAA,KAAA,CAAA,GAAA,CAAtB,KAAsB,CAAtB,CACA,GAAIC,CAAAA,UAAU,CAAGD,UAAU,CAAA,KAAA,CAAA,GAAA,CAA3B,UAA2B,CAA3B,CACA,GAAME,CAAAA,QAAN,CAjBS,UAiBT,CAAMA,QAAN,CAGA,GAAIV,UAAU,EAAI,CAAlB,UAAA,CAA+B,CAC7BU,QAAQ,CAARA,CAAAA,CArBO,CA8BT,GAAMC,CAAAA,WAAW,CAAMC,QAAjBD,CAAAA,WAAiBC,CAAAA,CAAD,QAAWA,CAAAA,CAAC,CAAlC,eAAiCA,EAAX,EAAtB,CAEA,GAAMC,CAAAA,YAAY,gCAAI,UAAJ,MAEhBF,WAFoB,CAEpBA,WAFgB,CAGhB,KAHoB,KAAJ,CAIhB,gBAJoB,UAAJ,CAKhB,gBAAiBhB,UAAU,EALP,SAAJ,CAMhB,gBAAiBK,UAAU,CAAA,UAAA,CANP,SAAJ,CAOhB,WAAYL,UAAU,CAAA,SAAA,CAPF,QAAJ,CAQhB,OAAQ,KARQ,EAAlB,CAWA,GAAMmB,CAAAA,QAAQ,CAAGC,kBAAkB,CAAA,YAAA,CAAnC,GAAmC,CAAnC,CAEA,MAAO,CACLD,QAAAA,CAAAA,QADK,CAAP,CAGD,CAED,QAAA,CAAA,UAAA,CAAA,KAAA,CAAA,GAAA,CAAA,IAAA,CAIE,CACA,GAAI,MAAA,CAAA,GAAA,GAAJ,QAAA,CAA6B,CAC3BjB,GAAG,CAAGA,GAAG,CAAHA,OAAAA,CAAAA,MAAAA,CAANA,EAAMA,CAANA,CACD,CAED,GAAImB,CAAAA,MAAM,CAAGtB,OAAO,CAAPA,GAAAA,CAAb,KAAaA,CAAb,CACA,MAAUsB,CAAAA,MAAV,KAAoBC,IAApB,KAAA,GAAA,CACD","sourcesContent":["import { AriaTabProps } from '@react-types/tabs';\nimport { HTMLAttributes, Key, RefObject } from 'react';\nimport { SingleSelectListState } from '@react-stately/list';\nimport { usePress } from '@react-native-aria/interactions';\nimport {\n  useSelectableItem,\n} from '@react-aria/selection';\nimport { useMapDomPropsToRN } from '@react-native-aria/utils';\n\n\nconst tabsIds = new WeakMap<SingleSelectListState<unknown>, string>();\n\ninterface TabAria {\n  /** Props for the tab element. */\n  tabProps: HTMLAttributes<HTMLElement>;\n}\n\nexport function useTab<T>(\n  props: AriaTabProps<T>,\n  state: SingleSelectListState<T>,\n  ref: RefObject<HTMLElement>\n): TabAria {\n  let { item, isDisabled: propsDisabled } = props;\n  let { key } = item;\n  let { selectionManager: manager, selectedKey } = state;\n\n  let isSelected = key === selectedKey;\n\n  let { itemProps } = useSelectableItem({\n    selectionManager: manager,\n    key,\n    ref,\n  });\n  let isDisabled = propsDisabled || state.disabledKeys.has(key);\n\n  let { pressProps } = usePress({ ...itemProps, isDisabled });\n  let tabId = generateId(state, key, 'tab');\n  let tabPanelId = generateId(state, key, 'tabpanel');\n  let { tabIndex } = pressProps;\n\n  // selected tab should have tabIndex=0, when it initializes\n  if (isSelected && !isDisabled) {\n    tabIndex = 0;\n  }\n\n  \n  // Putting this as a last resort, after several hours of debugging.\n  // Why?\n  // tabListProps adds onMouseDown with preventDefault in useSelectableCollection.ts (React Aria) and react-native-web uses onClick for onPress.\n  // This results in tab button not getting focused when clicked\n  // See this example - https://codesandbox.io/s/issue-i-know-but-dont-know-why-1-ydyw5?file=/src/App.js\n  const onMouseDown  =  (e:any) => e.stopPropagation();\n\n  const tabPropsTemp  = {\n    ...pressProps,\n    onMouseDown,\n    'id': tabId,\n    'aria-selected': isSelected,\n    'aria-disabled': isDisabled || undefined,\n    'aria-controls': isSelected ? tabPanelId : undefined,\n    'tabIndex': isDisabled ? undefined : tabIndex,\n    'role': 'tab',\n  }\n  \n  const tabProps = useMapDomPropsToRN(tabPropsTemp, ref)\n\n  return {\n    tabProps\n  };\n}\n\nfunction generateId<T>(\n  state: SingleSelectListState<T>,\n  key: Key,\n  role: string\n) {\n  if (typeof key === 'string') {\n    key = key.replace(/\\s+/g, '');\n  }\n\n  let baseId = tabsIds.get(state);\n  return `${baseId}-${role}-${key}`;\n}\n"]},"metadata":{},"sourceType":"module"}