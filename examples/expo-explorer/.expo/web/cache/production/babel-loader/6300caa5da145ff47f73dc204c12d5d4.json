{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.useToken=useToken;var _useTheme=require(\"./useTheme\");var _lodash=_interopRequireDefault(require(\"lodash.get\"));function useToken(property,token,fallback){var theme=(0,_useTheme.useTheme)();if(Array.isArray(token)){var fallbackArr=[];if(fallback){fallbackArr=Array.isArray(fallback)?fallback:[fallback];}return token.map(function(innerToken,index){var _fallbackArr$index;var path=property+\".\"+innerToken;return(0,_lodash.default)(theme,path,(_fallbackArr$index=fallbackArr[index])!=null?_fallbackArr$index:innerToken);});}var path=property+\".\"+token;return(0,_lodash.default)(theme,path,fallback!=null?fallback:token);}","map":{"version":3,"sources":["useToken.ts"],"names":["theme","Array","fallbackArr","token","path","property","fallback"],"mappings":"sKAAA,GAAA,CAAA,SAAA,CAAA,OAAA,cAAA,CACA,GAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA,CAEO,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,KAAA,CAAA,QAAA,CAIL,CACA,GAAMA,CAAAA,KAAK,CAAG,CAAA,EAAA,SAAA,CAAd,QAAc,GAAd,CACA,GAAIC,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,CAA0B,CACxB,GAAIC,CAAAA,WAAgB,CAApB,EAAA,CACA,GAAA,QAAA,CAAc,CACZA,WAAW,CAAGD,KAAK,CAALA,OAAAA,CAAAA,QAAAA,EAAAA,QAAAA,CAAqC,CAAnDC,QAAmD,CAAnDA,CAEF,OAAOC,CAAAA,KAAK,CAALA,GAAAA,CAAU,SAAA,UAAA,CAAA,KAAA,CAAuB,CAAA,GAAA,CAAA,kBAAA,CACtC,GAAMC,CAAAA,IAAI,CAAMC,QAAN,CAAA,GAAMA,CAAhB,UAAA,CACA,MAAO,CAAA,EAAA,OAAA,CAAA,OAAA,EAAA,KAAA,CAAA,IAAA,CAAA,CAAA,kBAAA,CAAiBH,WAAW,CAA5B,KAA4B,CAA5B,GAAA,IAAA,CAAA,kBAAA,CAAP,UAAO,CAAP,CAFF,CAAOC,CAAP,CAMF,IAAMC,CAAAA,IAAI,CAAMC,QAAN,CAAA,GAAMA,CAAhB,KAAA,CACA,MAAO,CAAA,EAAA,OAAA,CAAA,OAAA,EAAA,KAAA,CAAA,IAAA,CAAiBC,QAAjB,EAAA,IAAiBA,CAAjB,QAAiBA,CAAxB,KAAO,CAAP,CACD","sourcesContent":["import { useTheme } from './useTheme';\nimport get from 'lodash.get';\n\nexport function useToken<T extends string | number>(\n  property: string,\n  token: T | T[],\n  fallback?: T | T[]\n) {\n  const theme = useTheme();\n  if (Array.isArray(token)) {\n    let fallbackArr: T[] = [];\n    if (fallback) {\n      fallbackArr = Array.isArray(fallback) ? fallback : [fallback];\n    }\n    return token.map((innerToken, index) => {\n      const path = `${property}.${innerToken}`;\n      return get(theme, path, fallbackArr[index] ?? innerToken);\n    });\n  }\n\n  const path = `${property}.${token}`;\n  return get(theme, path, fallback ?? token);\n}\n"]},"metadata":{},"sourceType":"script"}