{"ast":null,"code":"import{useEffect,useRef}from\"react\";import{useLabel}from\"@react-aria/label\";import{useFocusable}from\"@react-aria/focus\";import{filterDOMProps,mergeProps}from\"@react-aria/utils\";import _babelRuntimeHelpersEsmExtends from\"@babel/runtime/helpers/esm/extends\";export function useTextField(props,ref){var _props$inputElementTy=props.inputElementType,inputElementType=_props$inputElementTy===void 0?'input':_props$inputElementTy,_props$isDisabled=props.isDisabled,isDisabled=_props$isDisabled===void 0?false:_props$isDisabled,_props$isRequired=props.isRequired,isRequired=_props$isRequired===void 0?false:_props$isRequired,_props$isReadOnly=props.isReadOnly,isReadOnly=_props$isReadOnly===void 0?false:_props$isReadOnly,validationState=props.validationState,_props$type=props.type,type=_props$type===void 0?'text':_props$type,_props$onChange=props.onChange,_onChange=_props$onChange===void 0?function(){}:_props$onChange;var _useFocusable=useFocusable(props,ref),focusableProps=_useFocusable.focusableProps;var _useLabel=useLabel(props),labelProps=_useLabel.labelProps,fieldProps=_useLabel.fieldProps;var domProps=filterDOMProps(props,{labelable:true});var inputOnlyProps={type:type,pattern:props.pattern};return{labelProps:labelProps,inputProps:mergeProps(domProps,inputElementType==='input'&&inputOnlyProps,_babelRuntimeHelpersEsmExtends({disabled:isDisabled,readOnly:isReadOnly,'aria-required':isRequired||undefined,'aria-invalid':validationState==='invalid'||undefined,'aria-errormessage':props['aria-errormessage'],'aria-activedescendant':props['aria-activedescendant'],'aria-autocomplete':props['aria-autocomplete'],'aria-haspopup':props['aria-haspopup'],value:props.value,defaultValue:props.value?undefined:props.defaultValue,onChange:function onChange(e){return _onChange(e.target.value);},autoComplete:props.autoComplete,maxLength:props.maxLength,minLength:props.minLength,name:props.name,placeholder:props.placeholder,inputMode:props.inputMode,onCopy:props.onCopy,onCut:props.onCut,onPaste:props.onPaste,onCompositionEnd:props.onCompositionEnd,onCompositionStart:props.onCompositionStart,onCompositionUpdate:props.onCompositionUpdate,onSelect:props.onSelect,onBeforeInput:props.onBeforeInput,onInput:props.onInput},focusableProps,fieldProps))};}function $c7e32867b2abc7e2d776d5c060056cb7$var$supportsNativeBeforeInputEvent(){return typeof window!=='undefined'&&window.InputEvent&&typeof InputEvent.prototype.getTargetRanges==='function';}export function useFormattedTextField(props,state,inputRef){var stateRef=useRef(state);stateRef.current=state;useEffect(function(){if(!$c7e32867b2abc7e2d776d5c060056cb7$var$supportsNativeBeforeInputEvent()){return;}var input=inputRef.current;var onBeforeInput=function onBeforeInput(e){var state=stateRef.current;var nextValue;switch(e.inputType){case'historyUndo':case'historyRedo':return;case'deleteContent':case'deleteByCut':case'deleteByDrag':nextValue=input.value.slice(0,input.selectionStart)+input.value.slice(input.selectionEnd);break;case'deleteContentForward':nextValue=input.selectionEnd===input.selectionStart?input.value.slice(0,input.selectionStart)+input.value.slice(input.selectionEnd+1):input.value.slice(0,input.selectionStart)+input.value.slice(input.selectionEnd);break;case'deleteContentBackward':nextValue=input.selectionEnd===input.selectionStart?input.value.slice(0,input.selectionStart-1)+input.value.slice(input.selectionStart):input.value.slice(0,input.selectionStart)+input.value.slice(input.selectionEnd);break;default:if(e.data!=null){nextValue=input.value.slice(0,input.selectionStart)+e.data+input.value.slice(input.selectionEnd);}break;}if(nextValue==null||!state.validate(nextValue)){e.preventDefault();}};input.addEventListener('beforeinput',onBeforeInput,false);return function(){input.removeEventListener('beforeinput',onBeforeInput,false);};},[inputRef,stateRef]);var onBeforeInput=!$c7e32867b2abc7e2d776d5c060056cb7$var$supportsNativeBeforeInputEvent()?function(e){var nextValue=e.target.value.slice(0,e.target.selectionStart)+e.data+e.target.value.slice(e.target.selectionEnd);if(!state.validate(nextValue)){e.preventDefault();}}:null;var _useTextField=useTextField(props,inputRef),labelProps=_useTextField.labelProps,textFieldProps=_useTextField.inputProps;var compositionStartState=useRef(null);return{inputProps:mergeProps(textFieldProps,{onBeforeInput:onBeforeInput,onCompositionStart:function onCompositionStart(){var _inputRef$current=inputRef.current,value=_inputRef$current.value,selectionStart=_inputRef$current.selectionStart,selectionEnd=_inputRef$current.selectionEnd;compositionStartState.current={value:value,selectionStart:selectionStart,selectionEnd:selectionEnd};},onCompositionEnd:function onCompositionEnd(){if(!state.validate(inputRef.current.value)){var _compositionStartStat=compositionStartState.current,value=_compositionStartStat.value,selectionStart=_compositionStartStat.selectionStart,selectionEnd=_compositionStartStat.selectionEnd;inputRef.current.value=value;inputRef.current.setSelectionRange(selectionStart,selectionEnd);state.setInputValue(value);}}}),labelProps:labelProps};}","map":{"version":3,"sources":["packages/@react-aria/textfield/src/useTextField.ts","packages/@react-aria/textfield/src/useFormattedTextField.ts"],"names":["inputElementType","isDisabled","isRequired","isReadOnly","type","onChange","focusableProps","useFocusable","fieldProps","useLabel","domProps","filterDOMProps","labelable","inputOnlyProps","pattern","props","labelProps","inputProps","mergeProps","disabled","readOnly","validationState","value","defaultValue","e","autoComplete","maxLength","minLength","name","placeholder","inputMode","onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onSelect","onBeforeInput","onInput","window","InputEvent","stateRef","useRef","useEffect","supportsNativeBeforeInputEvent","input","inputRef","state","nextValue","textFieldProps","compositionStartState","selectionEnd","selectionStart"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {ChangeEvent, InputHTMLAttributes, LabelHTMLAttributes, RefObject, TextareaHTMLAttributes} from 'react';\nimport {ElementType} from 'react';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useFocusable} from '@react-aria/focus';\nimport {useLabel} from '@react-aria/label';\n\nexport interface TextFieldAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>,\n  /** Props for the text field's visible label element (if any). */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>\n}\n\ninterface AriaTextFieldOptions extends AriaTextFieldProps {\n  /**\n   * The HTML element used to render the input, e.g. 'input', or 'textarea'.\n   * It determines whether certain HTML attributes will be included in `inputProps`.\n   * For example, [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type).\n   * @default 'input'\n   */\n  inputElementType?: ElementType\n}\n\n/**\n * Provides the behavior and accessibility implementation for a text field.\n * @param props - Props for the text field.\n * @param ref - Ref to the HTML input or textarea element.\n */\nexport function useTextField(\n  props: AriaTextFieldOptions,\n  ref: RefObject<HTMLInputElement | HTMLTextAreaElement>\n): TextFieldAria {\n  let {\n    inputElementType = 'input',\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    validationState,\n    type = 'text',\n    onChange = () => {}\n  } = props;\n  let {focusableProps} = useFocusable(props, ref);\n  let {labelProps, fieldProps} = useLabel(props);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  const inputOnlyProps = {\n    type,\n    pattern: props.pattern\n  };\n\n  return {\n    labelProps,\n    inputProps: mergeProps(\n      domProps,\n      inputElementType === 'input' && inputOnlyProps,\n      {\n        disabled: isDisabled,\n        readOnly: isReadOnly,\n        'aria-required': isRequired || undefined,\n        'aria-invalid': validationState === 'invalid' || undefined,\n        'aria-errormessage': props['aria-errormessage'],\n        'aria-activedescendant': props['aria-activedescendant'],\n        'aria-autocomplete': props['aria-autocomplete'],\n        'aria-haspopup': props['aria-haspopup'],\n        value: props.value,\n        defaultValue: props.value ? undefined : props.defaultValue,\n        onChange: (e: ChangeEvent<HTMLInputElement>) => onChange(e.target.value),\n        autoComplete: props.autoComplete,\n        maxLength: props.maxLength,\n        minLength: props.minLength,\n        name: props.name,\n        placeholder: props.placeholder,\n        inputMode: props.inputMode,\n\n        // Clipboard events\n        onCopy: props.onCopy,\n        onCut: props.onCut,\n        onPaste: props.onPaste,\n\n        // Composition events\n        onCompositionEnd: props.onCompositionEnd,\n        onCompositionStart: props.onCompositionStart,\n        onCompositionUpdate: props.onCompositionUpdate,\n\n        // Selection events\n        onSelect: props.onSelect,\n\n        // Input events\n        onBeforeInput: props.onBeforeInput,\n        onInput: props.onInput,\n        ...focusableProps,\n        ...fieldProps\n      }\n    )\n  };\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {mergeProps} from '@react-aria/utils';\nimport {RefObject, useEffect, useRef} from 'react';\nimport {TextFieldAria, useTextField} from './useTextField';\n\ninterface FormattedTextFieldState {\n  validate: (val: string) => boolean,\n  setInputValue: (val: string) => void\n}\n\n\nfunction supportsNativeBeforeInputEvent() {\n  return typeof window !== 'undefined' &&\n    window.InputEvent &&\n    // @ts-ignore\n    typeof InputEvent.prototype.getTargetRanges === 'function';\n}\n\nexport function useFormattedTextField(props: AriaTextFieldProps, state: FormattedTextFieldState, inputRef: RefObject<HTMLInputElement>): TextFieldAria {\n\n  let stateRef = useRef(state);\n  stateRef.current = state;\n\n  // All browsers implement the 'beforeinput' event natively except Firefox\n  // (currently behind a flag as of Firefox 84). React's polyfill does not\n  // run in all cases that the native event fires, e.g. when deleting text.\n  // Use the native event if available so that we can prevent invalid deletions.\n  // We do not attempt to polyfill this in Firefox since it would be very complicated,\n  // the benefit of doing so is fairly minor, and it's going to be natively supported soon.\n  useEffect(() => {\n    if (!supportsNativeBeforeInputEvent()) {\n      return;\n    }\n\n    let input = inputRef.current;\n\n    let onBeforeInput = (e: InputEvent) => {\n      let state = stateRef.current;\n\n      // Compute the next value of the input if the event is allowed to proceed.\n      // See https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes for a full list of input types.\n      let nextValue: string;\n      switch (e.inputType) {\n        case 'historyUndo':\n        case 'historyRedo':\n          // Explicitly allow undo/redo. e.data is null in this case, but there's no need to validate,\n          // because presumably the input would have already been validated previously.\n          return;\n        case 'deleteContent':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteContentForward':\n          // This is potentially incorrect, since the browser may actually delete more than a single UTF-16\n          // character. In reality, a full Unicode grapheme cluster consisting of multiple UTF-16 characters\n          // or code points may be deleted. However, in our currently supported locales, there are no such cases.\n          // If we support additional locales in the future, this may need to change.\n          nextValue = input.selectionEnd === input.selectionStart\n            ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1)\n            : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteContentBackward':\n          nextValue = input.selectionEnd === input.selectionStart\n            ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart)\n            : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        default:\n          if (e.data != null) {\n            nextValue =\n              input.value.slice(0, input.selectionStart) +\n              e.data +\n              input.value.slice(input.selectionEnd);\n          }\n          break;\n      }\n\n      // If we did not compute a value, or the new value is invalid, prevent the event\n      // so that the browser does not update the input text, move the selection, or add to\n      // the undo/redo stack.\n      if (nextValue == null || !state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    };\n\n    input.addEventListener('beforeinput', onBeforeInput, false);\n    return () => {\n      input.removeEventListener('beforeinput', onBeforeInput, false);\n    };\n  }, [inputRef, stateRef]);\n\n  let onBeforeInput = !supportsNativeBeforeInputEvent()\n    ? e => {\n      let nextValue =\n        e.target.value.slice(0, e.target.selectionStart) +\n        e.data +\n        e.target.value.slice(e.target.selectionEnd);\n\n      if (!state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    }\n    : null;\n\n  let {labelProps, inputProps: textFieldProps} = useTextField(props, inputRef);\n\n  let compositionStartState = useRef(null);\n  return {\n    inputProps: mergeProps(\n      textFieldProps,\n      {\n        onBeforeInput,\n        onCompositionStart() {\n          // Chrome does not implement Input Events Level 2, which specifies the insertFromComposition\n          // and deleteByComposition inputType values for the beforeinput event. These are meant to occur\n          // at the end of a composition (e.g. Pinyin IME, Android auto correct, etc.), and crucially, are\n          // cancelable. The insertCompositionText and deleteCompositionText input types are not cancelable,\n          // nor would we want to cancel them because the input from the user is incomplete at that point.\n          // In Safari, insertFromComposition/deleteFromComposition will fire, however, allowing us to cancel\n          // the final composition result if it is invalid. As a fallback for Chrome and Firefox, which either\n          // don't support Input Events Level 2, or beforeinput at all, we store the state of the input when\n          // the compositionstart event fires, and undo the changes in compositionend (below) if it is invalid.\n          // Unfortunately, this messes up the undo/redo stack, but until insertFromComposition/deleteByComposition\n          // are implemented, there is no other way to prevent composed input.\n          // See https://bugs.chromium.org/p/chromium/issues/detail?id=1022204\n          let {value, selectionStart, selectionEnd} = inputRef.current;\n          compositionStartState.current = {value, selectionStart, selectionEnd};\n        },\n        onCompositionEnd() {\n          if (!state.validate(inputRef.current.value)) {\n            // Restore the input value in the DOM immediately so we can synchronously update the selection position.\n            // But also update the value in React state as well so it is correct for future updates.\n            let {value, selectionStart, selectionEnd} = compositionStartState.current;\n            inputRef.current.value = value;\n            inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n            state.setInputValue(value);\n          }\n        }\n      }\n    ),\n    labelProps\n  };\n}\n"]},"metadata":{},"sourceType":"module"}