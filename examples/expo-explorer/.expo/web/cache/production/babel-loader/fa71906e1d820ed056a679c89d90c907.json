{"ast":null,"code":"import{isFocusVisible,useHover,usePress}from\"@react-aria/interactions\";import{getItemCount}from\"@react-stately/collections\";import{useSelectableList,useSelectableItem}from\"@react-aria/selection\";import _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from\"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";import{useOverlayTrigger}from\"@react-aria/overlays\";import{useId,filterDOMProps,mergeProps,useSlotId}from\"@react-aria/utils\";import _babelRuntimeHelpersEsmExtends from\"@babel/runtime/helpers/esm/extends\";export function useMenuTrigger(props,state,ref){var _props$type=props.type,type=_props$type===void 0?'menu':_props$type,isDisabled=props.isDisabled;var menuTriggerId=useId();var _useOverlayTrigger=useOverlayTrigger({type:type},state,ref),triggerProps=_useOverlayTrigger.triggerProps,overlayProps=_useOverlayTrigger.overlayProps;var onKeyDown=function onKeyDown(e){if(typeof e.isDefaultPrevented==='function'&&e.isDefaultPrevented()||e.defaultPrevented||isDisabled){return;}if(ref&&ref.current){switch(e.key){case'ArrowDown':case'Enter':case' ':e.preventDefault();e.stopPropagation();state.toggle('first');break;case'ArrowUp':e.preventDefault();e.stopPropagation();state.toggle('last');break;}}};return{menuTriggerProps:_babelRuntimeHelpersEsmExtends({},triggerProps,{id:menuTriggerId,onPressStart:function onPressStart(e){if(e.pointerType!=='touch'&&e.pointerType!=='keyboard'){state.toggle(e.pointerType==='virtual'?'first':null);}},onPress:function onPress(e){if(e.pointerType==='touch'){state.toggle();}},onKeyDown:onKeyDown}),menuProps:_babelRuntimeHelpersEsmExtends({},overlayProps,{'aria-labelledby':menuTriggerId})};}export function useMenu(props,state,ref){var _props$shouldFocusWra=props.shouldFocusWrap,shouldFocusWrap=_props$shouldFocusWra===void 0?true:_props$shouldFocusWra,otherProps=_babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props,[\"shouldFocusWrap\"]);if(!props['aria-label']&&!props['aria-labelledby']){console.warn('An aria-label or aria-labelledby prop is required for accessibility.');}var domProps=filterDOMProps(props,{labelable:true});var _useSelectableList=useSelectableList(_babelRuntimeHelpersEsmExtends({},otherProps,{ref:ref,selectionManager:state.selectionManager,collection:state.collection,disabledKeys:state.disabledKeys,shouldFocusWrap:shouldFocusWrap})),listProps=_useSelectableList.listProps;return{menuProps:mergeProps(domProps,_babelRuntimeHelpersEsmExtends({role:'menu'},listProps))};}export function useMenuItem(props,state,ref){var isSelected=props.isSelected,isDisabled=props.isDisabled,key=props.key,onClose=props.onClose,closeOnSelect=props.closeOnSelect,isVirtualized=props.isVirtualized,onAction=props.onAction;var role='menuitem';if(state.selectionManager.selectionMode==='single'){role='menuitemradio';}else if(state.selectionManager.selectionMode==='multiple'){role='menuitemcheckbox';}var labelId=useSlotId();var descriptionId=useSlotId();var keyboardId=useSlotId();var ariaProps={'aria-disabled':isDisabled,role:role,'aria-label':props['aria-label'],'aria-labelledby':labelId,'aria-describedby':[descriptionId,keyboardId].filter(Boolean).join(' ')||undefined};if(state.selectionManager.selectionMode!=='none'){ariaProps['aria-checked']=isSelected;}if(isVirtualized){ariaProps['aria-posinset']=state.collection.getItem(key).index;ariaProps['aria-setsize']=getItemCount(state.collection);}var onKeyDown=function onKeyDown(e){if(e.repeat){return;}switch(e.key){case' ':if(!isDisabled&&state.selectionManager.selectionMode==='none'&&closeOnSelect!==false&&onClose){onClose();}break;case'Enter':if(!isDisabled&&closeOnSelect!==false&&onClose){onClose();}break;}};var onPressStart=function onPressStart(e){if(e.pointerType==='keyboard'&&onAction){onAction(key);}};var onPressUp=function onPressUp(e){if(e.pointerType!=='keyboard'){if(onAction){onAction(key);}if(onClose&&(closeOnSelect!=null?closeOnSelect:state.selectionManager.selectionMode!=='multiple')){onClose();}}};var _useSelectableItem=useSelectableItem({selectionManager:state.selectionManager,key:key,ref:ref,shouldSelectOnPressUp:true}),itemProps=_useSelectableItem.itemProps;var _usePress=usePress(mergeProps({onPressStart:onPressStart,onPressUp:onPressUp,onKeyDown:onKeyDown,isDisabled:isDisabled},itemProps)),pressProps=_usePress.pressProps;var _useHover=useHover({isDisabled:isDisabled,onHoverStart:function onHoverStart(){if(!isFocusVisible()){state.selectionManager.setFocused(true);state.selectionManager.setFocusedKey(key);}}}),hoverProps=_useHover.hoverProps;return{menuItemProps:_babelRuntimeHelpersEsmExtends({},ariaProps,mergeProps(pressProps,hoverProps)),labelProps:{id:labelId},descriptionProps:{id:descriptionId},keyboardShortcutProps:{id:keyboardId}};}export function useMenuSection(props){var heading=props.heading,ariaLabel=props['aria-label'];var headingId=useId();return{itemProps:{role:'presentation'},headingProps:heading?{id:headingId,'aria-hidden':true}:{},groupProps:{role:'group','aria-label':ariaLabel,'aria-labelledby':heading?headingId:undefined}};}","map":{"version":3,"sources":["packages/@react-aria/menu/src/useMenuTrigger.ts","packages/@react-aria/menu/src/useMenu.ts","packages/@react-aria/menu/src/useMenuItem.ts","packages/@react-aria/menu/src/useMenuSection.ts"],"names":["type","isDisabled","menuTriggerId","useId","overlayProps","useOverlayTrigger","onKeyDown","e","ref","state","menuTriggerProps","id","onPressStart","onPress","menuProps","shouldFocusWrap","props","console","domProps","filterDOMProps","labelable","listProps","useSelectableList","selectionManager","collection","disabledKeys","mergeProps","role","onAction","labelId","useSlotId","descriptionId","keyboardId","ariaProps","undefined","getItemCount","closeOnSelect","onClose","onPressUp","itemProps","useSelectableItem","key","shouldSelectOnPressUp","pressProps","usePress","hoverProps","useHover","onHoverStart","isFocusVisible","menuItemProps","labelProps","descriptionProps","keyboardShortcutProps","ariaLabel","headingId","headingProps","heading","groupProps"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {HTMLAttributes, RefObject} from 'react';\nimport {MenuTriggerState} from '@react-stately/menu';\nimport {useId} from '@react-aria/utils';\nimport {useOverlayTrigger} from '@react-aria/overlays';\n\ninterface MenuTriggerAriaProps {\n  /** The type of menu that the menu trigger opens. */\n  type?: 'menu' | 'listbox',\n  /** Whether menu trigger is disabled. */\n  isDisabled?: boolean\n}\n\ninterface MenuTriggerAria {\n  /** Props for the menu trigger element. */\n  menuTriggerProps: AriaButtonProps,\n\n  /** Props for the menu. */\n  menuProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a menu trigger.\n * @param props - Props for the menu trigger.\n * @param state - State for the menu trigger.\n */\nexport function useMenuTrigger(props: MenuTriggerAriaProps, state: MenuTriggerState, ref: RefObject<HTMLElement>): MenuTriggerAria {\n  let {\n    type = 'menu' as MenuTriggerAriaProps['type'],\n    isDisabled\n  } = props;\n\n  let menuTriggerId = useId();\n  let {triggerProps, overlayProps} = useOverlayTrigger({type}, state, ref);\n\n  let onKeyDown = (e) => {\n    if ((typeof e.isDefaultPrevented === 'function' && e.isDefaultPrevented()) || e.defaultPrevented || isDisabled) {\n      return;\n    }\n\n    if (ref && ref.current) {\n      switch (e.key) {\n        case 'ArrowDown':\n        case 'Enter':\n        case ' ':\n          e.preventDefault();\n          e.stopPropagation();\n          state.toggle('first');\n          break;\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          state.toggle('last');\n          break;\n      }\n    }\n  };\n\n  return {\n    menuTriggerProps: {\n      ...triggerProps,\n      id: menuTriggerId,\n      onPressStart(e) {\n        // For consistency with native, open the menu on mouse/key down, but touch up.\n        if (e.pointerType !== 'touch' && e.pointerType !== 'keyboard') {\n          // If opened with a screen reader, auto focus the first item.\n          // Otherwise, the menu itself will be focused.\n          state.toggle(e.pointerType === 'virtual' ? 'first' : null);\n        }\n      },\n      onPress(e) {\n        if (e.pointerType === 'touch') {\n          state.toggle();\n        }\n      },\n      onKeyDown\n    },\n    menuProps: {\n      ...overlayProps,\n      'aria-labelledby': menuTriggerId\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaMenuProps} from '@react-types/menu';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, RefObject} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {TreeState} from '@react-stately/tree';\nimport {useSelectableList} from '@react-aria/selection';\n\ninterface MenuAria {\n  /** Props for the menu element. */\n  menuProps: HTMLAttributes<HTMLElement>\n}\n\ninterface AriaMenuOptions<T> extends AriaMenuProps<T> {\n  /** Whether the menu uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate\n}\n\n/**\n * Provides the behavior and accessibility implementation for a menu component.\n * A menu displays a list of actions or options that a user can choose.\n * @param props - Props for the menu.\n * @param state - State for the menu, as returned by `useListState`.\n */\nexport function useMenu<T>(props: AriaMenuOptions<T>, state: TreeState<T>, ref: RefObject<HTMLElement>): MenuAria {\n  let {\n    shouldFocusWrap = true,\n    ...otherProps\n  } = props;\n\n  if (!props['aria-label'] && !props['aria-labelledby']) {\n    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  }\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...otherProps,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    shouldFocusWrap\n  });\n\n  return {\n    menuProps: mergeProps(domProps, {\n      role: 'menu',\n      ...listProps\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getItemCount} from '@react-stately/collections';\nimport {HTMLAttributes, Key, RefObject} from 'react';\nimport {isFocusVisible, useHover, usePress} from '@react-aria/interactions';\nimport {mergeProps, useSlotId} from '@react-aria/utils';\nimport {PressEvent} from '@react-types/shared';\nimport {TreeState} from '@react-stately/tree';\nimport {useSelectableItem} from '@react-aria/selection';\n\ninterface MenuItemAria {\n  /** Props for the menu item element. */\n  menuItemProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the main text element inside the menu item. */\n  labelProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the description text element inside the menu item, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the keyboard shortcut text element inside the item, if any. */\n  keyboardShortcutProps: HTMLAttributes<HTMLElement>\n}\n\ninterface AriaMenuItemProps {\n  /** Whether the menu item is disabled. */\n  isDisabled?: boolean,\n\n  /** Whether the menu item is selected. */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the menu item. */\n  'aria-label'?: string,\n\n  /** The unique key for the menu item. */\n  key?: Key,\n\n  /** Handler that is called when the menu should close after selecting an item. */\n  onClose?: () => void,\n\n  /**\n   * Whether the menu should close when the menu item is selected.\n   * @default true\n   */\n  closeOnSelect?: boolean,\n\n  /** Whether the menu item is contained in a virtual scrolling menu. */\n  isVirtualized?: boolean,\n\n  /** Handler that is called when the user activates the item. */\n  onAction?: (key: Key) => void\n}\n\n/**\n * Provides the behavior and accessibility implementation for an item in a menu.\n * See `useMenu` for more details about menus.\n * @param props - Props for the item.\n * @param state - State for the menu, as returned by `useTreeState`.\n */\nexport function useMenuItem<T>(props: AriaMenuItemProps, state: TreeState<T>, ref: RefObject<HTMLElement>): MenuItemAria {\n  let {\n    isSelected,\n    isDisabled,\n    key,\n    onClose,\n    closeOnSelect,\n    isVirtualized,\n    onAction\n  } = props;\n\n  let role = 'menuitem';\n  if (state.selectionManager.selectionMode === 'single') {\n    role = 'menuitemradio';\n  } else if (state.selectionManager.selectionMode === 'multiple') {\n    role = 'menuitemcheckbox';\n  }\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n  let keyboardId = useSlotId();\n\n  let ariaProps = {\n    'aria-disabled': isDisabled,\n    role,\n    'aria-label': props['aria-label'],\n    'aria-labelledby': labelId,\n    'aria-describedby': [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined\n  };\n\n  if (state.selectionManager.selectionMode !== 'none') {\n    ariaProps['aria-checked'] = isSelected;\n  }\n\n  if (isVirtualized) {\n    ariaProps['aria-posinset'] = state.collection.getItem(key).index;\n    ariaProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Ignore repeating events, which may have started on the menu trigger before moving\n    // focus to the menu item. We want to wait for a second complete key press sequence.\n    if (e.repeat) {\n      return;\n    }\n\n    switch (e.key) {\n      case ' ':\n        if (!isDisabled && state.selectionManager.selectionMode === 'none' && closeOnSelect !== false && onClose) {\n          onClose();\n        }\n        break;\n      case 'Enter':\n        // The Enter key should always close on select, except if overridden.\n        if (!isDisabled && closeOnSelect !== false && onClose) {\n          onClose();\n        }\n        break;\n    }\n  };\n\n  let onPressStart = (e: PressEvent) => {\n    if (e.pointerType === 'keyboard' && onAction) {\n      onAction(key);\n    }\n  };\n\n  let onPressUp = (e: PressEvent) => {\n    if (e.pointerType !== 'keyboard') {\n      if (onAction) {\n        onAction(key);\n      }\n\n      // Pressing a menu item should close by default in single selection mode but not multiple\n      // selection mode, except if overridden by the closeOnSelect prop.\n      if (onClose && (closeOnSelect ?? state.selectionManager.selectionMode !== 'multiple')) {\n        onClose();\n      }\n    }\n  };\n\n  let {itemProps} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp: true\n  });\n\n  let {pressProps} = usePress(mergeProps({onPressStart, onPressUp, onKeyDown, isDisabled}, itemProps));\n  let {hoverProps} = useHover({\n    isDisabled,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    menuItemProps: {\n      ...ariaProps,\n      ...mergeProps(pressProps, hoverProps)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    keyboardShortcutProps: {\n      id: keyboardId\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\ninterface AriaMenuSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\ninterface MenuSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the heading element, if any. */\n  headingProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the group element. */\n  groupProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a menu.\n * See `useMenu` for more details about menus.\n * @param props - Props for the section.\n */\nexport function useMenuSection(props: AriaMenuSectionProps): MenuSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, menus cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}