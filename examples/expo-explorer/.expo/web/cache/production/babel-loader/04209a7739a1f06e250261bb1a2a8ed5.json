{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{getItemCount}from'@react-stately/collections';import{getItemId}from\"./utils\";import{isFocusVisible}from'@react-aria/interactions';import{useHover,usePress}from'@react-native-aria/interactions';import{isMac,isWebKit,mergeProps,useSlotId}from'@react-aria/utils';import{useSelectableItem}from'@react-aria/selection';import{useMapDomPropsToRN}from'@react-native-aria/utils';export function useOption(props,state,ref){var isSelected=props.isSelected,isDisabled=props.isDisabled,key=props.key,shouldSelectOnPressUp=props.shouldSelectOnPressUp,shouldFocusOnHover=props.shouldFocusOnHover,isVirtualized=props.isVirtualized,shouldUseVirtualFocus=props.shouldUseVirtualFocus;var labelId=useSlotId();var descriptionId=useSlotId();var _optionProps={'role':'option','aria-disabled':isDisabled,'aria-selected':isSelected};if(!(isMac()&&isWebKit())){_optionProps['aria-label']=props['aria-label'];_optionProps['aria-labelledby']=labelId;_optionProps['aria-describedby']=descriptionId;}if(isVirtualized){_optionProps['aria-posinset']=state.collection.getItem(key).index+1;_optionProps['aria-setsize']=getItemCount(state.collection);}var _useSelectableItem=useSelectableItem({selectionManager:state.selectionManager,key:key,ref:ref,shouldSelectOnPressUp:shouldSelectOnPressUp,isVirtualized:isVirtualized,shouldUseVirtualFocus:shouldUseVirtualFocus}),itemProps=_useSelectableItem.itemProps;var _usePress=usePress(_objectSpread(_objectSpread({},itemProps),{},{isDisabled:isDisabled,preventFocusOnPress:shouldUseVirtualFocus})),pressProps=_usePress.pressProps;var _useHover=useHover({isDisabled:isDisabled||!shouldFocusOnHover,onHoverStart:function onHoverStart(){if(!isFocusVisible()){state.selectionManager.setFocused(true);state.selectionManager.setFocusedKey(key);}}},ref),hoverProps=_useHover.hoverProps;var onMouseDown=function onMouseDown(e){return e.stopPropagation();};_optionProps=_objectSpread(_objectSpread(_objectSpread({},_optionProps),mergeProps(pressProps,hoverProps)),{},{id:getItemId(state,key),onMouseDown:onMouseDown});var optionProps=useMapDomPropsToRN(_optionProps,ref);return{optionProps:optionProps,labelProps:{nativeID:labelId},descriptionProps:{nativeID:descriptionId}};}","map":{"version":3,"sources":["useOption.web.ts"],"names":["shouldUseVirtualFocus","labelId","useSlotId","descriptionId","_optionProps","isSelected","isMac","isWebKit","props","state","getItemCount","itemProps","useSelectableItem","selectionManager","key","ref","shouldSelectOnPressUp","isVirtualized","pressProps","usePress","isDisabled","preventFocusOnPress","hoverProps","useHover","onHoverStart","isFocusVisible","onMouseDown","e","mergeProps","id","getItemId","optionProps","useMapDomPropsToRN","labelProps","nativeID","descriptionProps"],"mappings":"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","sourcesContent":["import { getItemCount } from '@react-stately/collections';\nimport { getItemId } from './utils';\nimport { Key, RefObject } from 'react';\nimport { isFocusVisible } from '@react-aria/interactions';\nimport { useHover, usePress } from '@react-native-aria/interactions';\nimport { isMac, isWebKit, mergeProps, useSlotId } from '@react-aria/utils';\nimport { ListState } from '@react-stately/list';\nimport { useSelectableItem } from '@react-aria/selection';\nimport { useMapDomPropsToRN } from '@react-native-aria/utils';\n\ninterface OptionAria {\n  /** Props for the option element. */\n  optionProps: any;\n\n  /** Props for the main text element inside the option. */\n  labelProps: any;\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: any;\n}\n\ninterface AriaOptionProps {\n  /** Whether the option is disabled. */\n  'isDisabled'?: boolean;\n\n  /** Whether the option is selected. */\n  'isSelected'?: boolean;\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string;\n\n  /** The unique key for the option. */\n  'key'?: Key;\n\n  /** Whether selection should occur on press up instead of press down. */\n  'shouldSelectOnPressUp'?: boolean;\n\n  /** Whether the option should be focused when the user hovers over it. */\n  'shouldFocusOnHover'?: boolean;\n\n  /** Whether the option is contained in a virtual scrolling listbox. */\n  'isVirtualized'?: boolean;\n\n  /** Whether the option should use virtual focus instead of being focused directly. */\n  'shouldUseVirtualFocus'?: boolean;\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(\n  props: AriaOptionProps,\n  state: ListState<T>,\n  ref: RefObject<HTMLElement>\n): OptionAria {\n  let {\n    isSelected,\n    isDisabled,\n    key,\n    shouldSelectOnPressUp,\n    shouldFocusOnHover,\n    isVirtualized,\n    shouldUseVirtualFocus,\n  } = props;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let _optionProps: any = {\n    'role': 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': isSelected,\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    _optionProps['aria-label'] = props['aria-label'];\n    _optionProps['aria-labelledby'] = labelId;\n    _optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    //@ts-ignore\n    _optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    _optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let { itemProps } = useSelectableItem({\n    selectionManager: state.selectionManager,\n    //@ts-ignore\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n  });\n\n  let { pressProps } = usePress({\n    ...itemProps,\n    isDisabled,\n    preventFocusOnPress: shouldUseVirtualFocus,\n  });\n\n  let { hoverProps } = useHover(\n    {\n      isDisabled: isDisabled || !shouldFocusOnHover,\n      onHoverStart() {\n        if (!isFocusVisible()) {\n          state.selectionManager.setFocused(true);\n          //@ts-ignore\n          state.selectionManager.setFocusedKey(key);\n        }\n      },\n    },\n    ref\n  );\n\n  // Putting this as a last resort, after several hours of debugging.\n  // Why?\n  // tabListProps adds onMouseDown with preventDefault in useSelectableCollection.ts (React Aria) and react-native-web uses onClick for onPress.\n  // This results in tab button not getting focused when clicked\n  // See this example - https://codesandbox.io/s/issue-i-know-but-dont-know-why-1-ydyw5?file=/src/App.js\n  const onMouseDown = (e: any) => e.stopPropagation();\n\n  _optionProps = {\n    ..._optionProps,\n    ...mergeProps(pressProps, hoverProps),\n    //@ts-ignore\n    id: getItemId(state, key),\n    onMouseDown,\n  };\n\n  const optionProps = useMapDomPropsToRN(_optionProps, ref);\n\n  return {\n    optionProps,\n    labelProps: {\n      nativeID: labelId,\n    },\n    descriptionProps: {\n      nativeID: descriptionId,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}