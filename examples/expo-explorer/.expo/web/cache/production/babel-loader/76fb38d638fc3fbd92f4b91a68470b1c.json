{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.usePropsResolution=usePropsResolution;var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _lodash=_interopRequireDefault(require(\"lodash.get\"));var _lodash2=_interopRequireDefault(require(\"lodash.omit\"));var _lodash3=_interopRequireDefault(require(\"lodash.isnil\"));var _lodash4=_interopRequireDefault(require(\"lodash.merge\"));var _reactNative=require(\"react-native-web/dist/index\");var _useNativeBase2=require(\"../useNativeBase\");var _usePlatformProps=require(\"../usePlatformProps\");var _useColorModeProps=require(\"../useColorModeProps\");var _colorMode=require(\"../../core/color-mode\");var _utils=require(\"./utils\");var _tools=require(\"./../../theme/tools\");var _base=require(\"./../../theme/base\");var _useContrastText=require(\"../useContrastText\");var _react=_interopRequireDefault(require(\"react\"));var simplifyComponentTheme=function simplifyComponentTheme(theme,componentTheme,incomingProps,colorModeProps,currentBreakpoint){var combinedProps=(0,_extends2.default)({},componentTheme.defaultProps,incomingProps);var componentBaseStyle={};if(componentTheme.baseStyle){componentBaseStyle=typeof componentTheme.baseStyle!=='function'?componentTheme.baseStyle:componentTheme.baseStyle((0,_extends2.default)({theme:theme},combinedProps,colorModeProps));}var variant=(0,_utils.resolveValueWithBreakpoint)(combinedProps.variant,currentBreakpoint,'variant');var componentVariantProps={};if(variant&&componentTheme.variants&&componentTheme.variants[variant]){componentVariantProps=typeof componentTheme.variants[variant]!=='function'?componentTheme.variants[variant]:componentTheme.variants[variant]((0,_extends2.default)({theme:theme},combinedProps,colorModeProps));incomingProps.variant=undefined;}var size=(0,_utils.resolveValueWithBreakpoint)(combinedProps.size,currentBreakpoint,'size');var componentSizeProps={};if(size&&componentTheme.sizes&&componentTheme.sizes[size]){if(typeof componentTheme.sizes[size]==='string'||typeof componentTheme.sizes[size]==='number'){componentSizeProps.size=componentTheme.sizes[size];}else if(typeof componentTheme.sizes[size]==='function'){componentSizeProps=componentTheme.sizes[size]((0,_extends2.default)({theme:theme},combinedProps,colorModeProps));}else{componentSizeProps=componentTheme.sizes[size];}incomingProps.size=undefined;}var componentMergedTheme=(0,_lodash4.default)({},componentTheme.defaultProps,componentBaseStyle,componentVariantProps,componentSizeProps);return componentMergedTheme;};var propTranslator=function propTranslator(_ref){var props=_ref.props,theme=_ref.theme,colorModeProps=_ref.colorModeProps,componentTheme=_ref.componentTheme,currentBreakpoint=_ref.currentBreakpoint;var translatedProps={};for(var property in props){if(property.startsWith('_')){var nestedTranslatedProps=propTranslator({props:props[property],theme:theme,colorModeProps:colorModeProps,componentTheme:componentTheme,currentBreakpoint:currentBreakpoint});translatedProps[property]=nestedTranslatedProps;}else if(_base.themePropertyMap[property]){var propValues=(0,_utils.extractPropertyFromFunction)(property,props,theme,componentTheme);if(typeof propValues==='string'||typeof propValues==='number'){translatedProps[property]=propValues;}else if(!(0,_lodash3.default)(propValues)){for(var nestedProp in propValues){translatedProps[nestedProp]=(0,_lodash.default)(theme,_base.themePropertyMap[nestedProp]+\".\"+propValues[nestedProp],propValues[nestedProp]);}delete translatedProps[property];}else if(property==='shadow'){var resolveValueWithBreakpointValue=(0,_utils.resolveValueWithBreakpoint)(props.shadow,currentBreakpoint,property);var shadowProps=theme[_base.themePropertyMap[property]](colorModeProps)[resolveValueWithBreakpointValue];translatedProps.style=(0,_lodash4.default)({},shadowProps,props.style);delete translatedProps[property];}else{translatedProps[property]=(0,_utils.resolveValueWithBreakpoint)(props[property],currentBreakpoint,property);}}else{translatedProps[property]=(0,_utils.resolveValueWithBreakpoint)(props[property],currentBreakpoint,property);}}return translatedProps;};function usePropsResolution(component,incomingProps,config){var _useWindowDimensions,_componentThemeIntegr,_componentThemeIntegr2,_componentThemeIntegr3,_componentThemeIntegr4,_ref2,_translatedProps$bg,_translatedProps$_tex;var _extractInObject=(0,_tools.extractInObject)(incomingProps,['children','onPress','icon','onOpen','onClose'].concat((config==null?void 0:config.ignoreProps)||[])),_extractInObject2=(0,_slicedToArray2.default)(_extractInObject,2),ignoredProps=_extractInObject2[0],cleanIncomingProps=_extractInObject2[1];var _useNativeBase=(0,_useNativeBase2.useNativeBase)(),theme=_useNativeBase.theme;var colorModeProps=(0,_colorMode.useColorMode)();var componentTheme=(0,_lodash.default)(theme,\"components.\"+component,{});var notComponentTheme=(0,_lodash2.default)(theme,['components']);var windowWidth=(_useWindowDimensions=(0,_reactNative.useWindowDimensions)())==null?void 0:_useWindowDimensions.width;var currentBreakpoint=_react.default.useMemo(function(){return(0,_tools.getClosestBreakpoint)(theme.breakpoints,windowWidth);},[windowWidth,theme.breakpoints]);var componentThemeObject=simplifyComponentTheme(notComponentTheme,componentTheme,cleanIncomingProps,colorModeProps,currentBreakpoint);var componentThemeIntegratedProps=(0,_lodash4.default)({},(0,_useColorModeProps.useColorModeProps)((0,_usePlatformProps.usePlatformProps)(componentThemeObject)),(0,_useColorModeProps.useColorModeProps)((0,_usePlatformProps.usePlatformProps)(cleanIncomingProps)));var ignore=[];if((_componentThemeIntegr=componentThemeIntegratedProps.bg)!=null&&_componentThemeIntegr.linearGradient||(_componentThemeIntegr2=componentThemeIntegratedProps.background)!=null&&_componentThemeIntegr2.linearGradient||(_componentThemeIntegr3=componentThemeIntegratedProps.bgColor)!=null&&_componentThemeIntegr3.linearGradient||(_componentThemeIntegr4=componentThemeIntegratedProps.backgroundColor)!=null&&_componentThemeIntegr4.linearGradient){var _componentThemeIntegr5,_componentThemeIntegr6,_componentThemeIntegr7;var bgProp='bg';if((_componentThemeIntegr5=componentThemeIntegratedProps.background)!=null&&_componentThemeIntegr5.linearGradient){bgProp='background';}else if((_componentThemeIntegr6=componentThemeIntegratedProps.bgColor)!=null&&_componentThemeIntegr6.linearGradient){bgProp='bgColor';}else if((_componentThemeIntegr7=componentThemeIntegratedProps.backgroundColor)!=null&&_componentThemeIntegr7.linearGradient){bgProp='backgroundColor';}componentThemeIntegratedProps[bgProp].linearGradient.colors=componentThemeIntegratedProps[bgProp].linearGradient.colors.map(function(color){return(0,_lodash.default)(theme.colors,color,color);});ignore=['bg','background','backgroundColor','bgColor'];}var _extractInObject3=(0,_tools.extractInObject)(componentThemeIntegratedProps,ignore),_extractInObject4=(0,_slicedToArray2.default)(_extractInObject3,2),gradientProps=_extractInObject4[0],nonGradientProps=_extractInObject4[1];var translatedProps=propTranslator({props:nonGradientProps,theme:notComponentTheme,colorModeProps:colorModeProps,componentTheme:componentTheme,currentBreakpoint:currentBreakpoint});var bgColor=(_ref2=(_translatedProps$bg=translatedProps.bg)!=null?_translatedProps$bg:translatedProps.backgroundColor)!=null?_ref2:translatedProps.bgColor;var contrastTextColor=(0,_useContrastText.useContrastText)(bgColor,translatedProps==null?void 0:(_translatedProps$_tex=translatedProps._text)==null?void 0:_translatedProps$_tex.color);translatedProps._text=contrastTextColor?(0,_extends2.default)({color:contrastTextColor},translatedProps._text):translatedProps._text;var resolvedProps=(0,_tools.omitUndefined)((0,_extends2.default)({},translatedProps,ignoredProps,gradientProps));return resolvedProps;}","map":{"version":3,"sources":["usePropsResolution.tsx"],"names":["simplifyComponentTheme","combinedProps","componentTheme","componentBaseStyle","theme","variant","componentVariantProps","incomingProps","size","componentSizeProps","componentMergedTheme","propTranslator","props","colorModeProps","currentBreakpoint","translatedProps","property","nestedTranslatedProps","themePropertyMap","propValues","resolveValueWithBreakpointValue","shadowProps","ignoredProps","cleanIncomingProps","notComponentTheme","windowWidth","React","componentThemeObject","componentThemeIntegratedProps","ignore","bgProp","gradientProps","nonGradientProps","bgColor","contrastTextColor","color","resolvedProps"],"mappings":"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","sourcesContent":["import get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport isNil from 'lodash.isnil';\nimport merge from 'lodash.merge';\nimport { useWindowDimensions } from 'react-native';\nimport { useNativeBase } from '../useNativeBase';\nimport { usePlatformProps } from '../usePlatformProps';\nimport { useColorModeProps } from '../useColorModeProps';\nimport { useColorMode } from '../../core/color-mode';\nimport {\n  resolveValueWithBreakpoint,\n  extractPropertyFromFunction,\n} from './utils';\nimport {\n  getClosestBreakpoint,\n  omitUndefined,\n  extractInObject,\n} from './../../theme/tools';\nimport { themePropertyMap } from './../../theme/base';\nimport { useContrastText } from '../useContrastText';\nimport React from 'react';\n\n/**\n * @summary Resolves, simplify and merge components specific theme.\n * @description The function extract and execute component specifc theme (i.e., `defaultProps`, `baseStyle` and `variants`) and returns a merged and simplified object.\n * @arg {string} theme - Theme object of NativeBase (without component theme).\n * @arg {object} componentTheme - Theme for specific components.\n * @arg {object} incomingProps - Props passed by the user.\n * @arg {object} colorModeProps - `colorMode` object.\n * @returns {object} Resolved component specific theme.\n */\nconst simplifyComponentTheme = (\n  theme: object,\n  componentTheme: {\n    defaultProps?: object;\n    baseStyle?: object | Function;\n    variants?: any | Function;\n    sizes?: any | Function;\n  },\n  incomingProps: object,\n  colorModeProps: object,\n  currentBreakpoint: number\n) => {\n  // Resolving component's defaultProps.\n\n  const combinedProps: any = {\n    ...componentTheme.defaultProps,\n    ...incomingProps,\n  };\n\n  // Resolving component's baseStyle\n  let componentBaseStyle = {};\n  if (componentTheme.baseStyle) {\n    componentBaseStyle =\n      typeof componentTheme.baseStyle !== 'function'\n        ? componentTheme.baseStyle\n        : componentTheme.baseStyle({\n            theme,\n            ...combinedProps,\n            ...colorModeProps,\n          });\n  }\n\n  const variant = resolveValueWithBreakpoint(\n    combinedProps.variant,\n    currentBreakpoint,\n    'variant'\n  );\n\n  let componentVariantProps = {};\n  // Extracting props from variant\n  if (variant && componentTheme.variants && componentTheme.variants[variant]) {\n    componentVariantProps =\n      typeof componentTheme.variants[variant] !== 'function'\n        ? componentTheme.variants[variant]\n        : componentTheme.variants[variant]({\n            theme,\n            ...combinedProps,\n            ...colorModeProps,\n          });\n\n    // We remove variant from original props if we found it in the componentTheme\n    //@ts-ignore\n    incomingProps.variant = undefined;\n  }\n\n  const size = resolveValueWithBreakpoint(\n    combinedProps.size,\n    currentBreakpoint,\n    'size'\n  );\n\n  let componentSizeProps = {};\n  // Extracting props from size\n  if (size && componentTheme.sizes && componentTheme.sizes[size]) {\n    // Type - sizes: {lg: 1}. Refer icon theme\n    if (\n      typeof componentTheme.sizes[size] === 'string' ||\n      typeof componentTheme.sizes[size] === 'number'\n    ) {\n      //@ts-ignore\n      componentSizeProps.size = componentTheme.sizes[size];\n    }\n    // Type - sizes: (props) => ({lg: {px: 1}}). Refer heading theme\n    else if (typeof componentTheme.sizes[size] === 'function') {\n      componentSizeProps = componentTheme.sizes[size]({\n        theme,\n        ...combinedProps,\n        ...colorModeProps,\n      });\n    }\n    // Type - sizes: {lg: {px: 1}}. Refer button theme\n    else {\n      componentSizeProps = componentTheme.sizes[size];\n    }\n\n    // We remove size from original props if we found it in the componentTheme\n    //@ts-ignore\n    incomingProps.size = undefined;\n  }\n\n  const componentMergedTheme = merge(\n    {},\n    componentTheme.defaultProps,\n    componentBaseStyle,\n    componentVariantProps,\n    componentSizeProps\n  );\n\n  return componentMergedTheme;\n};\n\n/**\n * @summary Translates the prop with it's appropriate value.\n * @description NOTE: Avoid passo  JSX and functions.\n * @arg {any} props - Props object with should be translated.\n * @arg {any} theme - Theme based on which props will be translated.\n * @arg {object} colorModeProps - `colorMode` object.\n * @arg {object} componentTheme - Theme for specific components.\n * @arg {object} windowWidth - Current width of the window / screen.\n * @returns {object} Translated props object.\n */\n// Todo - move responsive calculation in styled system\nconst propTranslator = ({\n  props,\n  theme,\n  colorModeProps,\n  componentTheme,\n  currentBreakpoint,\n}: {\n  props: any;\n  theme: any;\n  colorModeProps: object;\n  componentTheme: object;\n  currentBreakpoint: number;\n}) => {\n  let translatedProps: any = {};\n  for (const property in props) {\n    // STEP 1 - Responsive prop check and resolve\n    if (property.startsWith('_')) {\n      // STEP 1.a - Resolving _ porps\n      const nestedTranslatedProps = propTranslator({\n        props: props[property],\n        theme,\n        colorModeProps,\n        componentTheme,\n        currentBreakpoint,\n      });\n      translatedProps[property] = nestedTranslatedProps;\n    } else if (themePropertyMap[property]) {\n      // STEP 1.b Resolving themed props\n      const propValues = extractPropertyFromFunction(\n        property,\n        props,\n        theme,\n        componentTheme\n      );\n\n      // NOTE: Direct value identified.\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        translatedProps[property] = propValues;\n        // NOTE: Nested object (excluding _props) (To be specific, only for key exist in themePropertyMap)\n      } else if (!isNil(propValues)) {\n        // TODO: This setion new needs to handle stuff differently\n        for (let nestedProp in propValues) {\n          translatedProps[nestedProp] = get(\n            theme,\n            `${themePropertyMap[nestedProp]}.${propValues[nestedProp]}`,\n            propValues[nestedProp]\n          );\n        }\n        delete translatedProps[property];\n        // Manually handeling shadow props (example of Mapped tokens)\n      } else if (property === 'shadow') {\n        const resolveValueWithBreakpointValue = resolveValueWithBreakpoint(\n          props.shadow,\n          currentBreakpoint,\n          property\n        );\n        let shadowProps = theme[themePropertyMap[property]](colorModeProps)[\n          resolveValueWithBreakpointValue\n        ];\n        translatedProps.style = merge({}, shadowProps, props.style);\n        delete translatedProps[property];\n      } else {\n        translatedProps[property] = resolveValueWithBreakpoint(\n          props[property],\n          currentBreakpoint,\n          property\n        );\n      }\n    } else {\n      // STEP 1.d Resolving Direct Values\n      translatedProps[property] = resolveValueWithBreakpoint(\n        props[property],\n        currentBreakpoint,\n        property\n      );\n    }\n  }\n\n  return translatedProps;\n};\n\n/**\n * @summary Combines provided porps with component's theme props and resloves them.\n * @description NOTE: Avoid passing JSX and functions.\n * @arg {string} component - Name of the component.\n * @arg {object} incomingProps - Props passed by the user.\n * @returns {object} Resolved props.\n */\nexport function usePropsResolution(\n  component: string,\n  incomingProps: any,\n  config?: any\n) {\n  const [ignoredProps, cleanIncomingProps] = extractInObject(\n    incomingProps,\n    ['children', 'onPress', 'icon', 'onOpen', 'onClose'].concat(\n      config?.ignoreProps || []\n    )\n  );\n\n  const { theme } = useNativeBase();\n  const colorModeProps = useColorMode();\n\n  const componentTheme = get(theme, `components.${component}`, {});\n  const notComponentTheme = omit(theme, ['components']);\n  const windowWidth = useWindowDimensions()?.width;\n\n  const currentBreakpoint = React.useMemo(\n    () => getClosestBreakpoint(theme.breakpoints, windowWidth),\n    [windowWidth, theme.breakpoints]\n  );\n\n  // TODO: using usePlatformProps here to simplify the component theme. So that on on component level it shouldn't have to maintain the Specificity.\n  const componentThemeObject = simplifyComponentTheme(\n    notComponentTheme,\n    componentTheme,\n    cleanIncomingProps,\n    colorModeProps,\n    currentBreakpoint\n  );\n  const componentThemeIntegratedProps = merge(\n    {},\n    useColorModeProps(usePlatformProps(componentThemeObject)),\n    useColorModeProps(usePlatformProps(cleanIncomingProps))\n  );\n  // const platformSpecificProps = usePlatformProps(componentThemeIntegratedProps);\n\n  // NOTE: sperating removing props while should be translated\n  let ignore: any = [];\n  if (\n    componentThemeIntegratedProps.bg?.linearGradient ||\n    componentThemeIntegratedProps.background?.linearGradient ||\n    componentThemeIntegratedProps.bgColor?.linearGradient ||\n    componentThemeIntegratedProps.backgroundColor?.linearGradient\n  ) {\n    let bgProp = 'bg';\n    if (componentThemeIntegratedProps.background?.linearGradient) {\n      bgProp = 'background';\n    } else if (componentThemeIntegratedProps.bgColor?.linearGradient) {\n      bgProp = 'bgColor';\n    } else if (componentThemeIntegratedProps.backgroundColor?.linearGradient) {\n      bgProp = 'backgroundColor';\n    }\n    componentThemeIntegratedProps[\n      bgProp\n    ].linearGradient.colors = componentThemeIntegratedProps[\n      bgProp\n    ].linearGradient.colors.map((color: string) => {\n      return get(theme.colors, color, color);\n    });\n    ignore = ['bg', 'background', 'backgroundColor', 'bgColor'];\n  }\n  // NOTE: seprating bg props when linearGardiant is available\n  const [gradientProps, nonGradientProps] = extractInObject(\n    componentThemeIntegratedProps,\n    ignore\n  );\n\n  const translatedProps = propTranslator({\n    props: nonGradientProps,\n    theme: notComponentTheme,\n    colorModeProps,\n    componentTheme,\n    currentBreakpoint,\n  });\n\n  let bgColor =\n    translatedProps.bg ??\n    translatedProps.backgroundColor ??\n    translatedProps.bgColor;\n\n  const contrastTextColor = useContrastText(\n    bgColor,\n    translatedProps?._text?.color\n  );\n\n  translatedProps._text = contrastTextColor\n    ? {\n        color: contrastTextColor,\n        ...translatedProps._text,\n      }\n    : translatedProps._text;\n\n  const resolvedProps = omitUndefined({\n    ...translatedProps,\n    ...ignoredProps,\n    ...gradientProps,\n  });\n\n  return resolvedProps;\n}\n"]},"metadata":{},"sourceType":"script"}