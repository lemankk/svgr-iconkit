{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useControlledState}from\"@react-stately/utils\";export function useCheckboxGroupState(props){if(props===void 0){props={};}var _useControlledState=useControlledState(props.value,props.defaultValue||[],props.onChange),_useControlledState2=_slicedToArray(_useControlledState,2),selectedValues=_useControlledState2[0],_setValue=_useControlledState2[1];var state={value:selectedValues,setValue:function setValue(value){if(props.isReadOnly||props.isDisabled){return;}_setValue(value);},isDisabled:props.isDisabled||false,isReadOnly:props.isReadOnly||false,isSelected:function isSelected(value){return selectedValues.includes(value);},addValue:function addValue(value){if(props.isReadOnly||props.isDisabled){return;}_setValue(function(values){if(!values.includes(value)){return values.concat(value);}return values;});},removeValue:function removeValue(value){if(props.isReadOnly||props.isDisabled){return;}_setValue(function(values){if(values.includes(value)){return values.filter(function(existingValue){return existingValue!==value;});}return values;});},toggleValue:function toggleValue(value){if(props.isReadOnly||props.isDisabled){return;}_setValue(function(values){if(values.includes(value)){return values.filter(function(existingValue){return existingValue!==value;});}return values.concat(value);});}};return state;}","map":{"version":3,"sources":["packages/@react-stately/checkbox/src/useCheckboxGroupState.ts"],"names":["props","useControlledState","state","value","setValue","isDisabled","isReadOnly","isSelected","selectedValues","addValue","values","removeValue","existingValue","toggleValue"],"mappings":"4HA6CO,SAAA,CAAA,qBAAA,CAAA,KAAA,CAAmF,CAAA,GAApDA,KAAoD,GAAA,IAAA,EAAA,CAAA,CAApDA,KAAoD,CAAxB,EAA5BA,CAAoD,CACxF,wBAAiCC,kBAAkB,CAACD,KAAK,CAAN,KAAA,CAAcA,KAAK,CAALA,YAAAA,EAAd,EAAA,CAAwCA,KAAK,CAAhG,QAAmD,CAAnD,4DAAI,cAAJ,yBAAI,SAAJ,yBAEA,GAAME,CAAAA,KAAyB,CAAG,CAChCC,KAAK,CAD2B,cAAA,CAEhCC,QAFgC,mBAExB,KAFwB,CAEhB,CACd,GAAIJ,KAAK,CAALA,UAAAA,EAAoBA,KAAK,CAA7B,UAAA,CAA0C,CACxC,OACD,CAEDI,SAAQ,CAARA,KAAQ,CAARA,CAP8B,CAAA,CAShCC,UAAU,CAAEL,KAAK,CAALA,UAAAA,EAToB,KAAA,CAUhCM,UAAU,CAAEN,KAAK,CAALA,UAAAA,EAVoB,KAAA,CAWhCO,UAXgC,qBAWtB,KAXsB,CAWd,CAChB,MAAOC,CAAAA,cAAc,CAAdA,QAAAA,CAAP,KAAOA,CAAP,CAZ8B,CAAA,CAchCC,QAdgC,mBAcxB,KAdwB,CAchB,CACd,GAAIT,KAAK,CAALA,UAAAA,EAAoBA,KAAK,CAA7B,UAAA,CAA0C,CACxC,OACD,CACDI,SAAQ,CAACM,SAAAA,MAAM,CAAI,CACjB,GAAI,CAACA,MAAM,CAANA,QAAAA,CAAL,KAAKA,CAAL,CAA6B,CAC3B,MAAOA,CAAAA,MAAM,CAANA,MAAAA,CAAP,KAAOA,CAAP,CACD,CACD,MAAA,CAAA,MAAA,CAJFN,CAAQ,CAARA,CAlB8B,CAAA,CAyBhCO,WAzBgC,sBAyBrB,KAzBqB,CAyBb,CACjB,GAAIX,KAAK,CAALA,UAAAA,EAAoBA,KAAK,CAA7B,UAAA,CAA0C,CACxC,OACD,CACDI,SAAQ,CAACM,SAAAA,MAAM,CAAI,CACjB,GAAIA,MAAM,CAANA,QAAAA,CAAJ,KAAIA,CAAJ,CAA4B,CAC1B,MAAOA,CAAAA,MAAM,CAANA,MAAAA,CAAcE,SAAAA,aAAa,QAAIA,CAAAA,aAAa,GAAnD,KAAkC,EAA3BF,CAAP,CACD,CACD,MAAA,CAAA,MAAA,CAJFN,CAAQ,CAARA,CA7B8B,CAAA,CAoChCS,WApCgC,sBAoCrB,KApCqB,CAoCb,CACjB,GAAIb,KAAK,CAALA,UAAAA,EAAoBA,KAAK,CAA7B,UAAA,CAA0C,CACxC,OACD,CACDI,SAAQ,CAACM,SAAAA,MAAM,CAAI,CACjB,GAAIA,MAAM,CAANA,QAAAA,CAAJ,KAAIA,CAAJ,CAA4B,CAC1B,MAAOA,CAAAA,MAAM,CAANA,MAAAA,CAAcE,SAAAA,aAAa,QAAIA,CAAAA,aAAa,GAAnD,KAAkC,EAA3BF,CAAP,CACD,CACD,MAAOA,CAAAA,MAAM,CAANA,MAAAA,CAAP,KAAOA,CAAP,CAJFN,CAAQ,CAARA,CAMD,CA9C+B,CAAlC,CAiDA,MAAA,CAAA,KAAA,CACD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface CheckboxGroupState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n\n  const state: CheckboxGroupState = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (!values.includes(value)) {\n          return values.concat(value);\n        }\n        return values;\n      });\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n        return values;\n      });\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n        return values.concat(value);\n      });\n    }\n  };\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}