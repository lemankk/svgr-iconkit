{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _react=_interopRequireWildcard(require(\"react\"));var _Input=require(\"../Input\");var _useThemeProps=require(\"../../../hooks/useThemeProps\");var _this=this,_jsxFileName=\"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/primitives/TextArea/index.tsx\";var TextArea=function TextArea(_ref,ref){var wrapperRef=_ref.wrapperRef,props=(0,_objectWithoutProperties2.default)(_ref,[\"wrapperRef\"]);var _usePropsResolution=(0,_useThemeProps.usePropsResolution)('TextArea',props),totalLines=_usePropsResolution.totalLines,newProps=(0,_objectWithoutProperties2.default)(_usePropsResolution,[\"totalLines\"]);return _react.default.createElement(_Input.Input,(0,_extends2.default)({},newProps,{numberOfLines:totalLines,wrapperRef:wrapperRef,ref:ref,__self:_this,__source:{fileName:_jsxFileName,lineNumber:14,columnNumber:5}}));};var _default=(0,_react.memo)((0,_react.forwardRef)(TextArea));exports.default=_default;","map":{"version":3,"sources":["index.tsx"],"names":["TextArea","wrapperRef","props","totalLines","newProps"],"mappings":"wbAAA,GAAA,CAAA,MAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,OAAA,YAAA,CACA,GAAA,CAAA,cAAA,CAAA,OAAA,gCAAA,C,oIAQA,GAAMA,CAAAA,QAAQ,CAARA,QAAAA,CAAAA,QAAAA,CAAW,IAAXA,CAAW,GAAXA,CAAmE,CAArDC,GAAAA,CAAAA,UAAqD,CAAA,IAAA,CAArDA,UAAAA,CAAeC,KAAsC,CAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,EAAA,IAAA,CAAA,CAAA,YAAA,CAAA,CAArDD,CAAqD,GAAA,CAAA,mBAAA,CACnC,CAAA,EAAA,cAAA,CAAA,kBAAA,EAAA,UAAA,CADmC,KACnC,CADmC,CAC/DE,UAD+D,CAAA,mBAAA,CAAA,UAAA,CAChDC,QADgD,CAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,EAAA,mBAAA,CAAA,CAAA,YAAA,CAAA,CAAA,CAEvE,MACE,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAD,KAAA,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,EAAA,CAAA,QAAA,CAAA,CAEE,aAAa,CAFf,UAAA,CAGE,UAAU,CAHZ,UAAA,CAIE,GAAG,CAJL,GAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CADF,CACE,CAAA,CAAA,CAAA,CADF,CAFF,CAAA,C,aAYe,CAAA,EAAA,MAAA,CAAA,IAAA,EAAK,CAAA,EAAA,MAAA,CAAA,UAAA,EAAL,QAAK,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Input, IInputProps } from '../Input';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nexport interface ITextAreaProps extends IInputProps {\n  /**\n   * Maps to react-native TextInput's numberOfLines.\n   */\n  totalLines?: number;\n}\n\nconst TextArea = ({ wrapperRef, ...props }: ITextAreaProps, ref: any) => {\n  const { totalLines, ...newProps } = usePropsResolution('TextArea', props);\n  return (\n    <Input\n      {...newProps}\n      numberOfLines={totalLines}\n      wrapperRef={wrapperRef}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(TextArea));\n"]},"metadata":{},"sourceType":"script"}