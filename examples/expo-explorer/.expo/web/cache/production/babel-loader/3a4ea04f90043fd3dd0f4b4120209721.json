{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";function _createForOfIteratorHelperLoose(o,allowArrayLike){var it;if(typeof Symbol===\"undefined\"||o[Symbol.iterator]==null){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}it=o[Symbol.iterator]();return it.next.bind(it);}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}import{useControlledState}from\"@react-stately/utils\";import _babelRuntimeHelpersEsmExtends from\"@babel/runtime/helpers/esm/extends\";import{useCollection}from\"@react-stately/collections\";import{SelectionManager,useMultipleSelectionState}from\"@react-stately/selection\";import{useEffect,useMemo}from\"react\";var $ed5d55e571caf578a4f08babbaa26be$var$_Symbol$iterator;$ed5d55e571caf578a4f08babbaa26be$var$_Symbol$iterator=Symbol.iterator;export var ListCollection=function(){function ListCollection(nodes){var _this=this;_classCallCheck(this,ListCollection);var _last;this.keyMap=new Map();this.iterable=void 0;this.firstKey=void 0;this.lastKey=void 0;this.iterable=nodes;var visit=function visit(node){_this.keyMap.set(node.key,node);if(node.childNodes&&node.type==='section'){for(var _iterator=_createForOfIteratorHelperLoose(node.childNodes),_step;!(_step=_iterator()).done;){var child=_step.value;visit(child);}}};for(var _iterator2=_createForOfIteratorHelperLoose(nodes),_step2;!(_step2=_iterator2()).done;){var node=_step2.value;visit(node);}var last;var index=0;for(var _iterator3=_createForOfIteratorHelperLoose(this.keyMap),_step3;!(_step3=_iterator3()).done;){var _ref=_step3.value;var _ref2=_slicedToArray(_ref,2);var key=_ref2[0];var _node=_ref2[1];if(last){last.nextKey=key;_node.prevKey=last.key;}else{this.firstKey=key;_node.prevKey=undefined;}if(_node.type==='item'){_node.index=index++;}last=_node;last.nextKey=undefined;}this.lastKey=(_last=last)==null?void 0:_last.key;}_createClass(ListCollection,[{key:$ed5d55e571caf578a4f08babbaa26be$var$_Symbol$iterator,value:_regeneratorRuntime.mark(function value(){return _regeneratorRuntime.wrap(function value$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.delegateYield(this.iterable,\"t0\",1);case 1:case\"end\":return _context.stop();}}},value,this);})},{key:\"size\",get:function get(){return this.keyMap.size;}},{key:\"getKeys\",value:function getKeys(){return this.keyMap.keys();}},{key:\"getKeyBefore\",value:function getKeyBefore(key){var node=this.keyMap.get(key);return node?node.prevKey:null;}},{key:\"getKeyAfter\",value:function getKeyAfter(key){var node=this.keyMap.get(key);return node?node.nextKey:null;}},{key:\"getFirstKey\",value:function getFirstKey(){return this.firstKey;}},{key:\"getLastKey\",value:function getLastKey(){return this.lastKey;}},{key:\"getItem\",value:function getItem(key){return this.keyMap.get(key);}}]);return ListCollection;}();export function useListState(props){var filter=props.filter;var selectionState=useMultipleSelectionState(props);var disabledKeys=useMemo(function(){return props.disabledKeys?new Set(props.disabledKeys):new Set();},[props.disabledKeys]);var factory=function factory(nodes){return filter?new ListCollection(filter(nodes)):new ListCollection(nodes);};var context=useMemo(function(){return{suppressTextValueWarning:props.suppressTextValueWarning};},[props.suppressTextValueWarning]);var collection=useCollection(props,factory,context,[filter]);useEffect(function(){if(selectionState.focusedKey!=null&&!collection.getItem(selectionState.focusedKey)){selectionState.setFocusedKey(null);}},[collection,selectionState.focusedKey]);return{collection:collection,disabledKeys:disabledKeys,selectionManager:new SelectionManager(collection,selectionState)};}export function useSingleSelectListState(props){var _props$defaultSelecte;var _useControlledState=useControlledState(props.selectedKey,(_props$defaultSelecte=props.defaultSelectedKey)!=null?_props$defaultSelecte:null,props.onSelectionChange),_useControlledState2=_slicedToArray(_useControlledState,2),selectedKey=_useControlledState2[0],setSelectedKey=_useControlledState2[1];var selectedKeys=useMemo(function(){return selectedKey!=null?[selectedKey]:[];},[selectedKey]);var _useListState=useListState(_babelRuntimeHelpersEsmExtends({},props,{selectionMode:'single',disallowEmptySelection:true,selectedKeys:selectedKeys,onSelectionChange:function onSelectionChange(keys){var key=keys.values().next().value;if(key===selectedKey&&props.onSelectionChange){props.onSelectionChange(key);}setSelectedKey(key);}})),collection=_useListState.collection,disabledKeys=_useListState.disabledKeys,selectionManager=_useListState.selectionManager;var selectedItem=selectedKey!=null?collection.getItem(selectedKey):null;return{collection:collection,disabledKeys:disabledKeys,selectionManager:selectionManager,selectedKey:selectedKey,setSelectedKey:setSelectedKey,selectedItem:selectedItem};}","map":{"version":3,"sources":["packages/@react-stately/list/src/ListCollection.ts","packages/@react-stately/list/src/useListState.ts","packages/@react-stately/list/src/useSingleSelectListState.ts"],"names":["keyMap","iterable","firstKey","lastKey","constructor","visit","node","index","last","Symbol","iterator","getKeys","getKeyBefore","getKeyAfter","getFirstKey","getLastKey","getItem","filter","selectionState","useMultipleSelectionState","disabledKeys","useMemo","props","factory","nodes","context","suppressTextValueWarning","collection","useCollection","useEffect","selectionManager","useControlledState","selectedKeys","selectedKey","selectionMode","disallowEmptySelection","onSelectionChange","keys","key","setSelectedKey","selectedItem"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class ListCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>) {\n    this.iterable = nodes;\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && node.type === 'section') {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionBase, MultipleSelection, Node} from '@react-types/shared';\nimport {Key, useEffect, useMemo} from 'react';\nimport {ListCollection} from './ListCollection';\nimport {SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface ListProps<T> extends CollectionBase<T>, MultipleSelection {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>,\n  /** @private */\n  suppressTextValueWarning?: boolean\n}\n\nexport interface ListState<T> {\n  /** A collection of items in the list. */\n  collection: Collection<Node<T>>,\n\n  /** A set of items that are disabled. */\n  disabledKeys: Set<Key>,\n\n  /** A selection manager to read and update multiple selection state. */\n  selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for list-like components. Handles building a collection\n * of items from props, and manages multiple selection state.\n */\nexport function useListState<T extends object>(props: ListProps<T>): ListState<T>  {\n  let {\n    filter\n  } = props;\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let factory = nodes => filter ? new ListCollection(filter(nodes)) : new ListCollection(nodes as Iterable<Node<T>>);\n  let context = useMemo(() => ({suppressTextValueWarning: props.suppressTextValueWarning}), [props.suppressTextValueWarning]);\n\n  let collection = useCollection(props, factory, context, [filter]);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [collection, selectionState.focusedKey]);\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager: new SelectionManager(collection, selectionState)\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, SingleSelection} from '@react-types/shared';\nimport {Key, useMemo} from 'react';\nimport {ListState, useListState} from './useListState';\nimport {Node} from '@react-types/shared';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface SingleSelectListProps<T> extends CollectionBase<T>, SingleSelection {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>,\n  /** @private */\n  suppressTextValueWarning?: boolean\n}\n\nexport interface SingleSelectListState<T> extends ListState<T> {\n  /** The key for the currently selected item. */\n  readonly selectedKey: Key,\n\n  /** Sets the selected key. */\n  setSelectedKey(key: Key): void,\n\n  /** The value of the currently selected item. */\n  readonly selectedItem: Node<T>\n}\n\n/**\n * Provides state management for list-like components with single selection.\n * Handles building a collection of items from props, and manages selection state.\n */\nexport function useSingleSelectListState<T extends object>(props: SingleSelectListProps<T>): SingleSelectListState<T>  {\n  let [selectedKey, setSelectedKey] = useControlledState(props.selectedKey, props.defaultSelectedKey ?? null, props.onSelectionChange);\n  let selectedKeys = useMemo(() => selectedKey != null ? [selectedKey] : [], [selectedKey]);\n  let {collection, disabledKeys, selectionManager} = useListState({\n    ...props,\n    selectionMode: 'single',\n    disallowEmptySelection: true,\n    selectedKeys,\n    onSelectionChange: (keys: Set<Key>) => {\n      let key = keys.values().next().value;\n\n      // Always fire onSelectionChange, even if the key is the same\n      // as the current key (useControlledState does not).\n      if (key === selectedKey && props.onSelectionChange) {\n        props.onSelectionChange(key);\n      }\n\n      setSelectedKey(key);\n    }\n  });\n\n  let selectedItem = selectedKey != null\n    ? collection.getItem(selectedKey)\n    : null;\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    selectedKey,\n    setSelectedKey,\n    selectedItem\n  };\n}\n"]},"metadata":{},"sourceType":"module"}