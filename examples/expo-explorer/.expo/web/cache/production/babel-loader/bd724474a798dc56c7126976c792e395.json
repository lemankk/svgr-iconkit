{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _react=_interopRequireDefault(require(\"react\"));var _primitives=require(\"../../primitives\");var _useThemeProps2=require(\"../../../hooks/useThemeProps\");var _this=this,_jsxFileName=\"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/SimpleGrid/SimpleGrid.tsx\";var DEBUG_STYLES=false?{rows:{border:'1px solid black'},cols:{border:'1px solid red'}}:{rows:{},cols:{}};var SimpleGrid=function SimpleGrid(props,ref){var _useThemeProps=(0,_useThemeProps2.useThemeProps)('SimpleGrid',props),columns=_useThemeProps.columns,space=_useThemeProps.space,spacingX=_useThemeProps.spacingX,spacingY=_useThemeProps.spacingY,minChildWidth=_useThemeProps.minChildWidth,children=_useThemeProps.children,remainingProps=(0,_objectWithoutProperties2.default)(_useThemeProps,[\"columns\",\"space\",\"spacingX\",\"spacingY\",\"minChildWidth\",\"children\"]);var cellSpacing=space!=null?space:0;var cellSpacingX=spacingX!=null?spacingX:cellSpacing;var cellSpacingY=spacingY!=null?spacingY:cellSpacing;var childrenArray=_react.default.Children.toArray(children);if(columns){var rowSlices=[];for(var i=0;i<childrenArray.length;i=i+columns){rowSlices.push(childrenArray.slice(i,i+columns));}return _react.default.createElement(_primitives.VStack,(0,_extends2.default)({},DEBUG_STYLES.rows,{space:cellSpacingY},remainingProps,{ref:ref,__self:_this,__source:{fileName:_jsxFileName,lineNumber:43,columnNumber:7}}),rowSlices.map(function(row,rowIndex){return _react.default.createElement(_primitives.HStack,{space:cellSpacingX,key:rowIndex,__self:_this,__source:{fileName:_jsxFileName,lineNumber:51,columnNumber:13}},row.map(function(col){return _react.default.createElement(_primitives.Box,(0,_extends2.default)({},DEBUG_STYLES.cols,{key:col.key,__self:_this,__source:{fileName:_jsxFileName,lineNumber:54,columnNumber:19}}),col);}));}));}else if(minChildWidth){return _react.default.createElement(_primitives.Box,(0,_extends2.default)({flexDirection:\"row\",flexWrap:\"wrap\",justifyContent:\"center\"},remainingProps,{ref:ref,__self:_this,__source:{fileName:_jsxFileName,lineNumber:69,columnNumber:7}}),childrenArray.map(function(col){return _react.default.createElement(_primitives.Box,(0,_extends2.default)({},DEBUG_STYLES.cols,{mx:cellSpacingX,my:cellSpacingY,key:col.key,minWidth:minChildWidth,__self:_this,__source:{fileName:_jsxFileName,lineNumber:78,columnNumber:13}}),col);}));}return _react.default.createElement(_react.default.Fragment,null);};var _default=_react.default.memo(_react.default.forwardRef(SimpleGrid));exports.default=_default;","map":{"version":3,"sources":["SimpleGrid.tsx"],"names":["DEBUG_STYLES","rows","border","cols","SimpleGrid","columns","space","spacingX","spacingY","minChildWidth","children","remainingProps","cellSpacing","cellSpacingX","cellSpacingY","childrenArray","React","rowSlices","i","row","col"],"mappings":"mWAAA,GAAA,CAAA,MAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CACA,GAAA,CAAA,WAAA,CAAA,OAAA,oBAAA,CAGA,GAAA,CAAA,eAAA,CAAA,OAAA,gCAAA,C,2IAEA,GAAMA,CAAAA,YAAY,CAAG,MACjB,CACEC,IAAI,CAAE,CACJC,MAAM,CAFV,iBACQ,CADR,CAIEC,IAAI,CAAE,CACJD,MAAM,CANO,eAKT,CAJR,CADiB,CASjB,CACED,IAAI,CADN,EAAA,CAEEE,IAAI,CAXV,EASI,CATJ,CAcA,GAAMC,CAAAA,UAAU,CAAVA,QAAAA,CAAAA,UAAAA,CAAa,KAAbA,CAAa,GAAbA,CAAkE,CAAA,GAAA,CAAA,cAAA,CASlE,CAAA,EAAA,eAAA,CAAA,aAAA,EAAA,YAAA,CATkE,KASlE,CATkE,CAEpEC,OAFoE,CAAA,cAAA,CAAA,OAAA,CAGpEC,KAHoE,CAAA,cAAA,CAAA,KAAA,CAIpEC,QAJoE,CAAA,cAAA,CAAA,QAAA,CAKpEC,QALoE,CAAA,cAAA,CAAA,QAAA,CAMpEC,aANoE,CAAA,cAAA,CAAA,aAAA,CAOpEC,QAPoE,CAAA,cAAA,CAAA,QAAA,CAQjEC,cARiE,CAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,EAAA,cAAA,CAAA,CAAA,SAAA,CAAA,OAAA,CAAA,UAAA,CAAA,UAAA,CAAA,eAAA,CAAA,UAAA,CAAA,CAAA,CAUtE,GAAIC,CAAAA,WAAW,CAAGN,KAAH,EAAA,IAAGA,CAAH,KAAGA,CAAlB,CAAA,CACA,GAAIO,CAAAA,YAAY,CAAGN,QAAH,EAAA,IAAGA,CAAH,QAAGA,CAAnB,WAAA,CACA,GAAIO,CAAAA,YAAY,CAAGN,QAAH,EAAA,IAAGA,CAAH,QAAGA,CAAnB,WAAA,CAEA,GAAMO,CAAAA,aAAa,CAAGC,MAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CAAAA,OAAAA,CAAtB,QAAsBA,CAAtB,CACA,GAAA,OAAA,CAAa,CACX,GAAIC,CAAAA,SAAS,CAAb,EAAA,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAV,CAAA,CAAgBA,CAAC,CAAGH,aAAa,CAAjC,MAAA,CAA0CG,CAAC,CAAGA,CAAC,CAA/C,OAAA,CAA2D,CACzDD,SAAS,CAATA,IAAAA,CAAeF,aAAa,CAAbA,KAAAA,CAAAA,CAAAA,CAAuBG,CAAC,CAAvCD,OAAeF,CAAfE,EAGF,OACE,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,WAAA,CAAD,MAAA,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,EAAA,CACMjB,YAAY,CADlB,IAAA,CAAA,CAEE,KAAK,CAFP,YAAA,CAAA,CAAA,cAAA,CAAA,CAIE,GAAG,CAJL,GAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAMGiB,SAAS,CAATA,GAAAA,CAAc,SAAA,GAAA,CAAA,QAAA,CAAmB,CAChC,MACE,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,WAAA,CAAD,MAAA,CAAA,CAAQ,KAAK,CAAb,YAAA,CAA6B,GAAG,CAAhC,QAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAAA,EAAA,CAAA,CAAA,CACGE,GAAG,CAAHA,GAAAA,CAAQ,SAAA,GAAA,CAAc,CACrB,MACE,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,WAAA,CAAD,GAAA,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,EAAA,CAASnB,YAAY,CAArB,IAAA,CAAA,CAA4B,GAAG,CAAEoB,GAAG,CAApC,GAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CADF,GACE,CADF,CAHN,CAEKD,CADH,CADF,CARN,CAOKF,CANH,CADF,CANF,CAAA,IA+BK,IAAA,aAAA,CAAmB,CACtB,MACE,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,WAAA,CAAD,GAAA,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,CACE,aAAa,CADf,KAAA,CAEE,QAAQ,CAFV,MAAA,CAGE,cAAc,CAHhB,QAAA,CAAA,CAAA,cAAA,CAAA,CAKE,GAAG,CALL,GAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAOGF,aAAa,CAAbA,GAAAA,CAAkB,SAAA,GAAA,CAAc,CAC/B,MACE,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,WAAA,CAAD,GAAA,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,EAAA,CACMf,YAAY,CADlB,IAAA,CAAA,CAEE,EAAE,CAFJ,YAAA,CAGE,EAAE,CAHJ,YAAA,CAIE,GAAG,CAAEoB,GAAG,CAJV,GAAA,CAKE,QAAQ,CALV,aAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CADF,GACE,CADF,CATN,CAQKL,CAPH,CADF,CAyBF,OAAO,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,MAAA,CAAA,OAAA,CAAA,QAAA,CAAP,IAAO,CAAP,CAxEF,CAAA,C,aA0EeC,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAWA,MAAAA,CAAAA,OAAAA,CAAAA,UAAAA,CAAXA,UAAWA,CAAXA,C","sourcesContent":["import React from 'react';\nimport { Box, HStack, VStack } from '../../primitives';\nimport type { ISimpleGridProps } from './types';\n// const isDebug = process.env.NODE_ENV !== 'production';\nimport { useThemeProps } from '../../../hooks/useThemeProps';\n\nconst DEBUG_STYLES = false\n  ? {\n      rows: {\n        border: '1px solid black',\n      },\n      cols: {\n        border: '1px solid red',\n      },\n    }\n  : {\n      rows: {},\n      cols: {},\n    };\n\nconst SimpleGrid = (props: ISimpleGridProps, ref?: any): JSX.Element => {\n  const {\n    columns,\n    space,\n    spacingX,\n    spacingY,\n    minChildWidth,\n    children,\n    ...remainingProps\n  } = useThemeProps('SimpleGrid', props);\n  let cellSpacing = space ?? 0;\n  let cellSpacingX = spacingX ?? cellSpacing;\n  let cellSpacingY = spacingY ?? cellSpacing;\n\n  const childrenArray = React.Children.toArray(children);\n  if (columns) {\n    let rowSlices = [];\n    for (let i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return (\n      <VStack\n        {...DEBUG_STYLES.rows}\n        space={cellSpacingY}\n        {...remainingProps}\n        ref={ref}\n      >\n        {rowSlices.map((row, rowIndex) => {\n          return (\n            <HStack space={cellSpacingX} key={rowIndex}>\n              {row.map((col: any) => {\n                return (\n                  <Box {...DEBUG_STYLES.cols} key={col.key}>\n                    {col}\n                  </Box>\n                );\n              })}\n            </HStack>\n          );\n        })}\n      </VStack>\n    );\n  }\n  // Needs more work for empty spacing i.e. auto-fit. Current workaround is to use wrap and let the columns be created dynamically\n  // https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\n  else if (minChildWidth) {\n    return (\n      <Box\n        flexDirection=\"row\"\n        flexWrap=\"wrap\"\n        justifyContent=\"center\"\n        {...remainingProps}\n        ref={ref}\n      >\n        {childrenArray.map((col: any) => {\n          return (\n            <Box\n              {...DEBUG_STYLES.cols}\n              mx={cellSpacingX}\n              my={cellSpacingY}\n              key={col.key}\n              minWidth={minChildWidth}\n            >\n              {col}\n            </Box>\n          );\n        })}\n      </Box>\n    );\n  }\n\n  return <></>;\n};\nexport default React.memo(React.forwardRef(SimpleGrid));\n"]},"metadata":{},"sourceType":"script"}