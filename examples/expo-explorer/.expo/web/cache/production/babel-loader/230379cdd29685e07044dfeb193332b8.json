{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";export default{get name(){return'ExpoClipboard';},getStringAsync:function getStringAsync(){var text;return _regeneratorRuntime.async(function getStringAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:text='';_context.prev=1;_context.next=4;return _regeneratorRuntime.awrap(navigator.clipboard.readText());case 4:text=_context.sent;_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](1);try{text=window.clipboardData.getData('Text');}catch(e){Promise.reject(new Error('Unable to retrieve item from clipboard.'));}case 10:return _context.abrupt(\"return\",text);case 11:case\"end\":return _context.stop();}}},null,null,[[1,7]],Promise);},setString:function setString(text){var success=false;var textField=document.createElement('textarea');textField.innerText=text;document.body.appendChild(textField);textField.select();try{document.execCommand('copy');success=true;}catch(e){}document.body.removeChild(textField);return success;}};","map":{"version":3,"sources":["../src/ExpoClipboard.web.ts"],"names":[],"mappings":"4DAAA,cAAe,CACb,GAAI,CAAA,IAAJ,EAAQ,CACN,MAAO,eAAP,CACD,CAHY,CAIP,cAJO,4JAKP,IALO,CAKA,EALA,kEAOI,SAAS,CAAC,SAAV,CAAoB,QAApB,EAPJ,SAOT,IAPS,8FAST,GAAI,CAGF,IAAI,CAAG,MAAM,CAAC,aAAP,CAAqB,OAArB,CAA6B,MAA7B,CAAP,CACD,CAAC,MAAO,CAAP,CAAU,CACV,OAAO,CAAC,MAAR,CAAe,GAAI,CAAA,KAAJ,CAAU,yCAAV,CAAf,EACD,CAfQ,wCAiBJ,IAjBI,4EAmBb,SAnBa,oBAmBH,IAnBG,CAmBS,CACpB,GAAI,CAAA,OAAO,CAAG,KAAd,CACA,GAAM,CAAA,SAAS,CAAG,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CAAlB,CACA,SAAS,CAAC,SAAV,CAAsB,IAAtB,CACA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,SAA1B,EACA,SAAS,CAAC,MAAV,GACA,GAAI,CACF,QAAQ,CAAC,WAAT,CAAqB,MAArB,EACA,OAAO,CAAG,IAAV,CACD,CAAC,MAAO,CAAP,CAAU,CAAE,CACd,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,SAA1B,EACA,MAAO,CAAA,OAAP,CACD,CA/BY,CAAf","sourcesContent":["export default {\n  get name(): string {\n    return 'ExpoClipboard';\n  },\n  async getStringAsync(): Promise<string> {\n    let text = '';\n    try {\n      text = await navigator.clipboard.readText();\n    } catch (e) {\n      try {\n        // Internet Explorer\n        // @ts-ignore\n        text = window.clipboardData.getData('Text');\n      } catch (e) {\n        Promise.reject(new Error('Unable to retrieve item from clipboard.'));\n      }\n    }\n    return text;\n  },\n  setString(text: string): boolean {\n    let success = false;\n    const textField = document.createElement('textarea');\n    textField.innerText = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      success = true;\n    } catch (e) {}\n    document.body.removeChild(textField);\n    return success;\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}