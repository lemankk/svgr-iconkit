{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useMemo,useState}from\"react\";import{useControlledState}from\"@react-stately/utils\";var $eaf77ba5e143129c6bb329a6e66020d3$var$instance=Math.round(Math.random()*10000000000);var $eaf77ba5e143129c6bb329a6e66020d3$var$i=0;export function useRadioGroupState(props){var name=useMemo(function(){return props.name||\"radio-group-\"+$eaf77ba5e143129c6bb329a6e66020d3$var$instance+\"-\"+ ++$eaf77ba5e143129c6bb329a6e66020d3$var$i;},[props.name]);var _useControlledState=useControlledState(props.value,props.defaultValue,props.onChange),_useControlledState2=_slicedToArray(_useControlledState,2),selectedValue=_useControlledState2[0],setSelected=_useControlledState2[1];var _useState=useState(null),_useState2=_slicedToArray(_useState,2),lastFocusedValue=_useState2[0],setLastFocusedValue=_useState2[1];var setSelectedValue=function setSelectedValue(value){if(!props.isReadOnly&&!props.isDisabled){setSelected(value);}};return{name:name,selectedValue:selectedValue,setSelectedValue:setSelectedValue,lastFocusedValue:lastFocusedValue,setLastFocusedValue:setLastFocusedValue,isDisabled:props.isDisabled||false,isReadOnly:props.isReadOnly||false};}","map":{"version":3,"sources":["packages/@react-stately/radio/src/useRadioGroupState.ts"],"names":["instance","Math","i","name","useMemo","props","useControlledState","useState","setSelectedValue","value","setSelected","selectedValue","lastFocusedValue","setLastFocusedValue","isDisabled","isReadOnly"],"mappings":"0JA2CA,GAAIA,CAAAA,8CAAQ,CAAGC,IAAI,CAAJA,KAAAA,CAAWA,IAAI,CAAJA,MAAAA,GAA1B,WAAeA,CAAf,CACA,GAAIC,CAAAA,uCAAC,CAAL,CAAA,C,MAMO,SAAA,CAAA,kBAAA,CAAA,KAAA,CAAsE,CAE3E,GAAIC,CAAAA,IAAI,CAAGC,OAAO,CAAC,iBAAMC,CAAAA,KAAK,CAALA,IAAAA,EAAAA,eAAAA,8CAAAA,CAAAA,GAAAA,CAAyC,GAAhD,uCAAC,EAAD,CAAuD,CAACA,KAAK,CAA/E,IAAyE,CAAvD,CAAlB,CACA,wBAAmCC,kBAAkB,CAACD,KAAK,CAAN,KAAA,CAAcA,KAAK,CAAnB,YAAA,CAAkCA,KAAK,CAA5F,QAAqD,CAArD,4DAAI,aAAJ,yBAAI,WAAJ,yBACA,cAA8CE,QAAQ,CAAtD,IAAsD,CAAtD,wCAAI,gBAAJ,eAAI,mBAAJ,eAEA,GAAIC,CAAAA,gBAAgB,CAAIC,QAApBD,CAAAA,gBAAoBC,CAAAA,KAAD,CAAW,CAChC,GAAI,CAACJ,KAAK,CAAN,UAAA,EAAqB,CAACA,KAAK,CAA/B,UAAA,CAA4C,CAC1CK,WAAW,CAAXA,KAAW,CAAXA,CACD,CAHH,CAAA,CAMA,MAAO,CACLP,IADK,CACLA,IADK,CAELQ,aAFK,CAELA,aAFK,CAGLH,gBAHK,CAGLA,gBAHK,CAILI,gBAJK,CAILA,gBAJK,CAKLC,mBALK,CAKLA,mBALK,CAMLC,UAAU,CAAET,KAAK,CAALA,UAAAA,EANP,KAAA,CAOLU,UAAU,CAAEV,KAAK,CAALA,UAAAA,EAAoB,KAP3B,CAAP,CASD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RadioGroupProps} from '@react-types/radio';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useState} from 'react';\n\nexport interface RadioGroupState {\n  /**\n   * The name for the group, used for native form submission.\n   * @deprecated\n   * @private\n   */\n  readonly name: string,\n\n  /** Whether the radio group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the radio group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** The currently selected value. */\n  readonly selectedValue: string | null,\n\n  /** Sets the selected value. */\n  setSelectedValue(value: string): void,\n\n  /** The value of the last focused radio. */\n  readonly lastFocusedValue: string | null,\n\n  /** Sets the last focused value. */\n  setLastFocusedValue(value: string): void\n}\n\nlet instance = Math.round(Math.random() * 10000000000);\nlet i = 0;\n\n/**\n * Provides state management for a radio group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useRadioGroupState(props: RadioGroupProps): RadioGroupState  {\n  // Preserved here for backward compatibility. React Aria now generates the name instead of stately.\n  let name = useMemo(() => props.name || `radio-group-${instance}-${++i}`, [props.name]);\n  let [selectedValue, setSelected] = useControlledState(props.value, props.defaultValue, props.onChange);\n  let [lastFocusedValue, setLastFocusedValue] = useState(null);\n\n  let setSelectedValue = (value) => {\n    if (!props.isReadOnly && !props.isDisabled) {\n      setSelected(value);\n    }\n  };\n\n  return {\n    name,\n    selectedValue,\n    setSelectedValue,\n    lastFocusedValue,\n    setLastFocusedValue,\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false\n  };\n}\n"]},"metadata":{},"sourceType":"module"}