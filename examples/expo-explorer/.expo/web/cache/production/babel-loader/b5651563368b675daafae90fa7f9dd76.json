{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _react=_interopRequireDefault(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");var _Context=require(\"./Context\");var _hooks=require(\"./../color-mode/hooks\");var _hooks2=require(\"../../hooks\");var _this=this,_jsxFileName=\"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/core/hybrid-overlay/HybridProvider.tsx\";var HybridProvider=function HybridProvider(_ref){var children=_ref.children,_ref$options=_ref.options,_ref$options$initialC=_ref$options.initialColorMode,initialColorMode=_ref$options$initialC===void 0?'light':_ref$options$initialC,_ref$options$accessib=_ref$options.accessibleColors,isTextColorAccessible=_ref$options$accessib===void 0?false:_ref$options$accessib,colorModeManager=_ref.colorModeManager;var _useModeManager=(0,_hooks.useModeManager)(initialColorMode,colorModeManager),colorMode=_useModeManager.colorMode,setColorMode=_useModeManager.setColorMode;var toggleColorMode=_react.default.useCallback(function(){setColorMode(colorMode==='light'?'dark':'light');},[colorMode,setColorMode]);var _React$useState=_react.default.useState(isTextColorAccessible),_React$useState2=(0,_slicedToArray2.default)(_React$useState,2),accessibleColors=_React$useState2[0],setAccessibleColors=_React$useState2[1];_react.default.useEffect(function(){var escapeKeyListener=null;if(_reactNative.Platform.OS==='web'){escapeKeyListener=function escapeKeyListener(e){if(e.key==='Escape'){if(_hooks2.keyboardDismissHandlerManager.length()>0){var lastHandler=_hooks2.keyboardDismissHandlerManager.pop();lastHandler();}}};document.addEventListener('keydown',escapeKeyListener);}return function(){if(_reactNative.Platform.OS==='web'){document.removeEventListener('keydown',escapeKeyListener);}};},[]);return _react.default.createElement(_Context.HybridContext.Provider,{value:{colorMode:{colorMode:colorMode,toggleColorMode:toggleColorMode,setColorMode:setColorMode,accessibleColors:accessibleColors,setAccessibleColors:setAccessibleColors}},__self:_this,__source:{fileName:_jsxFileName,lineNumber:54,columnNumber:5}},children);};var _default=HybridProvider;exports.default=_default;","map":{"version":3,"sources":["HybridProvider.tsx"],"names":["HybridProvider","children","options","initialColorMode","accessibleColors","isTextColorAccessible","colorModeManager","colorMode","setColorMode","toggleColorMode","React","setAccessibleColors","escapeKeyListener","Platform","e","keyboardDismissHandlerManager","lastHandler","document"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Platform } from 'react-native';\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport type { IColorModeProviderProps } from './../color-mode';\nimport { keyboardDismissHandlerManager } from '../../hooks';\n\nconst HybridProvider = ({\n  children,\n  options: {\n    initialColorMode = 'light',\n    accessibleColors: isTextColorAccessible = false,\n  },\n  colorModeManager,\n}: IColorModeProviderProps) => {\n  // Color-mode content\n  const { colorMode, setColorMode } = useModeManager(\n    initialColorMode,\n    colorModeManager\n  );\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  // Accessible color hook\n  const [accessibleColors, setAccessibleColors] = React.useState<boolean>(\n    isTextColorAccessible\n  );\n\n  React.useEffect(() => {\n    let escapeKeyListener: any = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            const lastHandler: any = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return () => {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n\n  return (\n    <HybridContext.Provider\n      value={{\n        colorMode: {\n          colorMode,\n          toggleColorMode,\n          setColorMode,\n          accessibleColors,\n          setAccessibleColors,\n        },\n      }}\n    >\n      {children}\n    </HybridContext.Provider>\n  );\n};\n\nexport default HybridProvider;\n"]},"metadata":{},"sourceType":"script"}