{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.useScreenReaderEnabled=useScreenReaderEnabled;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _react=_interopRequireDefault(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");function useScreenReaderEnabled(){var _React$useState=_react.default.useState(false),_React$useState2=(0,_slicedToArray2.default)(_React$useState,2),enabled=_React$useState2[0],setEnabled=_React$useState2[1];var mountedRef=_react.default.useRef(false);var handleSetEnabled=function handleSetEnabled(value){if(mountedRef.current){setEnabled(value);}};_react.default.useEffect(function(){mountedRef.current=true;function setInitialValue(){var res;return _regenerator.default.async(function setInitialValue$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regenerator.default.awrap(_reactNative.AccessibilityInfo.isScreenReaderEnabled());case 2:res=_context.sent;handleSetEnabled(res);case 4:case\"end\":return _context.stop();}}},null,null,null,Promise);}var handler=_reactNative.AccessibilityInfo.addEventListener('screenReaderChanged',function(event){handleSetEnabled(event);});setInitialValue();return function(){mountedRef.current=false;_reactNative.AccessibilityInfo.removeEventListener('screenReaderChanged',handler);};});return enabled;}","map":{"version":3,"sources":["useScreenReaderEnabled.ts"],"names":["enabled","setEnabled","React","mountedRef","handleSetEnabled","res","AccessibilityInfo","handler","setInitialValue"],"mappings":"6WAAA,GAAA,CAAA,MAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,C,wDAGO,QAAA,CAAA,sBAAA,EAAkC,CAAA,GAAA,CAAA,eAAA,CACTE,MAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CADS,KACTA,CADS,CAAA,gBAAA,CAAA,CAAA,EAAA,eAAA,CAAA,OAAA,EAAA,eAAA,CAAA,CAAA,CAAA,CAChCF,OADgC,CAAA,gBAAA,CAAA,CAAA,CAAA,CACvBC,UADuB,CAAA,gBAAA,CAAA,CAAA,CAAA,CAEvC,GAAME,CAAAA,UAAU,CAAGD,MAAAA,CAAAA,OAAAA,CAAAA,MAAAA,CAAnB,KAAmBA,CAAnB,CAEA,GAAME,CAAAA,gBAAgB,CAAhBA,QAAAA,CAAAA,gBAAAA,CAAmB,KAAnBA,CAAuC,CAC3C,GAAID,UAAU,CAAd,OAAA,CAAwB,CACtBF,UAAU,CAAVA,KAAU,CAAVA,CAEH,CAJD,CAAA,CAMAC,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAgB,UAAM,CACpBC,UAAU,CAAVA,OAAAA,CAAAA,IAAAA,CACA,QAAA,CAAA,eAAA,EAAA,CAAA,GAAA,CAAA,GAAA,CAAA,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA,KAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,QAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,OAAA,QAAA,CAAA,IAAA,CAAA,QAAA,CAAA,IAAA,EAAA,IAAA,EAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA,KAAA,CACoBG,YAAAA,CAAAA,iBAAAA,CADpB,qBACoBA,EADpB,CAAA,CAAA,IAAA,EAAA,CACQD,GADR,CAAA,QAAA,CAAA,IACQA,CACND,gBAAgB,CAAhBA,GAAgB,CAAhBA,CAFF,IAAA,EAAA,CAAA,IAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAKA,IAAIG,CAAAA,OAAY,CAAGD,YAAAA,CAAAA,iBAAAA,CAAAA,gBAAAA,CAAAA,qBAAAA,CAEjB,SAAA,KAAA,CAAgB,CACdF,gBAAgB,CAAhBA,KAAgB,CAAhBA,CAHJ,CAAmBE,CAAnB,CAOAE,eAAe,GACf,MAAO,WAAM,CACXL,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,CACAG,YAAAA,CAAAA,iBAAAA,CAAAA,mBAAAA,CAAAA,qBAAAA,CAAAA,OAAAA,EAFF,CAAA,CAfFJ,CAAAA,EAqBA,MAAA,CAAA,OAAA,CACD","sourcesContent":["import React from 'react';\nimport { AccessibilityInfo } from 'react-native';\n\nexport function useScreenReaderEnabled() {\n  const [enabled, setEnabled] = React.useState(false);\n  const mountedRef = React.useRef(false);\n\n  const handleSetEnabled = (value: boolean) => {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(() => {\n    mountedRef.current = true;\n    async function setInitialValue() {\n      const res = await AccessibilityInfo.isScreenReaderEnabled();\n      handleSetEnabled(res);\n    }\n\n    let handler: any = AccessibilityInfo.addEventListener(\n      'screenReaderChanged',\n      (event: any) => {\n        handleSetEnabled(event);\n      }\n    );\n\n    setInitialValue();\n    return () => {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n\n  return enabled;\n}\n"]},"metadata":{},"sourceType":"script"}