{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _react=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");var _native=_interopRequireDefault(require(\"styled-components/native\"));var _styledSystem=require(\"styled-system\");var _useThemeProps=require(\"../../../hooks/useThemeProps\");var _hooks=require(\"../../../hooks\");var _useSpinner2=require(\"./useSpinner\");var _this=this,_jsxFileName=\"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/primitives/Spinner/index.tsx\";var StyledSpinner=(0,_native.default)(_reactNative.ActivityIndicator)(_styledSystem.color,_styledSystem.space,_styledSystem.position);var Spinner=function Spinner(props,ref){var newProps=(0,_useThemeProps.usePropsResolution)('Spinner',props);var spinnerColor=(0,_hooks.useToken)('colors',newProps.color);var _useSpinner=(0,_useSpinner2.useSpinner)(props),spinnerProps=_useSpinner.spinnerProps;return _react.default.createElement(StyledSpinner,(0,_extends2.default)({},spinnerProps,newProps,{color:spinnerColor,ref:ref,__self:_this,__source:{fileName:_jsxFileName,lineNumber:62,columnNumber:5}}));};var _default=(0,_react.memo)((0,_react.forwardRef)(Spinner));exports.default=_default;","map":{"version":3,"sources":["index.tsx"],"names":["StyledSpinner","ActivityIndicator","color","space","position","Spinner","newProps","spinnerColor","spinnerProps"],"mappings":"wUAAA,GAAA,CAAA,MAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,C,wDAEA,GAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA,CACA,GAAA,CAAA,aAAA,CAAA,OAAA,CAAA,eAAA,CAAA,CACA,GAAA,CAAA,cAAA,CAAA,OAAA,gCAAA,CACA,GAAA,CAAA,MAAA,CAAA,OAAA,kBAAA,CAEA,GAAA,CAAA,YAAA,CAAA,OAAA,gBAAA,C,mIAmBA,GAAMA,CAAAA,aAAa,CAAG,CAAA,EAAA,OAAA,CAAA,OAAA,EAAOC,YAAAA,CAAP,iBAAA,EACpBC,aAAAA,CADoB,KAAA,CAEpBC,aAAAA,CAFoB,KAAA,CAGpBC,aAAAA,CAHF,QAAsB,CAAtB,CAKA,GAAMC,CAAAA,OAAO,CAAPA,QAAAA,CAAAA,OAAAA,CAAU,KAAVA,CAAU,GAAVA,CAA8C,CAClD,GAAMC,CAAAA,QAAQ,CAAG,CAAA,EAAA,cAAA,CAAA,kBAAA,EAAA,SAAA,CAAjB,KAAiB,CAAjB,CACA,GAAMC,CAAAA,YAAY,CAAG,CAAA,EAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAmBD,QAAQ,CAAhD,KAAqB,CAArB,CAFkD,GAAA,CAAA,WAAA,CAGzB,CAAA,EAAA,YAAA,CAAA,UAAA,EAHyB,KAGzB,CAHyB,CAG1CE,YAH0C,CAAA,WAAA,CAAA,YAAA,CA6BlD,MACE,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,aAAA,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,EAAA,CAAA,YAAA,CAAA,QAAA,CAAA,CAGE,KAAK,CAHP,YAAA,CAIE,GAAG,CAJL,GAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CADF,CACE,CAAA,CAAA,CAAA,CADF,CA7BF,CAAA,C,aAgGe,CAAA,EAAA,MAAA,CAAA,IAAA,EAAK,CAAA,EAAA,MAAA,CAAA,UAAA,EAAL,OAAK,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport styled from 'styled-components/native';\nimport { color, space, position } from 'styled-system';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useToken } from '../../../hooks';\nimport type { ISpinnerProps } from './types';\nimport { useSpinner } from './useSpinner';\n// import type { IBoxProps } from '../Box';\n// import { customLayout, customPosition } from '../../../utils/customProps';\n// import {\n//   Default,\n//   Dotted,\n//   MultiColorDotted,\n//   Stroked,\n//   SquareDotted,\n// } from './variants';\n\n// const StyleAnimatedView = styled(Animated.View)<IBoxProps>(\n//   color,\n//   border,\n//   position,\n//   customPosition,\n//   customLayout\n// );\n\nconst StyledSpinner = styled(ActivityIndicator)<ISpinnerProps>(\n  color,\n  space,\n  position\n);\nconst Spinner = (props: ISpinnerProps, ref: any) => {\n  const newProps = usePropsResolution('Spinner', props);\n  const spinnerColor = useToken('colors', newProps.color);\n  const { spinnerProps } = useSpinner(props);\n  // const iconSize: any = { sm: 10, lg: 20 };\n\n  // const degree: any = new Animated.Value(0);\n  // Animated.loop(\n  //   Animated.timing(degree, {\n  //     toValue: 1,\n  //     duration: newProps.duration ?? 1900,\n  //     easing: Easing.linear,\n  //     useNativeDriver: false,\n  //   })\n  // ).start();\n\n  // const styles = StyleSheet.create({\n  //   animateStyle: {\n  //     transform: [\n  //       {\n  //         rotateZ: degree.interpolate({\n  //           inputRange: [0, 1],\n  //           outputRange: ['0deg', '360deg'],\n  //         }),\n  //       },\n  //     ],\n  //   },\n  // });\n  // if (!newProps.variant) {\n  return (\n    <StyledSpinner\n      {...spinnerProps}\n      {...newProps}\n      color={spinnerColor}\n      ref={ref}\n    />\n  );\n  // } else {\n  //   if (newProps.variant === 'custom' && renderProp) {\n  //     return (\n  //       <StyleAnimatedView style={styles.animateStyle}>\n  //         {renderProp}\n  //       </StyleAnimatedView>\n  //     );\n  //   } else {\n  //     let SpinnerVariant = null;\n  //     switch (newProps.variant) {\n  //       case 'dotted':\n  //         SpinnerVariant = (\n  //           <Dotted\n  //             color={spinnerColor}\n  //             size={props.size ? iconSize[props.size] : 12}\n  //           />\n  //         );\n  //         break;\n  //       case 'multiColorDotted':\n  //         SpinnerVariant = (\n  //           <MultiColorDotted\n  //             color={spinnerColor}\n  //             size={props.size ? iconSize[props.size] : 12}\n  //           />\n  //         );\n  //         break;\n  //       case 'stroked':\n  //         SpinnerVariant = (\n  //           <Stroked\n  //             color={spinnerColor}\n  //             size={props.size ? iconSize[props.size] : 12}\n  //           />\n  //         );\n  //         break;\n  //       case 'squareDotted':\n  //         SpinnerVariant = (\n  //           <SquareDotted\n  //             color={spinnerColor}\n  //             size={props.size ? iconSize[props.size] : 12}\n  //           />\n  //         );\n  //         break;\n  //       default:\n  //         SpinnerVariant = (\n  //           <Default\n  //             color={spinnerColor}\n  //             size={props.size ? iconSize[props.size] : 12}\n  //           />\n  //         );\n  //     }\n  //     return (\n  //       <StyleAnimatedView style={styles.animateStyle}>\n  //         {SpinnerVariant}\n  //       </StyleAnimatedView>\n  //     );\n  //   }\n  // }\n};\n\nexport default memo(forwardRef(Spinner));\nexport type { ISpinnerProps };\n"]},"metadata":{},"sourceType":"script"}