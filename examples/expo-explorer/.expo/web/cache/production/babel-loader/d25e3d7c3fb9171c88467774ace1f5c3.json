{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.useTypeahead=useTypeahead;var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _reducer=require(\"./reducer\");var _react=_interopRequireWildcard(require(\"react\"));var stateChangeTypes=_interopRequireWildcard(require(\"./types\"));var _reactNative=require(\"react-native-web/dist/index\");var _utils=require(\"./utils\");function isControlledProp(props,key){return props[key]!==undefined;}function useTypeahead(props){var defaultValues=(0,_extends2.default)({},_utils.dropdownDefaultStateValues);defaultValues.isOpen=(0,_utils.getDefaultValue)(props,'isOpen');var _React$useReducer=_react.default.useReducer(_reducer.useTypeaheadReducer,defaultValues),_React$useReducer2=(0,_slicedToArray2.default)(_React$useReducer,2),state=_React$useReducer2[0],dispatch=_React$useReducer2[1];var dispatchWithProps=function dispatchWithProps(object){dispatch((0,_extends2.default)({},object,{props:props}));};var inputValue=state.inputValue,isOpen=state.isOpen;var items=props.items,onInputValueChange=props.onInputValueChange,onSelectedItemChange=props.onSelectedItemChange,selectedItem=props.selectedItem,itemToString=props.itemToString;var isControlled=isControlledProp(props,'selectedItem');(0,_react.useEffect)(function(){if(isControlled){dispatch({type:stateChangeTypes.ControlledPropUpdatedSelectedItem,inputValue:itemToString(selectedItem)});}},[selectedItem,isControlled,itemToString]);var onChangeText=function onChangeText(text){onInputValueChange==null?void 0:onInputValueChange({inputValue:text});dispatchWithProps({type:stateChangeTypes.InputChange,inputValue:text});};var handleItemSelect=function handleItemSelect(item,index){onSelectedItemChange==null?void 0:onSelectedItemChange(item);dispatchWithProps({type:stateChangeTypes.ItemClick,index:index});_reactNative.Keyboard.dismiss();};var getMenuItemProps=function getMenuItemProps(item,index){return{onPress:function onPress(){return handleItemSelect(item,index);},accessible:true,accessiblityRole:'menuitem'};};var getMenuProps=function getMenuProps(){return{accessible:true,accessibilityRole:'menu',accessibilityHint:\"Showing \"+items.length+\" records\"};};var getToggleButtonProps=function getToggleButtonProps(){return{onPress:function onPress(){dispatchWithProps({type:stateChangeTypes.ToggleButtonClick});}};};var getInputProps=function getInputProps(propInputVal,propOnchangeText){return{onChangeText:propInputVal?propOnchangeText:onChangeText,value:propInputVal?propInputVal:inputValue,accessibilityRole:'combobox',accessibilityLabel:'Typeahead input',accessibilityState:{expanded:isOpen}};};return{getInputProps:getInputProps,getMenuItemProps:getMenuItemProps,getMenuProps:getMenuProps,getToggleButtonProps:getToggleButtonProps,isOpen:isOpen};}","map":{"version":3,"sources":["useTypeahead.ts"],"names":["props","defaultValues","dropdownDefaultStateValues","state","dispatch","React","useTypeaheadReducer","dispatchWithProps","inputValue","isOpen","items","onInputValueChange","onSelectedItemChange","selectedItem","itemToString","isControlled","isControlledProp","type","stateChangeTypes","onChangeText","handleItemSelect","index","Keyboard","getMenuItemProps","onPress","accessible","accessiblityRole","getMenuProps","accessibilityRole","accessibilityHint","getToggleButtonProps","getInputProps","propInputVal","value","accessibilityLabel","accessibilityState","expanded"],"mappings":"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","sourcesContent":["import { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport type { AccessibilityRole } from 'react-native';\nimport { Keyboard } from 'react-native';\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\n\nfunction isControlledProp(props: any, key: string) {\n  return props[key] !== undefined;\n}\n\nimport type { IUseTypeaheadProps } from './types';\n\nexport function useTypeahead(props: IUseTypeaheadProps) {\n  let defaultValues = { ...dropdownDefaultStateValues };\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n\n  const [state, dispatch] = React.useReducer(\n    useTypeaheadReducer,\n    defaultValues\n  );\n\n  const dispatchWithProps = (object: any) => {\n    dispatch({ ...object, props });\n  };\n\n  const { inputValue, isOpen } = state;\n\n  const {\n    items,\n    onInputValueChange,\n    onSelectedItemChange,\n    selectedItem,\n    itemToString,\n  } = props;\n\n  const isControlled = isControlledProp(props, 'selectedItem');\n\n  useEffect(() => {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem),\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  const onChangeText = (text: string) => {\n    onInputValueChange?.({ inputValue: text });\n    dispatchWithProps({ type: stateChangeTypes.InputChange, inputValue: text });\n  };\n\n  const handleItemSelect = (item: any, index: number) => {\n    onSelectedItemChange?.(item);\n    dispatchWithProps({ type: stateChangeTypes.ItemClick, index });\n    Keyboard.dismiss();\n  };\n\n  const getMenuItemProps = (item: any, index: number) => {\n    return {\n      onPress: () => handleItemSelect(item, index),\n      accessible: true,\n      accessiblityRole: 'menuitem' as AccessibilityRole,\n    };\n  };\n\n  const getMenuProps = () => {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu' as AccessibilityRole,\n      accessibilityHint: `Showing ${items.length} records`,\n    };\n  };\n\n  const getToggleButtonProps = () => {\n    return {\n      onPress: () => {\n        dispatchWithProps({ type: stateChangeTypes.ToggleButtonClick });\n      },\n    };\n  };\n\n  const getInputProps = (propInputVal?: any, propOnchangeText?: any) => {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox' as AccessibilityRole,\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen,\n      },\n    };\n  };\n\n  return {\n    getInputProps,\n    getMenuItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    isOpen,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}