{"ast":null,"code":"import{useLocale}from\"@react-aria/i18n\";import{useLabel}from\"@react-aria/label\";import{usePress,useFocusWithin}from\"@react-aria/interactions\";import{useFocusable,getFocusableTreeWalker}from\"@react-aria/focus\";import{filterDOMProps,mergeProps,useId}from\"@react-aria/utils\";import _babelRuntimeHelpersEsmExtends from\"@babel/runtime/helpers/esm/extends\";var $a7d0e5df3871fb1bfdb437cffdabab2a$export$radioGroupNames=new WeakMap();export function useRadio(props,state,ref){var value=props.value,isRequired=props.isRequired,children=props.children,ariaLabel=props['aria-label'],ariaLabelledby=props['aria-labelledby'];var isDisabled=props.isDisabled||state.isDisabled;var isReadOnly=state.isReadOnly;var hasChildren=children!=null;var hasAriaLabel=ariaLabel!=null||ariaLabelledby!=null;if(!hasChildren&&!hasAriaLabel){console.warn('If you do not provide children, you must specify an aria-label for accessibility');}var checked=state.selectedValue===value;var onChange=function onChange(e){e.stopPropagation();state.setSelectedValue(value);};var _usePress=usePress({isDisabled:isDisabled}),pressProps=_usePress.pressProps;var _useFocusable=useFocusable(mergeProps(props,{onFocus:function onFocus(){return state.setLastFocusedValue(value);}}),ref),focusableProps=_useFocusable.focusableProps;var interactions=mergeProps(pressProps,focusableProps);var domProps=filterDOMProps(props,{labelable:true});var tabIndex=state.lastFocusedValue===value||state.lastFocusedValue==null?0:-1;if(isDisabled){tabIndex=undefined;}return{inputProps:mergeProps(domProps,_babelRuntimeHelpersEsmExtends({},interactions,{type:'radio',name:$a7d0e5df3871fb1bfdb437cffdabab2a$export$radioGroupNames.get(state),tabIndex:tabIndex,disabled:isDisabled,'aria-readonly':isReadOnly||undefined,required:isRequired,checked:checked,value:value,onChange:onChange}))};}export function useRadioGroup(props,state){var name=props.name,validationState=props.validationState,isReadOnly=props.isReadOnly,isRequired=props.isRequired,isDisabled=props.isDisabled,_props$orientation=props.orientation,orientation=_props$orientation===void 0?'vertical':_props$orientation;var _useLocale=useLocale(),direction=_useLocale.direction;var _useLabel=useLabel(_babelRuntimeHelpersEsmExtends({},props,{labelElementType:'span'})),labelProps=_useLabel.labelProps,fieldProps=_useLabel.fieldProps;var domProps=filterDOMProps(props,{labelable:true});var _useFocusWithin=useFocusWithin({onBlurWithin:function onBlurWithin(){if(!state.selectedValue){state.setLastFocusedValue(null);}}}),focusWithinProps=_useFocusWithin.focusWithinProps;var onKeyDown=function onKeyDown(e){var nextDir;switch(e.key){case'ArrowRight':if(direction==='rtl'&&orientation!=='vertical'){nextDir='prev';}else{nextDir='next';}break;case'ArrowLeft':if(direction==='rtl'&&orientation!=='vertical'){nextDir='next';}else{nextDir='prev';}break;case'ArrowDown':nextDir='next';break;case'ArrowUp':nextDir='prev';break;default:return;}e.preventDefault();var walker=getFocusableTreeWalker(e.currentTarget,{from:e.target});var nextElem;if(nextDir==='next'){nextElem=walker.nextNode();if(!nextElem){walker.currentNode=e.currentTarget;nextElem=walker.firstChild();}}else{nextElem=walker.previousNode();if(!nextElem){walker.currentNode=e.currentTarget;nextElem=walker.lastChild();}}if(nextElem){nextElem.focus();state.setSelectedValue(nextElem.value);}};var groupName=useId(name);$a7d0e5df3871fb1bfdb437cffdabab2a$export$radioGroupNames.set(state,groupName);return{radioGroupProps:mergeProps(domProps,_babelRuntimeHelpersEsmExtends({role:'radiogroup',onKeyDown:onKeyDown,'aria-invalid':validationState==='invalid'||undefined,'aria-errormessage':props['aria-errormessage'],'aria-readonly':isReadOnly||undefined,'aria-required':isRequired||undefined,'aria-disabled':isDisabled||undefined,'aria-orientation':orientation},fieldProps,focusWithinProps)),labelProps:labelProps};}","map":{"version":3,"sources":["packages/@react-aria/radio/src/utils.ts","packages/@react-aria/radio/src/useRadio.ts","packages/@react-aria/radio/src/useRadioGroup.ts"],"names":["radioGroupNames","ariaLabelledby","isDisabled","props","state","isReadOnly","hasChildren","children","hasAriaLabel","ariaLabel","console","checked","onChange","e","pressProps","usePress","focusableProps","useFocusable","mergeProps","onFocus","interactions","domProps","filterDOMProps","labelable","tabIndex","inputProps","type","name","disabled","required","value","orientation","direction","useLocale","fieldProps","useLabel","labelElementType","focusWithinProps","useFocusWithin","onBlurWithin","onKeyDown","nextDir","walker","getFocusableTreeWalker","from","target","nextElem","groupName","useId","radioGroupProps","role","validationState","isRequired","labelProps"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RadioGroupState} from '@react-stately/radio';\n\nexport const radioGroupNames = new WeakMap<RadioGroupState, string>();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaRadioProps} from '@react-types/radio';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {InputHTMLAttributes, RefObject} from 'react';\nimport {radioGroupNames} from './utils';\nimport {RadioGroupState} from '@react-stately/radio';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\ninterface RadioAriaProps extends AriaRadioProps {\n  /**\n   * Whether the Radio is required. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required).\n   */\n  isRequired?: boolean,\n  /**\n   * Whether the Radio can be interacted with but cannot have its selection state changed.\n   */\n  isReadOnly?: boolean\n}\n\ninterface RadioAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for an individual\n * radio button in a radio group.\n * @param props - Props for the radio.\n * @param state - State for the radio group, as returned by `useRadioGroupState`.\n * @param ref - Ref to the HTML input element.\n */\nexport function useRadio(props: RadioAriaProps, state: RadioGroupState, ref: RefObject<HTMLElement>): RadioAria {\n  let {\n    value,\n    isRequired,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  } = props;\n\n  const isDisabled = props.isDisabled || state.isDisabled;\n  \n  // Individual radios cannot be readonly\n  const isReadOnly = state.isReadOnly;\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  let checked = state.selectedValue === value;\n\n  let onChange = (e) => {\n    e.stopPropagation();\n    state.setSelectedValue(value);\n  };\n\n  let {pressProps} = usePress({\n    isDisabled\n  });\n\n  let {focusableProps} = useFocusable(mergeProps(props, {\n    onFocus: () => state.setLastFocusedValue(value)\n  }), ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n  let tabIndex = state.lastFocusedValue === value || state.lastFocusedValue == null ? 0 : -1;\n  if (isDisabled) {\n    tabIndex = undefined;\n  }\n\n  return {\n    inputProps: mergeProps(domProps, {\n      ...interactions,\n      type: 'radio',\n      name: radioGroupNames.get(state),\n      tabIndex,\n      disabled: isDisabled,\n      'aria-readonly': isReadOnly || undefined,\n      required: isRequired,\n      checked,\n      value,\n      onChange\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaRadioGroupProps} from '@react-types/radio';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {getFocusableTreeWalker} from '@react-aria/focus';\nimport {HTMLAttributes} from 'react';\nimport {radioGroupNames} from './utils';\nimport {RadioGroupState} from '@react-stately/radio';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useLabel} from '@react-aria/label';\nimport {useLocale} from '@react-aria/i18n';\n\ninterface RadioGroupAria {\n  /** Props for the radio group wrapper element. */\n  radioGroupProps: HTMLAttributes<HTMLElement>,\n  /** Props for the radio group's visible label (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a radio group component.\n * Radio groups allow users to select a single item from a list of mutually exclusive options.\n * @param props - Props for the radio group.\n * @param state - State for the radio group, as returned by `useRadioGroupState`.\n */\nexport function useRadioGroup(props: AriaRadioGroupProps, state: RadioGroupState): RadioGroupAria {\n  let {\n    name,\n    validationState,\n    isReadOnly,\n    isRequired,\n    isDisabled,\n    orientation = 'vertical'\n  } = props;\n  let {direction} = useLocale();\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    // Radio group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // When the radio group loses focus, reset the focusable radio to null if\n  // there is no selection. This allows tabbing into the group from either\n  // direction to go to the first or last radio.\n  let {focusWithinProps} = useFocusWithin({\n    onBlurWithin() {\n      if (!state.selectedValue) {\n        state.setLastFocusedValue(null);\n      }\n    }\n  });\n\n  let onKeyDown = (e) => {\n    let nextDir;\n    switch (e.key) {\n      case 'ArrowRight':\n        if (direction === 'rtl' && orientation !== 'vertical') {\n          nextDir = 'prev';\n        } else {\n          nextDir = 'next';\n        }\n        break;\n      case 'ArrowLeft':\n        if (direction === 'rtl' && orientation !== 'vertical') {\n          nextDir = 'next';\n        } else {\n          nextDir = 'prev';\n        }\n        break;\n      case 'ArrowDown':\n        nextDir = 'next';\n        break;\n      case 'ArrowUp':\n        nextDir = 'prev';\n        break;\n      default:\n        return;\n    }\n    e.preventDefault();\n    let walker = getFocusableTreeWalker(e.currentTarget, {from: e.target});\n    let nextElem;\n    if (nextDir === 'next') {\n      nextElem = walker.nextNode();\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.firstChild();\n      }\n    } else {\n      nextElem = walker.previousNode();\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.lastChild();\n      }\n    }\n    if (nextElem) {\n      // Call focus on nextElem so that keyboard navigation scrolls the radio into view\n      nextElem.focus();\n      state.setSelectedValue(nextElem.value);\n    }\n  };\n\n  let groupName = useId(name);\n  radioGroupNames.set(state, groupName);\n\n  return {\n    radioGroupProps: mergeProps(domProps, {\n      // https://www.w3.org/TR/wai-aria-1.2/#radiogroup\n      role: 'radiogroup',\n      onKeyDown,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      'aria-disabled': isDisabled || undefined,\n      'aria-orientation': orientation,\n      ...fieldProps,\n      ...focusWithinProps\n    }),\n    labelProps\n  };\n}\n"]},"metadata":{},"sourceType":"module"}