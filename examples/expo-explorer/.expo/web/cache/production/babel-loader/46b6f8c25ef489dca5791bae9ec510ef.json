{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{useEffect}from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";var PortalContext=React.createContext(null);var globalOverlayCounter=0;export function PortalProvider(props){var _React$useState=React.useState([]),_React$useState2=_slicedToArray(_React$useState,2),items=_React$useState2[0],setItems=_React$useState2[1];var setOverlayItem=function setOverlayItem(item){var overlayId=++globalOverlayCounter;setItems(function(prev){return prev.concat([{id:overlayId,node:item}]);});return overlayId;};var updateOverlayItem=function updateOverlayItem(id,node){setItems(function(prev){return prev.map(function(item){if(item.id===id){return{id:id,node:node};}return item;});});};var removeOverlayItem=function removeOverlayItem(id){setItems(function(prev){var newItems=prev.filter(function(item){return item.id!==id;});return newItems;});};return React.createElement(PortalContext.Provider,{value:{items:items,setOverlayItem:setOverlayItem,removeOverlayItem:removeOverlayItem,updateOverlayItem:updateOverlayItem}},props.children,items.map(function(item){return React.createElement(React.Fragment,{key:item.id},item.node);}));}function OverlayView(props){return React.createElement(View,_extends({pointerEvents:\"box-none\",style:StyleSheet.absoluteFill,collapsable:false},props));}export var OverlayProvider=PortalProvider;export function OverlayContainer(props){var context=usePortalProvider();var overlayId=React.useRef(undefined);var contents=React.createElement(OverlayView,props);useEffect(function(){if(overlayId.current===undefined){overlayId.current=context===null||context===void 0?void 0:context.setOverlayItem(contents);}else{if(overlayId.current){context===null||context===void 0?void 0:context.updateOverlayItem(overlayId.current,contents);}}},[props]);useEffect(function(){return function(){if(overlayId.current){context===null||context===void 0?void 0:context.removeOverlayItem(overlayId.current);}};},[]);return null;}function usePortalProvider(){var context=React.useContext(PortalContext);return context;}","map":{"version":3,"sources":["Portal.tsx"],"names":["PortalContext","React","globalOverlayCounter","setOverlayItem","item","overlayId","setItems","prev","id","node","updateOverlayItem","removeOverlayItem","newItems","items","props","StyleSheet","OverlayProvider","context","usePortalProvider","contents","useEffect"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport type { ReactNode } from 'react';\nimport { StyleSheet, View, ViewProps } from 'react-native';\n\ntype OverlayItem = {\n  id: number;\n  node: ReactNode;\n};\n\ninterface PortalContext {\n  items: Array<OverlayItem>;\n  setOverlayItem: (node: ReactNode) => number;\n  removeOverlayItem: (id: number) => void;\n  updateOverlayItem: (id: number, node: ReactNode) => void;\n}\n\ninterface ModalProviderProps extends ViewProps {\n  children: ReactNode;\n  provider?: boolean;\n}\n\nconst PortalContext = React.createContext<PortalContext | null>(null);\n\nlet globalOverlayCounter = 0;\n\nexport function PortalProvider(props: { children: ReactNode }) {\n  const [items, setItems] = React.useState<Array<OverlayItem>>([]);\n\n  const setOverlayItem = (item: ReactNode) => {\n    const overlayId = ++globalOverlayCounter;\n    setItems((prev) => prev.concat([{ id: overlayId, node: item }]));\n    return overlayId;\n  };\n\n  const updateOverlayItem = (id: number, node: ReactNode) => {\n    setItems((prev) =>\n      prev.map((item) => {\n        if (item.id === id) {\n          return { id, node };\n        }\n        return item;\n      })\n    );\n  };\n\n  const removeOverlayItem = (id: number) => {\n    setItems((prev) => {\n      const newItems = prev.filter((item) => item.id !== id);\n      return newItems;\n    });\n  };\n\n  return (\n    <PortalContext.Provider\n      value={{ items, setOverlayItem, removeOverlayItem, updateOverlayItem }}\n    >\n      {props.children}\n\n      {/* Render Overlays */}\n      {items.map((item) => {\n        return <React.Fragment key={item.id}>{item.node}</React.Fragment>;\n      })}\n    </PortalContext.Provider>\n  );\n}\n\nfunction OverlayView(props: ModalProviderProps) {\n  return (\n    <View\n      pointerEvents=\"box-none\"\n      style={StyleSheet.absoluteFill}\n      collapsable={false}\n      {...props}\n    />\n  );\n}\n\nexport const OverlayProvider = PortalProvider;\n\nexport function OverlayContainer(props: ModalProviderProps) {\n  const context = usePortalProvider();\n  const overlayId = React.useRef<number | undefined>(undefined);\n  let contents = <OverlayView {...props} />;\n\n  useEffect(\n    () => {\n      // Mount\n      if (overlayId.current === undefined) {\n        overlayId.current = context?.setOverlayItem(contents);\n      }\n      // Update\n      else {\n        if (overlayId.current) {\n          context?.updateOverlayItem(overlayId.current, contents);\n        }\n      }\n    },\n    // To re-render the child\n    [props]\n  );\n\n  // Unmount\n  useEffect(() => {\n    return () => {\n      if (overlayId.current) {\n        context?.removeOverlayItem(overlayId.current);\n      }\n    };\n  }, []);\n\n  return null;\n}\n\nfunction usePortalProvider() {\n  const context = React.useContext(PortalContext);\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}