{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{clamp,focusWithoutScrolling,mergeProps,useGlobalListeners}from'@react-aria/utils';import{getSliderThumbId,sliderIds}from\"./utils\";import{useCallback,useEffect,useRef}from'react';import{useFocusable}from'@react-aria/focus';import{useLabel}from'@react-aria/label';import{useMove}from\"./useMove\";import{isRTL}from'@react-native-aria/utils';export function useSliderThumb(opts,state){var _opts$ariaLabelledby;var index=opts.index,isRequired=opts.isRequired,isDisabled=opts.isDisabled,validationState=opts.validationState,trackLayout=opts.trackLayout,inputRef=opts.inputRef;var isVertical=opts.orientation==='vertical';var direction=isRTL()?'rtl':undefined;var _useGlobalListeners=useGlobalListeners(),addGlobalListener=_useGlobalListeners.addGlobalListener,removeGlobalListener=_useGlobalListeners.removeGlobalListener;var labelId=sliderIds.get(state);var _useLabel=useLabel(_objectSpread(_objectSpread({},opts),{},{'id':getSliderThumbId(state,index),'aria-labelledby':(labelId+\" \"+((_opts$ariaLabelledby=opts['aria-labelledby'])!==null&&_opts$ariaLabelledby!==void 0?_opts$ariaLabelledby:'')).trim()})),labelProps=_useLabel.labelProps,fieldProps=_useLabel.fieldProps;var value=state.values[index];var focusInput=useCallback(function(){if(inputRef.current){focusWithoutScrolling(inputRef.current);}},[inputRef]);var isFocused=state.focusedThumb===index;useEffect(function(){if(isFocused){focusInput();}},[isFocused,focusInput]);var stateRef=useRef(null);stateRef.current=state;var reverseX=direction==='rtl';var currentPosition=useRef(null);var _useMove=useMove({onMoveStart:function onMoveStart(){currentPosition.current=null;state.setThumbDragging(index,true);},onMove:function onMove(_ref){var deltaX=_ref.deltaX,deltaY=_ref.deltaY,pointerType=_ref.pointerType;var size=isVertical?trackLayout.height:trackLayout.width;if(currentPosition.current==null){currentPosition.current=stateRef.current.getThumbPercent(index)*size;}if(pointerType==='keyboard'){var delta=((reverseX?-deltaX:deltaX)+(isVertical?-deltaY:-deltaY))*stateRef.current.step;currentPosition.current+=delta*size;stateRef.current.setThumbValue(index,stateRef.current.getThumbValue(index)+delta);}else{var _delta=isVertical?deltaY:deltaX;if(isVertical||reverseX){_delta=-_delta;}currentPosition.current+=_delta;stateRef.current.setThumbPercent(index,clamp(currentPosition.current/size,0,1));}},onMoveEnd:function onMoveEnd(){state.setThumbDragging(index,false);}}),moveProps=_useMove.moveProps;state.setThumbEditable(index,!isDisabled);var _useFocusable=useFocusable(mergeProps(opts,{onFocus:function onFocus(){return state.setFocusedThumb(index);},onBlur:function onBlur(){return state.setFocusedThumb(undefined);}}),inputRef),focusableProps=_useFocusable.focusableProps;var currentPointer=useRef(undefined);var onDown=function onDown(id){focusInput();currentPointer.current=id;state.setThumbDragging(index,true);addGlobalListener(window,'mouseup',onUp,false);addGlobalListener(window,'touchend',onUp,false);addGlobalListener(window,'pointerup',onUp,false);};var onUp=function onUp(e){var _e$pointerId,_e$changedTouches;var id=(_e$pointerId=e.pointerId)!==null&&_e$pointerId!==void 0?_e$pointerId:(_e$changedTouches=e.changedTouches)===null||_e$changedTouches===void 0?void 0:_e$changedTouches[0].identifier;if(id===currentPointer.current){focusInput();state.setThumbDragging(index,false);removeGlobalListener(window,'mouseup',onUp,false);removeGlobalListener(window,'touchend',onUp,false);removeGlobalListener(window,'pointerup',onUp,false);}};return{inputProps:mergeProps(focusableProps,fieldProps,{'type':'range','tabIndex':!isDisabled?0:undefined,'min':state.getThumbMinValue(index),'max':state.getThumbMaxValue(index),'step':state.step,'value':value,'disabled':isDisabled,'aria-orientation':opts.orientation,'aria-valuetext':state.getThumbValueLabel(index),'aria-required':isRequired||undefined,'aria-invalid':validationState==='invalid'||undefined,'aria-errormessage':opts['aria-errormessage'],'onChange':function onChange(e){state.setThumbValue(index,parseFloat(e.target.value));}}),thumbProps:!isDisabled?mergeProps(moveProps,{onMouseDown:function onMouseDown(e){if(e.button!==0||e.altKey||e.ctrlKey||e.metaKey){return;}onDown();},onPointerDown:function onPointerDown(e){if(e.button!==0||e.altKey||e.ctrlKey||e.metaKey){return;}onDown(e.pointerId);},onTouchStart:function onTouchStart(e){onDown(e.changedTouches[0].identifier);}}):{},labelProps:labelProps};}","map":{"version":3,"sources":["useSliderThumb.web.ts"],"names":["inputRef","isVertical","opts","direction","isRTL","removeGlobalListener","useGlobalListeners","labelId","sliderIds","fieldProps","useLabel","getSliderThumbId","value","state","focusInput","useCallback","focusWithoutScrolling","isFocused","useEffect","stateRef","useRef","reverseX","currentPosition","moveProps","useMove","onMoveStart","onMove","pointerType","size","trackLayout","delta","clamp","onMoveEnd","focusableProps","useFocusable","mergeProps","onFocus","onBlur","currentPointer","onDown","id","addGlobalListener","onUp","e","inputProps","isRequired","validationState","parseFloat","thumbProps","onMouseDown","onPointerDown","onTouchStart","labelProps"],"mappings":"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","sourcesContent":["import { AriaSliderThumbProps } from '@react-types/slider';\nimport {\n  clamp,\n  focusWithoutScrolling,\n  mergeProps,\n  useGlobalListeners,\n} from '@react-aria/utils';\nimport { getSliderThumbId, sliderIds } from './utils';\nimport React, {\n  ChangeEvent,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  LabelHTMLAttributes,\n  RefObject,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport { SliderState } from '@react-stately/slider';\nimport { useFocusable } from '@react-aria/focus';\nimport { useLabel } from '@react-aria/label';\nimport { useMove } from './useMove';\nimport { isRTL } from '@react-native-aria/utils';\n\ninterface SliderThumbAria {\n  /** Props for the root thumb element; handles the dragging motion. */\n  thumbProps: HTMLAttributes<HTMLElement>;\n\n  /** Props for the visually hidden range input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>;\n\n  /** Props for the label element for this thumb (optional). */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>;\n}\n\ninterface SliderThumbOptions extends AriaSliderThumbProps {\n  /** A ref to the track element. */\n  trackLayout: any;\n  /** A ref to the thumb input element. */\n  inputRef: RefObject<HTMLInputElement>;\n}\n\n/**\n * Provides behavior and accessibility for a thumb of a slider component.\n *\n * @param opts Options for this Slider thumb.\n * @param state Slider state, created via `useSliderState`.\n */\nexport function useSliderThumb(\n  opts: SliderThumbOptions,\n  state: SliderState\n): SliderThumbAria {\n  let {\n    index,\n    isRequired,\n    isDisabled,\n    validationState,\n    trackLayout,\n    inputRef,\n  } = opts;\n\n  let isVertical = opts.orientation === 'vertical';\n\n  let direction = isRTL() ? 'rtl' : undefined;\n  let { addGlobalListener, removeGlobalListener } = useGlobalListeners();\n\n  let labelId = sliderIds.get(state);\n  const { labelProps, fieldProps } = useLabel({\n    ...opts,\n    'id': getSliderThumbId(state, index),\n    'aria-labelledby': `${labelId} ${opts['aria-labelledby'] ?? ''}`.trim(),\n  });\n\n  const value = state.values[index];\n\n  const focusInput = useCallback(() => {\n    if (inputRef.current) {\n      focusWithoutScrolling(inputRef.current);\n    }\n  }, [inputRef]);\n\n  const isFocused = state.focusedThumb === index;\n\n  useEffect(() => {\n    if (isFocused) {\n      focusInput();\n    }\n  }, [isFocused, focusInput]);\n\n  const stateRef = useRef<SliderState>(null);\n  stateRef.current = state;\n  let reverseX = direction === 'rtl';\n  let currentPosition = useRef<number>(null);\n  let { moveProps } = useMove({\n    onMoveStart() {\n      currentPosition.current = null;\n      state.setThumbDragging(index, true);\n    },\n    onMove({ deltaX, deltaY, pointerType }) {\n      let size = isVertical ? trackLayout.height : trackLayout.width;\n\n      if (currentPosition.current == null) {\n        currentPosition.current =\n          stateRef.current.getThumbPercent(index) * size;\n      }\n      if (pointerType === 'keyboard') {\n        // (invert left/right according to language direction) + (according to vertical)\n        let delta =\n          ((reverseX ? -deltaX : deltaX) + (isVertical ? -deltaY : -deltaY)) *\n          stateRef.current.step;\n        currentPosition.current += delta * size;\n        stateRef.current.setThumbValue(\n          index,\n          stateRef.current.getThumbValue(index) + delta\n        );\n      } else {\n        let delta = isVertical ? deltaY : deltaX;\n        if (isVertical || reverseX) {\n          delta = -delta;\n        }\n        currentPosition.current += delta;\n        stateRef.current.setThumbPercent(\n          index,\n          clamp(currentPosition.current / size, 0, 1)\n        );\n      }\n    },\n    onMoveEnd() {\n      state.setThumbDragging(index, false);\n    },\n  });\n\n  // Immediately register editability with the state\n  state.setThumbEditable(index, !isDisabled);\n\n  const { focusableProps } = useFocusable(\n    mergeProps(opts, {\n      onFocus: () => state.setFocusedThumb(index),\n      onBlur: () => state.setFocusedThumb(undefined),\n    }),\n    inputRef\n  );\n\n  let currentPointer = useRef<number | undefined>(undefined);\n  let onDown = (id?: number) => {\n    focusInput();\n    currentPointer.current = id;\n    state.setThumbDragging(index, true);\n\n    addGlobalListener(window, 'mouseup', onUp, false);\n    addGlobalListener(window, 'touchend', onUp, false);\n    addGlobalListener(window, 'pointerup', onUp, false);\n  };\n\n  let onUp = (e) => {\n    let id = e.pointerId ?? e.changedTouches?.[0].identifier;\n    if (id === currentPointer.current) {\n      focusInput();\n      state.setThumbDragging(index, false);\n      removeGlobalListener(window, 'mouseup', onUp, false);\n      removeGlobalListener(window, 'touchend', onUp, false);\n      removeGlobalListener(window, 'pointerup', onUp, false);\n    }\n  };\n\n  // We install mouse handlers for the drag motion on the thumb div, but\n  // not the key handler for moving the thumb with the slider.  Instead,\n  // we focus the range input, and let the browser handle the keyboard\n  // interactions; we then listen to input's onChange to update state.\n  return {\n    inputProps: mergeProps(focusableProps, fieldProps, {\n      'type': 'range',\n      'tabIndex': !isDisabled ? 0 : undefined,\n      'min': state.getThumbMinValue(index),\n      'max': state.getThumbMaxValue(index),\n      'step': state.step,\n      'value': value,\n      'disabled': isDisabled,\n      'aria-orientation': opts.orientation,\n      'aria-valuetext': state.getThumbValueLabel(index),\n      'aria-required': isRequired || undefined,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': opts['aria-errormessage'],\n      'onChange': (e: ChangeEvent<HTMLInputElement>) => {\n        state.setThumbValue(index, parseFloat(e.target.value));\n      },\n    }),\n    thumbProps: !isDisabled\n      ? mergeProps(moveProps, {\n          onMouseDown: (e: React.MouseEvent<HTMLElement>) => {\n            if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n              return;\n            }\n            onDown();\n          },\n          onPointerDown: (e: React.PointerEvent<HTMLElement>) => {\n            if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n              return;\n            }\n            onDown(e.pointerId);\n          },\n          onTouchStart: (e: React.TouchEvent<HTMLElement>) => {\n            onDown(e.changedTouches[0].identifier);\n          },\n        })\n      : {},\n    labelProps,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}