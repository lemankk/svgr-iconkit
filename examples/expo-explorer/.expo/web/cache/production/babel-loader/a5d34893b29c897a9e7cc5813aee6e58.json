{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import getCss from'dom-helpers/style';import getOffset from'dom-helpers/query/offset';import getPosition from'dom-helpers/query/position';import getScrollLeft from'dom-helpers/query/scrollLeft';import getScrollTop from'dom-helpers/query/scrollTop';import ownerDocument from'dom-helpers/ownerDocument';var AXIS={top:'top',bottom:'top',left:'left',right:'left'};var FLIPPED_DIRECTION={top:'bottom',bottom:'top',left:'right',right:'left'};var CROSS_AXIS={top:'left',left:'top'};var AXIS_SIZE={top:'height',left:'width'};var PARSED_PLACEMENT_CACHE={};var visualViewport=typeof window!=='undefined'&&window.visualViewport;function getContainerDimensions(containerNode){var width=0,height=0,top=0,left=0;var scroll={};if(containerNode.tagName==='BODY'){var _visualViewport$width,_visualViewport$heigh;width=(_visualViewport$width=visualViewport===null||visualViewport===void 0?void 0:visualViewport.width)!==null&&_visualViewport$width!==void 0?_visualViewport$width:document.documentElement.clientWidth;height=(_visualViewport$heigh=visualViewport===null||visualViewport===void 0?void 0:visualViewport.height)!==null&&_visualViewport$heigh!==void 0?_visualViewport$heigh:document.documentElement.clientHeight;scroll.top=getScrollTop(ownerDocument(containerNode).documentElement)||getScrollTop(containerNode);scroll.left=getScrollLeft(ownerDocument(containerNode).documentElement)||getScrollLeft(containerNode);}else{var _getOffset=getOffset(containerNode);width=_getOffset.width;height=_getOffset.height;top=_getOffset.top;left=_getOffset.left;scroll.top=getScrollTop(containerNode);scroll.left=getScrollLeft(containerNode);}return{width:width,height:height,scroll:scroll,top:top,left:left};}function getScroll(node){return{top:node.scrollTop,left:node.scrollLeft,width:node.scrollWidth,height:node.scrollHeight};}function getDelta(axis,offset,size,containerDimensions,padding){var containerScroll=containerDimensions.scroll[axis];var containerHeight=containerDimensions[AXIS_SIZE[axis]];var startEdgeOffset=offset-padding-containerScroll;var endEdgeOffset=offset+padding-containerScroll+size;if(startEdgeOffset<0){return-startEdgeOffset;}else if(endEdgeOffset>containerHeight){return Math.max(containerHeight-endEdgeOffset,-startEdgeOffset);}else{return 0;}}function getMargins(node){var style=window.getComputedStyle(node);return{top:parseInt(style.marginTop,10)||0,bottom:parseInt(style.marginBottom,10)||0,left:parseInt(style.marginLeft,10)||0,right:parseInt(style.marginRight,10)||0};}function parsePlacement(input){if(PARSED_PLACEMENT_CACHE[input]){return PARSED_PLACEMENT_CACHE[input];}var _input$split=input.split(' '),_input$split2=_slicedToArray(_input$split,2),placement=_input$split2[0],crossPlacement=_input$split2[1];var axis=AXIS[placement]||'right';var crossAxis=CROSS_AXIS[axis];if(!AXIS[crossPlacement]){crossPlacement='center';}var size=AXIS_SIZE[axis];var crossSize=AXIS_SIZE[crossAxis];PARSED_PLACEMENT_CACHE[input]={placement:placement,crossPlacement:crossPlacement,axis:axis,crossAxis:crossAxis,size:size,crossSize:crossSize};return PARSED_PLACEMENT_CACHE[input];}function computePosition(childOffset,boundaryDimensions,overlaySize,placementInfo,offset,crossOffset,containerOffsetWithBoundary,isContainerPositioned){var placement=placementInfo.placement,crossPlacement=placementInfo.crossPlacement,axis=placementInfo.axis,crossAxis=placementInfo.crossAxis,size=placementInfo.size,crossSize=placementInfo.crossSize;var position={};position[crossAxis]=childOffset[crossAxis];if(crossPlacement==='center'){position[crossAxis]+=(childOffset[crossSize]-overlaySize[crossSize])/2;}else if(crossPlacement!==crossAxis){position[crossAxis]+=childOffset[crossSize]-overlaySize[crossSize];}position[crossAxis]+=crossOffset;var minViablePosition=childOffset[crossAxis]+childOffset[crossSize]/2-overlaySize[crossSize];var maxViablePosition=childOffset[crossAxis]+childOffset[crossSize]/2;position[crossAxis]=Math.min(Math.max(minViablePosition,position[crossAxis]),maxViablePosition);if(placement===axis){var containerHeight=isContainerPositioned?containerOffsetWithBoundary[size]:boundaryDimensions[size];position[FLIPPED_DIRECTION[axis]]=Math.floor(containerHeight-childOffset[axis]+offset);}else{position[axis]=Math.floor(childOffset[axis]+childOffset[size]+offset);}return position;}function getMaxHeight(position,boundaryDimensions,containerOffsetWithBoundary,childOffset,margins,padding){return position.top!=null?Math.max(0,boundaryDimensions.height+boundaryDimensions.top+boundaryDimensions.scroll.top-(containerOffsetWithBoundary.top+position.top)-(margins.top+margins.bottom+padding)):Math.max(0,childOffset.top+containerOffsetWithBoundary.top-(boundaryDimensions.top+boundaryDimensions.scroll.top)-(margins.top+margins.bottom+padding));}function getAvailableSpace(boundaryDimensions,containerOffsetWithBoundary,childOffset,margins,padding,placementInfo){var placement=placementInfo.placement,axis=placementInfo.axis,size=placementInfo.size;if(placement===axis){return Math.max(0,childOffset[axis]-boundaryDimensions[axis]-boundaryDimensions.scroll[axis]+containerOffsetWithBoundary[axis]-margins[axis]-margins[FLIPPED_DIRECTION[axis]]-padding);}return Math.max(0,boundaryDimensions[size]+boundaryDimensions[axis]+boundaryDimensions.scroll[axis]-containerOffsetWithBoundary[axis]-childOffset[axis]-childOffset[size]-margins[axis]-margins[FLIPPED_DIRECTION[axis]]-padding);}export function calculatePositionInternal(placementInput,childOffset,overlaySize,scrollSize,margins,padding,flip,boundaryDimensions,containerOffsetWithBoundary,offset,crossOffset,isContainerPositioned,shouldOverlapWithTrigger){var placementInfo=parsePlacement(placementInput);var _placementInfo=placementInfo,size=_placementInfo.size,crossAxis=_placementInfo.crossAxis,crossSize=_placementInfo.crossSize,placement=_placementInfo.placement,crossPlacement=_placementInfo.crossPlacement,axis=_placementInfo.axis;var position=computePosition(childOffset,boundaryDimensions,overlaySize,placementInfo,offset,crossOffset,containerOffsetWithBoundary,isContainerPositioned);var normalizedOffset=offset;var space=getAvailableSpace(boundaryDimensions,containerOffsetWithBoundary,childOffset,margins,padding+offset,placementInfo);if(flip&&scrollSize[size]>space){var flippedPlacementInfo=parsePlacement(FLIPPED_DIRECTION[placement]+\" \"+crossPlacement);var flippedPosition=computePosition(childOffset,boundaryDimensions,overlaySize,flippedPlacementInfo,offset,crossOffset,containerOffsetWithBoundary,isContainerPositioned);var flippedSpace=getAvailableSpace(boundaryDimensions,containerOffsetWithBoundary,childOffset,margins,padding+offset,flippedPlacementInfo);if(flippedSpace>space){placementInfo=flippedPlacementInfo;position=flippedPosition;normalizedOffset=offset;}}var delta=getDelta(crossAxis,position[crossAxis],overlaySize[crossSize],boundaryDimensions,padding);position[crossAxis]+=delta;var maxHeight=getMaxHeight(position,boundaryDimensions,containerOffsetWithBoundary,childOffset,margins,padding);overlaySize.height=Math.min(overlaySize.height,maxHeight);position=computePosition(childOffset,boundaryDimensions,overlaySize,placementInfo,normalizedOffset,crossOffset,containerOffsetWithBoundary,isContainerPositioned);delta=getDelta(crossAxis,position[crossAxis],overlaySize[crossSize],boundaryDimensions,padding);position[crossAxis]+=delta;var arrowPosition={};arrowPosition[crossAxis]=childOffset[crossAxis]-position[crossAxis]+childOffset[crossSize]/2;if(shouldOverlapWithTrigger){position[FLIPPED_DIRECTION[placementInfo.placement]]=position[FLIPPED_DIRECTION[placementInfo.placement]]-childOffset[size];}return{position:position,maxHeight:maxHeight,arrowOffsetLeft:arrowPosition.left,arrowOffsetTop:arrowPosition.top,placement:placementInfo.placement};}export function calculatePosition(opts){var placement=opts.placement,targetNode=opts.targetNode,overlayNode=opts.overlayNode,scrollNode=opts.scrollNode,padding=opts.padding,shouldFlip=opts.shouldFlip,boundaryElement=opts.boundaryElement,offset=opts.offset,crossOffset=opts.crossOffset,shouldOverlapWithTrigger=opts.shouldOverlapWithTrigger;var container=overlayNode.offsetParent||document.body;var isBodyContainer=container.tagName==='BODY';var containerPositionStyle=window.getComputedStyle(container).position;var isContainerPositioned=!!containerPositionStyle&&containerPositionStyle!=='static';var childOffset=isBodyContainer?getOffset(targetNode):getPosition(targetNode,container);if(!isBodyContainer){childOffset.top+=parseInt(getCss(targetNode,'marginTop'),10)||0;childOffset.left+=parseInt(getCss(targetNode,'marginLeft'),10)||0;}var overlaySize=getOffset(overlayNode);var margins=getMargins(overlayNode);overlaySize.width+=margins.left+margins.right;overlaySize.height+=margins.top+margins.bottom;var scrollSize=getScroll(scrollNode);var boundaryDimensions=getContainerDimensions(boundaryElement);var containerOffsetWithBoundary=boundaryElement.tagName==='BODY'?getOffset(container):getPosition(container,boundaryElement);return calculatePositionInternal(placement,childOffset,overlaySize,scrollSize,margins,padding,shouldFlip,boundaryDimensions,containerOffsetWithBoundary,offset,crossOffset,isContainerPositioned,shouldOverlapWithTrigger);}","map":{"version":3,"sources":["calculatePosition.ts"],"names":["AXIS","top","bottom","left","right","FLIPPED_DIRECTION","CROSS_AXIS","AXIS_SIZE","PARSED_PLACEMENT_CACHE","visualViewport","window","width","height","scroll","containerNode","document","getScrollTop","ownerDocument","getScrollLeft","getOffset","node","scrollHeight","containerScroll","containerDimensions","containerHeight","startEdgeOffset","offset","endEdgeOffset","Math","style","parseInt","input","axis","crossAxis","crossPlacement","size","crossSize","placement","position","childOffset","overlaySize","minViablePosition","maxViablePosition","isContainerPositioned","containerOffsetWithBoundary","boundaryDimensions","margins","placementInfo","parsePlacement","computePosition","normalizedOffset","space","getAvailableSpace","padding","flip","scrollSize","flippedPlacementInfo","flippedPosition","flippedSpace","delta","getDelta","maxHeight","getMaxHeight","arrowPosition","arrowOffsetLeft","arrowOffsetTop","shouldOverlapWithTrigger","container","overlayNode","isBodyContainer","containerPositionStyle","getPosition","getCss","getMargins","getScroll","getContainerDimensions","boundaryElement","calculatePositionInternal"],"mappings":"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","sourcesContent":["// @ts-nocheck\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Axis, Placement, PlacementAxis, SizeAxis} from '@react-types/overlays';\nimport getCss from 'dom-helpers/style';\nimport getOffset from 'dom-helpers/query/offset';\nimport getPosition from 'dom-helpers/query/position';\nimport getScrollLeft from 'dom-helpers/query/scrollLeft';\nimport getScrollTop from 'dom-helpers/query/scrollTop';\nimport ownerDocument from 'dom-helpers/ownerDocument';\n\ninterface Position {\n  top?: number,\n  left?: number,\n  bottom?: number,\n  right?: number\n}\n\ninterface Dimensions {\n  width: number,\n  height: number,\n  top: number,\n  left: number,\n  scroll: Position\n}\n\ninterface ParsedPlacement {\n  placement: PlacementAxis,\n  crossPlacement: PlacementAxis,\n  axis: Axis,\n  crossAxis: Axis,\n  size: SizeAxis,\n  crossSize: SizeAxis\n}\n\ninterface Offset {\n  top: number,\n  left: number,\n  width: number,\n  height: number\n}\n\ninterface PositionOpts {\n  placement: Placement,\n  targetNode: HTMLElement,\n  overlayNode: HTMLElement,\n  scrollNode: HTMLElement,\n  padding: number,\n  shouldFlip: boolean,\n  boundaryElement: HTMLElement,\n  offset: number,\n  crossOffset: number,\n  shouldOverlapWithTrigger: boolean\n}\n\nexport interface PositionResult {\n  position?: Position,\n  arrowOffsetLeft?: number,\n  arrowOffsetTop?: number,\n  maxHeight?: number,\n  placement: PlacementAxis\n}\n\nconst AXIS = {\n  top: 'top',\n  bottom: 'top',\n  left: 'left',\n  right: 'left'\n};\n\nconst FLIPPED_DIRECTION = {\n  top: 'bottom',\n  bottom: 'top',\n  left: 'right',\n  right: 'left'\n};\n\nconst CROSS_AXIS = {\n  top: 'left',\n  left: 'top'\n};\n\nconst AXIS_SIZE = {\n  top: 'height',\n  left: 'width'\n};\n\nconst PARSED_PLACEMENT_CACHE = {};\n\n// @ts-ignore\nlet visualViewport = typeof window !== 'undefined' && window.visualViewport;\n\nfunction getContainerDimensions(containerNode: Element): Dimensions {\n  let width = 0, height = 0, top = 0, left = 0;\n  let scroll: Position = {};\n\n  if (containerNode.tagName === 'BODY') {\n    width = visualViewport?.width ?? document.documentElement.clientWidth;\n    height = visualViewport?.height ?? document.documentElement.clientHeight;\n\n    scroll.top =\n      getScrollTop(ownerDocument(containerNode).documentElement) ||\n      getScrollTop(containerNode);\n    scroll.left =\n      getScrollLeft(ownerDocument(containerNode).documentElement) ||\n      getScrollLeft(containerNode);\n  } else {\n    ({width, height, top, left} = getOffset(containerNode));\n    scroll.top = getScrollTop(containerNode);\n    scroll.left = getScrollLeft(containerNode);\n  }\n\n  return {width, height, scroll, top, left};\n}\n\nfunction getScroll(node: HTMLElement): Offset {\n  return {\n    top: node.scrollTop,\n    left: node.scrollLeft,\n    width: node.scrollWidth,\n    height: node.scrollHeight\n  };\n}\n\nfunction getDelta(\n  axis: Axis,\n  offset: number,\n  size: number,\n  containerDimensions: Dimensions,\n  padding: number\n) {\n  let containerScroll = containerDimensions.scroll[axis];\n  let containerHeight = containerDimensions[AXIS_SIZE[axis]];\n\n  let startEdgeOffset = offset - padding - containerScroll;\n  let endEdgeOffset = offset + padding - containerScroll + size;\n\n  if (startEdgeOffset < 0) {\n    return -startEdgeOffset;\n  } else if (endEdgeOffset > containerHeight) {\n    return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);\n  } else {\n    return 0;\n  }\n}\n\nfunction getMargins(node: HTMLElement): Position {\n  let style = window.getComputedStyle(node);\n  return {\n    top: parseInt(style.marginTop, 10) || 0,\n    bottom: parseInt(style.marginBottom, 10) || 0,\n    left: parseInt(style.marginLeft, 10) || 0,\n    right: parseInt(style.marginRight, 10) || 0\n  };\n}\n\nfunction parsePlacement(input: Placement): ParsedPlacement {\n  if (PARSED_PLACEMENT_CACHE[input]) {\n    return PARSED_PLACEMENT_CACHE[input];\n  }\n\n  let [placement, crossPlacement] = input.split(' ');\n  let axis: Axis = AXIS[placement] || 'right';\n  let crossAxis: Axis = CROSS_AXIS[axis];\n\n  if (!AXIS[crossPlacement]) {\n    crossPlacement = 'center';\n  }\n\n  let size = AXIS_SIZE[axis];\n  let crossSize = AXIS_SIZE[crossAxis];\n  PARSED_PLACEMENT_CACHE[input] = {placement, crossPlacement, axis, crossAxis, size, crossSize};\n  return PARSED_PLACEMENT_CACHE[input];\n}\n\nfunction computePosition(\n  childOffset: Offset,\n  boundaryDimensions: Dimensions,\n  overlaySize: Offset,\n  placementInfo: ParsedPlacement,\n  offset: number,\n  crossOffset: number,\n  containerOffsetWithBoundary: Offset,\n  isContainerPositioned: boolean\n) {\n  let {placement, crossPlacement, axis, crossAxis, size, crossSize} = placementInfo;\n  let position: Position = {};\n\n  // button position\n  position[crossAxis] = childOffset[crossAxis];\n  if (crossPlacement === 'center') {\n    //  + (button size / 2) - (overlay size / 2)\n    // at this point the overlay center should match the button center\n    position[crossAxis] += (childOffset[crossSize] - overlaySize[crossSize]) / 2;\n  } else if (crossPlacement !== crossAxis) {\n    //  + (button size) - (overlay size)\n    // at this point the overlay bottom should match the button bottom\n    position[crossAxis] += (childOffset[crossSize] - overlaySize[crossSize]);\n  }/* else {\n    the overlay top should match the button top\n  } */\n  // add the crossOffset from props\n  position[crossAxis] += crossOffset;\n\n  // this is button center position - the overlay size + half of the button to align bottom of overlay with button center\n  let minViablePosition = childOffset[crossAxis] + (childOffset[crossSize] / 2) - overlaySize[crossSize];\n  // this is button position of center, aligns top of overlay with button center\n  let maxViablePosition = childOffset[crossAxis] + (childOffset[crossSize] / 2);\n\n  // clamp it into the range of the min/max positions\n  position[crossAxis] = Math.min(Math.max(minViablePosition, position[crossAxis]), maxViablePosition);\n\n  // Floor these so the position isn't placed on a partial pixel, only whole pixels. Shouldn't matter if it was floored or ceiled, so chose one.\n  if (placement === axis) {\n    // If the container is positioned (non-static), then we use the container's actual\n    // height, as `bottom` will be relative to this height.  But if the container is static,\n    // then it can only be the `document.body`, and `bottom` will be relative to _its_\n    // container, which should be as large as boundaryDimensions.\n    const containerHeight = (isContainerPositioned ? containerOffsetWithBoundary[size] : boundaryDimensions[size]);\n    position[FLIPPED_DIRECTION[axis]] = Math.floor(containerHeight - childOffset[axis] + offset);\n  } else {\n    position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);\n  }\n\n  return position;\n}\n\nfunction getMaxHeight(\n  position: Position,\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  childOffset: Offset,\n  margins: Position,\n  padding: number\n) {\n  return position.top != null\n    // We want the distance between the top of the overlay to the bottom of the boundary\n    ? Math.max(0,\n      (boundaryDimensions.height + boundaryDimensions.top + boundaryDimensions.scroll.top) // this is the bottom of the boundary\n      - (containerOffsetWithBoundary.top + position.top) // this is the top of the overlay\n      - (margins.top + margins.bottom + padding) // save additional space for margin and padding\n    )\n    // We want the distance between the top of the trigger to the top of the boundary\n    : Math.max(0,\n      (childOffset.top + containerOffsetWithBoundary.top) // this is the top of the trigger\n      - (boundaryDimensions.top + boundaryDimensions.scroll.top) // this is the top of the boundary\n      - (margins.top + margins.bottom + padding) // save additional space for margin and padding\n    );\n}\n\nfunction getAvailableSpace(\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  childOffset: Offset,\n  margins: Position,\n  padding: number,\n  placementInfo: ParsedPlacement\n) {\n  let {placement, axis, size} = placementInfo;\n  if (placement === axis) {\n    return Math.max(0, childOffset[axis] - boundaryDimensions[axis] - boundaryDimensions.scroll[axis] + containerOffsetWithBoundary[axis] - margins[axis] - margins[FLIPPED_DIRECTION[axis]] - padding);\n  }\n\n  return Math.max(0, boundaryDimensions[size] + boundaryDimensions[axis] + boundaryDimensions.scroll[axis] - containerOffsetWithBoundary[axis] - childOffset[axis] - childOffset[size] - margins[axis] - margins[FLIPPED_DIRECTION[axis]] - padding);\n}\n\nexport function calculatePositionInternal(\n  placementInput: Placement,\n  childOffset: Offset,\n  overlaySize: Offset,\n  scrollSize: Offset,\n  margins: Position,\n  padding: number,\n  flip: boolean,\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  offset: number,\n  crossOffset: number,\n  isContainerPositioned: boolean,\n  shouldOverlapWithTrigger: boolean\n): PositionResult {\n  let placementInfo = parsePlacement(placementInput);\n  let {size, crossAxis, crossSize, placement, crossPlacement, axis} = placementInfo;\n  let position = computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);\n  let normalizedOffset = offset;\n  let space = getAvailableSpace(\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    childOffset,\n    margins,\n    padding + offset,\n    placementInfo\n  );\n\n  // Check if the scroll size of the overlay is greater than the available space to determine if we need to flip\n  if (flip && scrollSize[size] > space) {\n    let flippedPlacementInfo = parsePlacement(`${FLIPPED_DIRECTION[placement]} ${crossPlacement}` as Placement);\n    let flippedPosition = computePosition(childOffset, boundaryDimensions, overlaySize, flippedPlacementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);\n    let flippedSpace = getAvailableSpace(\n      boundaryDimensions,\n      containerOffsetWithBoundary,\n      childOffset,\n      margins,\n      padding + offset,\n      flippedPlacementInfo\n    );\n\n    // If the available space for the flipped position is greater than the original available space, flip.\n    if (flippedSpace > space) {\n      placementInfo = flippedPlacementInfo;\n      position = flippedPosition;\n      normalizedOffset = offset;\n    }\n  }\n\n  let delta = getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);\n  position[crossAxis] += delta;\n\n  let maxHeight = getMaxHeight(\n    position,\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    childOffset,\n    margins,\n    padding\n  );\n\n  overlaySize.height = Math.min(overlaySize.height, maxHeight);\n\n  position = computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, normalizedOffset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);\n  delta = getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);\n  position[crossAxis] += delta;\n\n  let arrowPosition: Position = {};\n  arrowPosition[crossAxis] = (childOffset[crossAxis] - position[crossAxis] + childOffset[crossSize] / 2);\n\n  if (shouldOverlapWithTrigger) {\n    position[FLIPPED_DIRECTION[placementInfo.placement]] = position[FLIPPED_DIRECTION[placementInfo.placement]] - childOffset[size];\n  }\n\n  return {\n    position,\n    maxHeight: maxHeight,\n    arrowOffsetLeft: arrowPosition.left,\n    arrowOffsetTop: arrowPosition.top,\n    placement: placementInfo.placement\n  };\n}\n\n/**\n * Determines where to place the overlay with regards to the target and the position of an optional indicator.\n */\nexport function calculatePosition(opts: PositionOpts): PositionResult {\n  let {\n    placement,\n    targetNode,\n    overlayNode,\n    scrollNode,\n    padding,\n    shouldFlip,\n    boundaryElement,\n    offset,\n    crossOffset,\n    shouldOverlapWithTrigger\n  } = opts;\n\n  let container = overlayNode.offsetParent || document.body;\n  let isBodyContainer = container.tagName === 'BODY';\n  const containerPositionStyle = window.getComputedStyle(container).position;\n  let isContainerPositioned = !!containerPositionStyle && containerPositionStyle !== 'static';\n  let childOffset: Offset = isBodyContainer ? getOffset(targetNode) : getPosition(targetNode, container);\n\n  if (!isBodyContainer) {\n    childOffset.top += parseInt(getCss(targetNode, 'marginTop'), 10) || 0;\n    childOffset.left += parseInt(getCss(targetNode, 'marginLeft'), 10) || 0;\n  }\n\n  let overlaySize: Offset = getOffset(overlayNode);\n  let margins = getMargins(overlayNode);\n  overlaySize.width += margins.left + margins.right;\n  overlaySize.height += margins.top + margins.bottom;\n\n  let scrollSize = getScroll(scrollNode);\n  let boundaryDimensions = getContainerDimensions(boundaryElement);\n  let containerOffsetWithBoundary: Offset = boundaryElement.tagName === 'BODY' ? getOffset(container) : getPosition(container, boundaryElement);\n\n\n  return calculatePositionInternal(\n    placement,\n    childOffset,\n    overlaySize,\n    scrollSize,\n    margins,\n    padding,\n    shouldFlip,\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    offset,\n    crossOffset,\n    isContainerPositioned,\n    shouldOverlapWithTrigger\n  );\n}\n"]},"metadata":{},"sourceType":"module"}