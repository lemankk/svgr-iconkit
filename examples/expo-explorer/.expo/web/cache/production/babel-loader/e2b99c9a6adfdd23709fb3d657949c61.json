{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"isDisabled\",\"onPress\",\"onPressStart\",\"onPressEnd\",\"onPressChange\"];import{usePress}from'@react-native-aria/interactions';import{mergeProps}from'@react-aria/utils';export function useButton(props){var isDisabled=props.isDisabled,onPress=props.onPress,onPressStart=props.onPressStart,onPressEnd=props.onPressEnd,onPressChange=props.onPressChange,rest=_objectWithoutProperties(props,_excluded);var _usePress=usePress({onPressStart:onPressStart,onPressEnd:onPressEnd,onPressChange:onPressChange,onPress:onPress,isDisabled:isDisabled}),pressProps=_usePress.pressProps,isPressed=_usePress.isPressed;var mergedProps=mergeProps(pressProps,rest,{accessibilityState:{disabled:isDisabled},accessibilityRole:'button',disabled:isDisabled});return{isPressed:isPressed,buttonProps:mergedProps};}","map":{"version":3,"sources":["useButton.ts"],"names":["rest","isPressed","usePress","onPressStart","onPressEnd","onPressChange","onPress","isDisabled","mergedProps","mergeProps","accessibilityState","disabled","accessibilityRole","buttonProps"],"mappings":"wKACA,OAAA,QAAA,KAAA,iCAAA,CAEA,OAAA,UAAA,KAAA,mBAAA,CAkBA,MAAO,SAAA,CAAA,SAAA,CAAA,KAAA,CAAyD,CAC9D,GAAI,CAAA,UAAJ,CAAA,KAAA,CAAI,UAAJ,CAAI,OAAJ,CAAA,KAAA,CAAI,OAAJ,CAAI,YAAJ,CAAA,KAAA,CAAI,YAAJ,CAAI,UAAJ,CAAA,KAAA,CAAI,UAAJ,CAAI,aAAJ,CAAA,KAAA,CAAI,aAAJ,CAMKA,IANL,0BAAA,KAAA,YASA,cAAgCE,QAAQ,CAAC,CACvCC,YADuC,CACvCA,YADuC,CAEvCC,UAFuC,CAEvCA,UAFuC,CAGvCC,aAHuC,CAGvCA,aAHuC,CAIvCC,OAJuC,CAIvCA,OAJuC,CAKvCC,UAAAA,CAAAA,UALuC,CAAD,CAAxC,CAAI,UAAJ,WAAI,UAAJ,CAAkBN,SAAlB,WAAkBA,SAAlB,CAQA,GAAMO,CAAAA,WAAW,CAAGC,UAAU,CAAA,UAAA,CAAA,IAAA,CAAmB,CAC/CC,kBAAkB,CAAE,CAClBC,QAAQ,CAAEJ,UADQ,CAD2B,CAI/CK,iBAAiB,CAJ8B,QAAA,CAK/CD,QAAQ,CAAEJ,UALqC,CAAnB,CAA9B,CAQA,MAAO,CACLN,SADK,CACLA,SADK,CAELY,WAAW,CAAEL,WAFR,CAAP,CAID","sourcesContent":["import { ReactNode } from 'react';\nimport { PressEvents, usePress } from '@react-native-aria/interactions';\nimport { AccessibilityProps, PressableProps } from 'react-native';\nimport { mergeProps } from '@react-aria/utils';\n\ninterface ButtonProps extends PressEvents {\n  /** Whether the button is disabled. */\n  isDisabled?: boolean;\n  /** The content to display in the button. */\n  children?: ReactNode;\n}\n\nexport interface RNAriaButtonProps extends AccessibilityProps, ButtonProps {}\n\nexport interface ButtonAria {\n  /** Props for the button element. */\n  buttonProps: PressableProps;\n  /** Whether the button is currently pressed. */\n  isPressed: boolean;\n}\n\nexport function useButton(props: RNAriaButtonProps): ButtonAria {\n  let {\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    ...rest\n  } = props;\n\n  let { pressProps, isPressed } = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    isDisabled,\n  });\n\n  const mergedProps = mergeProps(pressProps, rest, {\n    accessibilityState: {\n      disabled: isDisabled,\n    },\n    accessibilityRole: 'button',\n    disabled: isDisabled,\n  });\n\n  return {\n    isPressed,\n    buttonProps: mergedProps,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}