{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _react=_interopRequireWildcard(require(\"react\"));var _Box=_interopRequireDefault(require(\"../../primitives/Box\"));var _hooks=require(\"../../../hooks\");var _Context=require(\"./Context\");var _reactNative=require(\"react-native-web/dist/index\");var _this=this,_jsxFileName=\"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/Modal/ModalContent.tsx\";var ModalContent=function ModalContent(props,ref){var _usePropsResolution=(0,_hooks.usePropsResolution)('ModalContent',props),newProps=(0,_extends2.default)({},_usePropsResolution);var _React$useContext=_react.default.useContext(_Context.ModalContext),contentSize=_React$useContext.contentSize,initialFocusRef=_React$useContext.initialFocusRef,finalFocusRef=_React$useContext.finalFocusRef,handleClose=_React$useContext.handleClose;_react.default.useEffect(function(){var finalRefVal=finalFocusRef?finalFocusRef.current:null;if(initialFocusRef&&initialFocusRef.current){initialFocusRef.current.focus();}return function(){if(finalRefVal){finalRefVal.focus();}};},[initialFocusRef,finalFocusRef]);return _react.default.createElement(_Box.default,(0,_extends2.default)({},contentSize,newProps,{ref:ref,onAccessibilityEscape:handleClose,\"aria-modal\":\"true\",accessibilityRole:_reactNative.Platform.OS==='web'?'dialog':undefined,accessibilityViewIsModal:true,__self:_this,__source:{fileName:_jsxFileName,lineNumber:31,columnNumber:5}}));};var _default=(0,_react.memo)((0,_react.forwardRef)(ModalContent));exports.default=_default;","map":{"version":3,"sources":["ModalContent.tsx"],"names":["ModalContent","newProps","contentSize","initialFocusRef","finalFocusRef","handleClose","React","ModalContext","finalRefVal","Platform"],"mappings":"wUAAA,GAAA,CAAA,MAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CACA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,wBAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,OAAA,kBAAA,CACA,GAAA,CAAA,QAAA,CAAA,OAAA,aAAA,C,gMAGA,GAAMA,CAAAA,YAAY,CAAZA,QAAAA,CAAAA,YAAAA,CAAe,KAAfA,CAAe,GAAfA,CAAgD,CAAA,GAAA,CAAA,mBAAA,CAC5B,CAAA,EAAA,MAAA,CAAA,kBAAA,EAAA,cAAA,CAD4B,KAC5B,CAD4B,CACzCC,QADyC,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,EAAA,CAAA,mBAAA,CAAA,CAAA,GAAA,CAAA,iBAAA,CAOhDK,MAAAA,CAAAA,OAAAA,CAAAA,UAAAA,CAAiBC,QAAAA,CAP+B,YAOhDD,CAPgD,CAGlDJ,WAHkD,CAAA,iBAAA,CAAA,WAAA,CAIlDC,eAJkD,CAAA,iBAAA,CAAA,eAAA,CAKlDC,aALkD,CAAA,iBAAA,CAAA,aAAA,CAMlDC,WANkD,CAAA,iBAAA,CAAA,WAAA,CAQpDC,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAgB,UAAM,CACpB,GAAIE,CAAAA,WAAW,CAAGJ,aAAa,CAAGA,aAAa,CAAhB,OAAA,CAA/B,IAAA,CACA,GAAID,eAAe,EAAIA,eAAe,CAAtC,OAAA,CAAgD,CAE9CA,eAAe,CAAfA,OAAAA,CAAAA,KAAAA,GAGF,OAAO,WAAM,CACX,GAAA,WAAA,CAAiB,CAEfK,WAAW,CAAXA,KAAAA,GAEH,CALD,CAAA,CAPFF,CAAAA,CAaG,CAAA,eAAA,CAbHA,aAaG,CAbHA,EAeA,MACE,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,IAAA,CAAD,OAAA,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,EAAA,CAAA,WAAA,CAAA,QAAA,CAAA,CAGE,GAAG,CAHL,GAAA,CAIE,qBAAqB,CAJvB,WAAA,CAME,aANF,MAAA,CAQE,iBAAiB,CAAEG,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,GAAAA,KAAAA,CAAAA,QAAAA,CARrB,SAAA,CASE,wBAAwB,CAT1B,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CADF,CACE,CAAA,CAAA,CAAA,CADF,CAvBF,CAAA,C,aAsCe,CAAA,EAAA,MAAA,CAAA,IAAA,EAAK,CAAA,EAAA,MAAA,CAAA,UAAA,EAAL,YAAK,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { ModalContext } from './Context';\nimport { Platform } from 'react-native';\n\nconst ModalContent = (props: IBoxProps, ref?: any) => {\n  const { ...newProps } = usePropsResolution('ModalContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose,\n  } = React.useContext(ModalContext);\n  React.useEffect(() => {\n    let finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (initialFocusRef && initialFocusRef.current) {\n      //@ts-ignore\n      initialFocusRef.current.focus();\n    }\n\n    return () => {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    };\n  }, [initialFocusRef, finalFocusRef]);\n\n  return (\n    <Box\n      {...contentSize}\n      {...newProps}\n      ref={ref}\n      onAccessibilityEscape={handleClose}\n      //@ts-ignore - web only\n      aria-modal=\"true\"\n      //@ts-ignore - web only\n      accessibilityRole={Platform.OS === 'web' ? 'dialog' : undefined}\n      accessibilityViewIsModal\n    />\n  );\n};\n\nexport default memo(forwardRef(ModalContent));\n"]},"metadata":{},"sourceType":"script"}