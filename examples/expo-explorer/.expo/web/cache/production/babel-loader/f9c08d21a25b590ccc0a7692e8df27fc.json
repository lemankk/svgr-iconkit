{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.useTypeaheadReducer=useTypeaheadReducer;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var stateChangeTypes=_interopRequireWildcard(require(\"./types\"));var _utils=require(\"./utils\");function useTypeaheadReducer(state,action){var type=action.type,props=action.props;var changes;switch(type){case stateChangeTypes.ItemClick:changes={isOpen:(0,_utils.getDefaultValue)(props,'isOpen'),selectedItem:props.items[action.index],inputValue:props.itemToString(props.items[action.index])};break;case stateChangeTypes.InputBlur:if(state.isOpen){changes={isOpen:false};}break;case stateChangeTypes.InputChange:changes={isOpen:true,inputValue:action.inputValue};break;case stateChangeTypes.ToggleButtonClick:case stateChangeTypes.FunctionToggleMenu:changes={isOpen:!state.isOpen};break;case stateChangeTypes.FunctionOpenMenu:changes={isOpen:true};break;case stateChangeTypes.FunctionCloseMenu:changes={isOpen:false};break;case stateChangeTypes.FunctionSelectItem:changes={selectedItem:action.selectedItem,inputValue:props.itemToString(action.selectedItem)};break;case stateChangeTypes.ControlledPropUpdatedSelectedItem:case stateChangeTypes.FunctionSetInputValue:changes={inputValue:action.inputValue};break;case stateChangeTypes.FunctionReset:changes={isOpen:(0,_utils.getDefaultValue)(props,'isOpen'),selectedItem:(0,_utils.getDefaultValue)(props,'selectedItem'),inputValue:(0,_utils.getDefaultValue)(props,'inputValue')};break;default:throw new Error('Reducer called without proper action type.');}return(0,_extends2.default)({},state,changes);}","map":{"version":3,"sources":["reducer.tsx"],"names":["type","props","action","stateChangeTypes","changes","isOpen","selectedItem","inputValue","state"],"mappings":"iWAAA,GAAA,CAAA,gBAAA,CAAA,uBAAA,CAAA,OAAA,WAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,OAAA,WAAA,CAQO,QAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,MAAA,CAAyD,CAAA,GACtDA,CAAAA,IADsD,CACtCE,MADsC,CAAA,IAAA,CAChDD,KADgD,CACtCC,MADsC,CAAA,KAAA,CAE9D,GAAA,CAAA,OAAA,CAEA,OAAA,IAAA,EACE,IAAKC,CAAAA,gBAAgB,CAArB,SAAA,CACEC,OAAO,CAAG,CACRC,MAAM,CAAE,CAAA,EAAA,MAAA,CAAA,eAAA,EAAA,KAAA,CADA,QACA,CADA,CAERC,YAAY,CAAEL,KAAK,CAALA,KAAAA,CAAYC,MAAM,CAFxB,KAEMD,CAFN,CAGRM,UAAU,CAAEN,KAAK,CAALA,YAAAA,CAAmBA,KAAK,CAALA,KAAAA,CAAYC,MAAM,CAHnDE,KAGiCH,CAAnBA,CAHJ,CAAVG,CAKA,MACF,IAAKD,CAAAA,gBAAgB,CAArB,SAAA,CACE,GAAIK,KAAK,CAAT,MAAA,CAAkB,CAChBJ,OAAO,CAAG,CACRC,MAAM,CADRD,KAAU,CAAVA,CAIF,OACF,IAAKD,CAAAA,gBAAgB,CAArB,WAAA,CACEC,OAAO,CAAG,CACRC,MAAM,CADE,IAAA,CAERE,UAAU,CAAEL,MAAM,CAFpBE,UAAU,CAAVA,CAIA,MAEF,IAAKD,CAAAA,gBAAgB,CAArB,iBAAA,CACA,IAAKA,CAAAA,gBAAgB,CAArB,kBAAA,CACEC,OAAO,CAAG,CACRC,MAAM,CAAE,CAACG,KAAK,CADhBJ,MAAU,CAAVA,CAGA,MACF,IAAKD,CAAAA,gBAAgB,CAArB,gBAAA,CACEC,OAAO,CAAG,CACRC,MAAM,CADRD,IAAU,CAAVA,CAGA,MACF,IAAKD,CAAAA,gBAAgB,CAArB,iBAAA,CACEC,OAAO,CAAG,CACRC,MAAM,CADRD,KAAU,CAAVA,CAGA,MAEF,IAAKD,CAAAA,gBAAgB,CAArB,kBAAA,CACEC,OAAO,CAAG,CACRE,YAAY,CAAEJ,MAAM,CADZ,YAAA,CAERK,UAAU,CAAEN,KAAK,CAALA,YAAAA,CAAmBC,MAAM,CAFvCE,YAEcH,CAFJ,CAAVG,CAIA,MACF,IAAKD,CAAAA,gBAAgB,CAArB,iCAAA,CACA,IAAKA,CAAAA,gBAAgB,CAArB,qBAAA,CACEC,OAAO,CAAG,CACRG,UAAU,CAAEL,MAAM,CADpBE,UAAU,CAAVA,CAGA,MACF,IAAKD,CAAAA,gBAAgB,CAArB,aAAA,CACEC,OAAO,CAAG,CACRC,MAAM,CAAE,CAAA,EAAA,MAAA,CAAA,eAAA,EAAA,KAAA,CADA,QACA,CADA,CAERC,YAAY,CAAE,CAAA,EAAA,MAAA,CAAA,eAAA,EAAA,KAAA,CAFN,cAEM,CAFN,CAGRC,UAAU,CAAE,CAAA,EAAA,MAAA,CAAA,eAAA,EAAA,KAAA,CAHdH,YAGc,CAHJ,CAAVA,CAKA,MACF,QACE,KAAM,IAAA,CAAA,KAAA,CA3DV,4CA2DU,CAAN,CA3DJ,CA8DA,MAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,EAAA,CAAA,KAAA,CAAA,OAAA,CAAA,CAID","sourcesContent":["import * as stateChangeTypes from './types';\nimport { getDefaultValue } from './utils';\n\ntype IState = {\n  isOpen: boolean;\n  selectedItem: any;\n  inputValue: string;\n};\n\nexport function useTypeaheadReducer(state: IState, action: any) {\n  const { type, props } = action;\n  let changes;\n\n  switch (type) {\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index]),\n      };\n      break;\n    case stateChangeTypes.InputBlur:\n      if (state.isOpen) {\n        changes = {\n          isOpen: false,\n        };\n      }\n      break;\n    case stateChangeTypes.InputChange:\n      changes = {\n        isOpen: true,\n        inputValue: action.inputValue,\n      };\n      break;\n\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n      };\n      break;\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n      };\n      break;\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false,\n      };\n      break;\n\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem),\n      };\n      break;\n    case stateChangeTypes.ControlledPropUpdatedSelectedItem:\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue,\n      };\n      break;\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n        inputValue: getDefaultValue(props, 'inputValue'),\n      };\n      break;\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n\n  return {\n    ...state,\n    ...changes,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}