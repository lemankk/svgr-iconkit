{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _react=_interopRequireDefault(require(\"react\"));var _Input=require(\"../../primitives/Input\");var _Context=require(\"./Context\");var _reactNative=require(\"react-native-web/dist/index\");var _utils=require(\"../../../utils\");var _this=this,_jsxFileName=\"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/PinInput/PinInputField.tsx\";var PinInputFiled=function PinInputFiled(_ref,ref){var _ref$fieldIndex=_ref.fieldIndex,fieldIndex=_ref$fieldIndex===void 0?0:_ref$fieldIndex,pDefaultValue=_ref.defaultValue,props=(0,_objectWithoutProperties2.default)(_ref,[\"fieldIndex\",\"defaultValue\"]);var _React$useContext=_react.default.useContext(_Context.PinInputContext),handleChange=_React$useContext.handleChange,cValue=_React$useContext.value,setRefList=_React$useContext.setRefList,cDefaultValue=_React$useContext.defaultValue,handleMultiValueChange=_React$useContext.handleMultiValueChange,context=(0,_objectWithoutProperties2.default)(_React$useContext,[\"handleChange\",\"value\",\"setRefList\",\"defaultValue\",\"handleMultiValueChange\"]);cDefaultValue=cDefaultValue&&cDefaultValue[fieldIndex];var defaultValue=pDefaultValue||cDefaultValue;var value=cValue&&cValue[fieldIndex];var keyPressHandler=function keyPressHandler(event){if(_reactNative.Platform.OS!=='web'){if(event.nativeEvent.key>=0&&event.nativeEvent.key<=9){handleChange&&handleChange(event.nativeEvent.key,fieldIndex);}else if(event.nativeEvent.key==='Backspace'){handleChange&&handleChange('',fieldIndex);}}};var textChangeHandler=function textChangeHandler(value){handleMultiValueChange&&handleMultiValueChange(value,fieldIndex);};var myRef=_react.default.useRef(null);_react.default.useEffect(function(){setRefList&&setRefList(myRef,fieldIndex);},[myRef,fieldIndex,setRefList]);return _react.default.createElement(_Input.Input,(0,_extends2.default)({ref:(0,_utils.mergeRefs)([myRef,ref])},context,props,{onKeyPress:function onKeyPress(event){return keyPressHandler(event);},onChangeText:function onChangeText(value){return textChangeHandler(value);},keyboardType:\"numeric\",defaultValue:defaultValue,value:value,__self:_this,__source:{fileName:_jsxFileName,lineNumber:47,columnNumber:5}}));};var _default=_react.default.memo(_react.default.forwardRef(PinInputFiled));exports.default=_default;","map":{"version":3,"sources":["PinInputField.tsx"],"names":["PinInputFiled","fieldIndex","defaultValue","pDefaultValue","props","handleChange","cValue","setRefList","cDefaultValue","handleMultiValueChange","context","React","PinInputContext","value","keyPressHandler","Platform","event","textChangeHandler","myRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Input } from '../../primitives/Input';\nimport type { IPinInputFieldProps, IPinInputContext } from './types';\nimport { PinInputContext } from './Context';\nimport { Platform } from 'react-native';\nimport { mergeRefs } from '../../../utils';\n\nconst PinInputFiled = (\n  {\n    fieldIndex = 0,\n    defaultValue: pDefaultValue,\n    ...props\n  }: IPinInputFieldProps,\n  ref?: any\n) => {\n  let {\n    handleChange,\n    value: cValue,\n    setRefList,\n    defaultValue: cDefaultValue,\n    handleMultiValueChange,\n    ...context\n  }: IPinInputContext = React.useContext(PinInputContext);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  let defaultValue = pDefaultValue || cDefaultValue;\n  let value = cValue && cValue[fieldIndex];\n\n  const keyPressHandler = (event: any) => {\n    if (Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n  const textChangeHandler = (value: any) => {\n    // Also used to handle change for Android.\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  const myRef = React.useRef(null);\n  React.useEffect(() => {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  return (\n    <Input\n      ref={mergeRefs([myRef, ref])}\n      {...context}\n      {...props}\n      onKeyPress={(event) => keyPressHandler(event)}\n      onChangeText={(value) => textChangeHandler(value)}\n      keyboardType=\"numeric\"\n      defaultValue={defaultValue}\n      value={value}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(PinInputFiled));\n"]},"metadata":{},"sourceType":"script"}