{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.extractProps=extractProps;exports.mergeUnderscoreProps=mergeUnderscoreProps;exports.calculateProps=calculateProps;exports.resolveValueWithBreakpoint=exports.extractPropertyFromFunction=void 0;var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _lodash=_interopRequireDefault(require(\"lodash.get\"));var _lodash2=_interopRequireDefault(require(\"lodash.isnil\"));var _lodash3=_interopRequireDefault(require(\"lodash.mergewith\"));var _lodash4=_interopRequireDefault(require(\"lodash.clonedeep\"));var _base=require(\"./../../theme/base\");var _tools=require(\"./../../theme/tools\");var _useContrastText=require(\"../useContrastText\");function extractProps(props,theme,colorModeProps,componentTheme,currentBreakpoint){var newProps={};for(var property in props){if(_base.themePropertyMap[property]){var propValues=extractPropertyFromFunction(property,props,theme,componentTheme);if(typeof propValues==='string'||typeof propValues==='number'){newProps[property]=propValues;}else if(!(0,_lodash2.default)(propValues)){for(var nestedProp in propValues){newProps[nestedProp]=(0,_lodash.default)(theme,_base.themePropertyMap[nestedProp]+\".\"+propValues[nestedProp],propValues[nestedProp]);}}else if(property==='shadow'){var shadowProps=theme[_base.themePropertyMap[property]](colorModeProps)[props[property]];if(!(0,_lodash2.default)(shadowProps)){newProps=(0,_extends2.default)({},newProps,shadowProps);}}else{newProps[property]=resolveValueWithBreakpoint(props[property],currentBreakpoint,property);}}else{newProps[property]=resolveValueWithBreakpoint(props[property],currentBreakpoint,property);}}return(0,_lodash4.default)(newProps);}function filterDefaultProps(props,defaultProps){var _extractInObject=(0,_tools.extractInObject)(defaultProps,Object.keys(props)),_extractInObject2=(0,_slicedToArray2.default)(_extractInObject,2),resultProps=_extractInObject2[1];return resultProps;}var extractPropertyFromFunction=function extractPropertyFromFunction(property,props,theme,componentTheme){var propValues;if(componentTheme&&typeof componentTheme[_base.themePropertyMap[property]]==='function'){var funcProps=componentTheme[_base.themePropertyMap[property]]((0,_extends2.default)({theme:theme},props));var isNested=Object.keys(funcProps).some(function(key){return funcProps[key]&&typeof funcProps[key]==='object';});propValues=isNested?(0,_extends2.default)({},(0,_lodash.default)(funcProps,\"\"+props[property])):(0,_extends2.default)({},funcProps);}else{propValues=(0,_lodash.default)(componentTheme,_base.themePropertyMap[property]+\".\"+props[property]);}return propValues;};exports.extractPropertyFromFunction=extractPropertyFromFunction;function mergeUnderscoreProps(newProps,props){var _props=Object.keys(newProps).filter(function(propName){return propName.startsWith('_');});_props.forEach(function(propName){var _newProps$bg,_newProps$propName$co,_newProps$propName,_props$propName;var bg=(_newProps$bg=newProps.bg)!=null?_newProps$bg:newProps.backgroundColor;var textColor=bg?{color:(0,_useContrastText.useContrastText)(bg,(_newProps$propName$co=(_newProps$propName=newProps[propName])==null?void 0:_newProps$propName.color)!=null?_newProps$propName$co:(_props$propName=props[propName])==null?void 0:_props$propName.color)}:{};newProps[propName]=(0,_extends2.default)({},textColor,newProps[propName],props[propName]);});return newProps;}var resolveValueWithBreakpoint=function resolveValueWithBreakpoint(values,currentBreakpoint,property){if((0,_tools.hasValidBreakpointFormat)(values,property)){return(0,_tools.findLastValidBreakpoint)(values,currentBreakpoint);}else{return values;}};exports.resolveValueWithBreakpoint=resolveValueWithBreakpoint;function calculateProps(theme,colorModeProps,componentTheme,props,windowWidth){var currentBreakpoint=(0,_tools.getClosestBreakpoint)(theme.breakpoints,windowWidth);if(!props){props={};}var newProps;if(componentTheme){newProps=extractProps(filterDefaultProps(props,componentTheme.defaultProps),theme,colorModeProps,componentTheme,currentBreakpoint);var componentBaseStyle=typeof componentTheme.baseStyle!=='function'?componentTheme.baseStyle:componentTheme.baseStyle((0,_extends2.default)({theme:theme},newProps,props,colorModeProps));newProps=(0,_lodash3.default)(newProps,componentBaseStyle,function(objValue,srcValue,key){if(!(0,_lodash2.default)(objValue)){delete newProps[key];}});var variant=props.variant||(0,_lodash.default)(componentTheme,'defaultProps.variant');if(variant&&componentTheme.variants&&componentTheme.variants[variant]){var colorScheme=props.colorScheme||(0,_lodash.default)(componentTheme,'defaultProps.colorScheme');var variantProps=componentTheme.variants[variant]((0,_extends2.default)({},props,newProps,{colorScheme:colorScheme,theme:theme},colorModeProps));variantProps=extractProps(variantProps,theme,colorModeProps,componentTheme,currentBreakpoint);newProps=(0,_lodash3.default)(newProps,variantProps,function(objValue,srcValue,key){if(!(0,_lodash2.default)(objValue)){delete newProps[key];}});delete newProps.variant;delete newProps.colorScheme;}}var extractedProps=extractProps(props,theme,colorModeProps,componentTheme,currentBreakpoint);newProps=(0,_lodash3.default)(newProps,extractedProps,function(objValue,srcValue,key){if(!(0,_lodash2.default)(objValue)){delete newProps[key];}});newProps=mergeUnderscoreProps(newProps,props);return newProps;}","map":{"version":3,"sources":["utils.ts"],"names":["newProps","themePropertyMap","propValues","extractPropertyFromFunction","property","shadowProps","theme","props","resolveValueWithBreakpoint","resultProps","Object","componentTheme","funcProps","isNested","_props","propName","bg","textColor","color","currentBreakpoint","extractProps","filterDefaultProps","componentBaseStyle","variant","colorScheme","variantProps","extractedProps","mergeUnderscoreProps"],"mappings":"ggBAAA,GAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA,CACA,GAAA,CAAA,QAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA,CACA,GAAA,CAAA,QAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA,CACA,GAAA,CAAA,QAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAA,OAAA,sBAAA,CACA,GAAA,CAAA,MAAA,CAAA,OAAA,uBAAA,CAMA,GAAA,CAAA,gBAAA,CAAA,OAAA,sBAAA,CAcO,QAAA,CAAA,YAAA,CAAA,KAAA,CAAA,KAAA,CAAA,cAAA,CAAA,cAAA,CAAA,iBAAA,CAML,CACA,GAAIA,CAAAA,QAAa,CAAjB,EAAA,CACA,IAAK,GAAL,CAAA,QAAA,GAAA,CAAA,KAAA,CAA4B,CAE1B,GAAIC,KAAAA,CAAAA,gBAAAA,CAAJ,QAAIA,CAAJ,CAAgC,CAC9B,GAAIC,CAAAA,UAAU,CAAGC,2BAA2B,CAAA,QAAA,CAAA,KAAA,CAAA,KAAA,CAA5C,cAA4C,CAA5C,CAMA,GAAI,MAAA,CAAA,UAAA,GAAA,QAAA,EAAkC,MAAA,CAAA,UAAA,GAAtC,QAAA,CAAsE,CACpEH,QAAQ,CAARA,QAAQ,CAARA,CAAAA,UAAAA,CADF,CAAA,IAEO,IAAI,CAAC,CAAA,EAAA,QAAA,CAAA,OAAA,EAAL,UAAK,CAAL,CAAwB,CAC7B,IAAK,GAAL,CAAA,UAAA,GAAA,CAAA,UAAA,CAAmC,CACjCA,QAAQ,CAARA,UAAQ,CAARA,CAAuB,CAAA,EAAA,OAAA,CAAA,OAAA,EAAA,KAAA,CAElBC,KAAAA,CAAAA,gBAAAA,CAFkB,UAElBA,EAFkB,GAElBA,CAAgCC,UAAU,CAFxB,UAEwB,CAFxB,CAGrBA,UAAU,CAHZF,UAGY,CAHW,CAAvBA,CAMH,CARM,CAAA,IAQA,IAAII,QAAQ,GAAZ,QAAA,CAA2B,CAChC,GAAIC,CAAAA,WAAW,CAAGC,KAAK,CAACL,KAAAA,CAAAA,gBAAAA,CAANK,QAAML,CAAD,CAALK,CAAAA,cAAAA,EAChBC,KAAK,CADP,QACO,CADWD,CAAlB,CAGA,GAAI,CAAC,CAAA,EAAA,QAAA,CAAA,OAAA,EAAL,WAAK,CAAL,CAAyB,CACvBN,QAAQ,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,EAAA,CAAA,QAAA,CAARA,WAAQ,CAARA,CAEH,CAPM,CAAA,IAOA,CACLA,QAAQ,CAARA,QAAQ,CAARA,CAAqBQ,0BAA0B,CAC7CD,KAAK,CADwC,QACxC,CADwC,CAAA,iBAAA,CAA/CP,QAA+C,CAA/CA,CAMH,CA/BD,CAAA,IA+BO,CACLA,QAAQ,CAARA,QAAQ,CAARA,CAAqBQ,0BAA0B,CAC7CD,KAAK,CADwC,QACxC,CADwC,CAAA,iBAAA,CAA/CP,QAA+C,CAA/CA,CAMH,CACD,OAAO,CAAA,EAAA,QAAA,CAAA,OAAA,EAAP,QAAO,CAAP,CAMF,SAAA,CAAA,kBAAA,CAAA,KAAA,CAAA,YAAA,CAA2D,CAAA,GAAA,CAAA,gBAAA,CACnC,CAAA,EAAA,MAAA,CAAA,eAAA,EAAA,YAAA,CAA8BU,MAAM,CAANA,IAAAA,CADK,KACLA,CAA9B,CADmC,CAAA,iBAAA,CAAA,CAAA,EAAA,eAAA,CAAA,OAAA,EAAA,gBAAA,CAAA,CAAA,CAAA,CAClDD,WADkD,CAAA,iBAAA,CAAA,CAAA,CAAA,CAEzD,MAAA,CAAA,WAAA,CAYK,IAAMN,CAAAA,2BAA2B,CAA3BA,QAAAA,CAAAA,2BAAAA,CAA8B,QAA9BA,CAA8B,KAA9BA,CAA8B,KAA9BA,CAA8B,cAA9BA,CAKR,CACH,GAAA,CAAA,UAAA,CAEA,GACEQ,cAAc,EACd,MAAOA,CAAAA,cAAc,CAACV,KAAAA,CAAAA,gBAAAA,CAAtB,QAAsBA,CAAD,CAArB,GAFF,UAAA,CAGE,CACA,GAAIW,CAAAA,SAAS,CAAGD,cAAc,CAACV,KAAAA,CAAAA,gBAAAA,CAAfU,QAAeV,CAAD,CAAdU,CAAAA,CAAAA,EAAAA,SAAAA,CAAAA,OAAAA,EAAAA,CACdL,KAAK,CADSK,KAAAA,CAAAA,CAAhB,KAAgBA,CAAAA,CAAhB,CAKA,GAAIE,CAAAA,QAAiB,CAAGH,MAAM,CAANA,IAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAA4B,SAAA,GAAA,CAAe,CACjE,MAAOE,CAAAA,SAAS,CAATA,GAAS,CAATA,EAAkB,MAAOA,CAAAA,SAAS,CAAhB,GAAgB,CAAhB,GAAzB,QAAA,CADF,CAAwBF,CAAxB,CAIAR,UAAU,CAAGW,QAAQ,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,EAAA,CACZ,CAAA,EAAA,OAAA,CAAA,OAAA,EAAA,SAAA,CAAA,GAAkBN,KAAK,CADX,QACW,CAAvB,CADY,CAAA,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,EAAA,CAArBL,SAAqB,CAArBA,CAbF,CAAA,IAgBO,CAELA,UAAU,CAAG,CAAA,EAAA,OAAA,CAAA,OAAA,EAAA,cAAA,CAERD,KAAAA,CAAAA,gBAAAA,CAFQ,QAERA,EAFQ,GAERA,CAA8BM,KAAK,CAFxCL,QAEwC,CAF3B,CAAbA,CAKF,OAAA,CAAA,UAAA,CA/BK,CAAA,C,gEAqCA,QAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,KAAA,CAAyD,CAC9D,GAAMY,CAAAA,MAAM,CAAGJ,MAAM,CAANA,IAAAA,CAAAA,QAAAA,EAAAA,MAAAA,CAA6B,SAAA,QAAA,CAAA,CAAA,MAC1CK,CAAAA,QAAQ,CAARA,UAAAA,CAD0C,GAC1CA,CAD0C,CAA5C,CAAeL,CAAf,CAGAI,MAAM,CAANA,OAAAA,CAAe,SAAA,QAAA,CAAsB,CAAA,GAAA,CAAA,YAAA,CAAA,qBAAA,CAAA,kBAAA,CAAA,eAAA,CAEnC,GAAME,CAAAA,EAAE,CAAA,CAAA,YAAA,CAAGhB,QAAQ,CAAX,EAAA,GAAA,IAAA,CAAA,YAAA,CAAkBA,QAAQ,CAAlC,eAAA,CACA,GAAMiB,CAAAA,SAAS,CAAGD,EAAE,CAChB,CACEE,KAAK,CAAE,CAAA,EAAA,gBAAA,CAAA,eAAA,EAAA,EAAA,CAAA,CAAA,qBAAA,CAAA,CAAA,kBAAA,CAELlB,QAAQ,CAFH,QAEG,CAFH,GAAA,IAAA,CAAA,IAAA,EAAA,CAELA,kBAAAA,CAFK,KAAA,GAAA,IAAA,CAAA,qBAAA,CAAA,CAAA,eAAA,CAEwBO,KAAK,CAF7B,QAE6B,CAF7B,GAAA,IAAA,CAAA,IAAA,EAAA,CAEwBA,eAAAA,CAJjB,KAEP,CADT,CADgB,CAApB,EAAA,CASAP,QAAQ,CAARA,QAAQ,CAARA,CAAAA,CAAAA,EAAAA,SAAAA,CAAAA,OAAAA,EAAAA,EAAAA,CAAAA,SAAAA,CAEKA,QAAQ,CAFbA,QAEa,CAFbA,CAGKO,KAAK,CAHVP,QAGU,CAHVA,CAAAA,CAZFc,CAAAA,EAkBA,MAAA,CAAA,QAAA,CAWK,IAAMN,CAAAA,0BAA0B,CAA1BA,QAAAA,CAAAA,0BAAAA,CAA6B,MAA7BA,CAA6B,iBAA7BA,CAA6B,QAA7BA,CAIR,CACH,GAAI,CAAA,EAAA,MAAA,CAAA,wBAAA,EAAA,MAAA,CAAJ,QAAI,CAAJ,CAAgD,CAG9C,MAAO,CAAA,EAAA,MAAA,CAAA,uBAAA,EAAA,MAAA,CAAP,iBAAO,CAAP,CAHF,CAAA,IAIO,CACL,MAAA,CAAA,MAAA,CAEH,CAZM,CAAA,C,8DAwBA,QAAA,CAAA,cAAA,CAAA,KAAA,CAAA,cAAA,CAAA,cAAA,CAAA,KAAA,CAAA,WAAA,CAML,CACA,GAAIW,CAAAA,iBAAiB,CAAG,CAAA,EAAA,MAAA,CAAA,oBAAA,EAAqBb,KAAK,CAA1B,WAAA,CAAxB,WAAwB,CAAxB,CACA,GAAI,CAAJ,KAAA,CAAY,CACVC,KAAK,CAALA,EAAAA,CAGF,IAAA,CAAA,QAAA,CACA,GAAA,cAAA,CAAoB,CAElBP,QAAQ,CAAGoB,YAAY,CACrBC,kBAAkB,CAAA,KAAA,CAAQV,cAAc,CADnB,YACH,CADG,CAAA,KAAA,CAAA,cAAA,CAAA,cAAA,CAAvBX,iBAAuB,CAAvBA,CAQA,GAAIsB,CAAAA,kBAAkB,CACpB,MAAOX,CAAAA,cAAc,CAArB,SAAA,GAAA,UAAA,CACIA,cAAc,CADlB,SAAA,CAEIA,cAAc,CAAdA,SAAAA,CAAAA,CAAAA,EAAAA,SAAAA,CAAAA,OAAAA,EAAAA,CACEL,KAAK,CADPK,KAAAA,CAAAA,CAAAA,QAAAA,CAAAA,KAAAA,CAHN,cAGMA,CAAAA,CAHN,CASAX,QAAQ,CAAG,CAAA,EAAA,QAAA,CAAA,OAAA,EAAA,QAAA,CAAA,kBAAA,CAIT,SAAA,QAAA,CAAA,QAAA,CAAA,GAAA,CAA6B,CAC3B,GAAI,CAAC,CAAA,EAAA,QAAA,CAAA,OAAA,EAAL,QAAK,CAAL,CAAsB,CACpB,MAAOA,CAAAA,QAAQ,CAAf,GAAe,CAAf,CAEH,CARHA,CAAW,CAAXA,CAWA,GAAMuB,CAAAA,OAAO,CACXhB,KAAK,CAALA,OAAAA,EAAiB,CAAA,EAAA,OAAA,CAAA,OAAA,EAAA,cAAA,CADnB,sBACmB,CADnB,CAGA,GACEgB,OAAO,EACPZ,cAAc,CADdY,QAAAA,EAEAZ,cAAc,CAAdA,QAAAA,CAHF,OAGEA,CAHF,CAIE,CACA,GAAMa,CAAAA,WAAW,CACfjB,KAAK,CAALA,WAAAA,EAAqB,CAAA,EAAA,OAAA,CAAA,OAAA,EAAA,cAAA,CADvB,0BACuB,CADvB,CAEA,GAAIkB,CAAAA,YAAY,CAAGd,cAAc,CAAdA,QAAAA,CAAAA,OAAAA,EAAAA,CAAAA,EAAAA,SAAAA,CAAAA,OAAAA,EAAAA,EAAAA,CAAAA,KAAAA,CAAAA,QAAAA,CAAAA,CAGjBa,WAAW,CAHMb,WAAAA,CAIjBL,KAAK,CAJYK,KAAAA,CAAAA,CAAnB,cAAmBA,CAAAA,CAAnB,CAOAc,YAAY,CAAGL,YAAY,CAAA,YAAA,CAAA,KAAA,CAAA,cAAA,CAAA,cAAA,CAA3BK,iBAA2B,CAA3BA,CAQAzB,QAAQ,CAAG,CAAA,EAAA,QAAA,CAAA,OAAA,EAAA,QAAA,CAAA,YAAA,CAIT,SAAA,QAAA,CAAA,QAAA,CAAA,GAAA,CAA6B,CAC3B,GAAI,CAAC,CAAA,EAAA,QAAA,CAAA,OAAA,EAAL,QAAK,CAAL,CAAsB,CACpB,MAAOA,CAAAA,QAAQ,CAAf,GAAe,CAAf,CAEH,CARHA,CAAW,CAAXA,CAUA,MAAOA,CAAAA,QAAQ,CAAf,OAAA,CACA,MAAOA,CAAAA,QAAQ,CAAf,WAAA,CAEH,CAED,IAAI0B,CAAAA,cAAc,CAAGN,YAAY,CAAA,KAAA,CAAA,KAAA,CAAA,cAAA,CAAA,cAAA,CAAjC,iBAAiC,CAAjC,CASApB,QAAQ,CAAG,CAAA,EAAA,QAAA,CAAA,OAAA,EAAA,QAAA,CAAA,cAAA,CAAoC,SAAA,QAAA,CAAA,QAAA,CAAA,GAAA,CAA6B,CAC1E,GAAI,CAAC,CAAA,EAAA,QAAA,CAAA,OAAA,EAAL,QAAK,CAAL,CAAsB,CACpB,MAAOA,CAAAA,QAAQ,CAAf,GAAe,CAAf,CAEH,CAJDA,CAAW,CAAXA,CAKAA,QAAQ,CAAG2B,oBAAoB,CAAA,QAAA,CAA/B3B,KAA+B,CAA/BA,CACA,MAAA,CAAA,QAAA,CACD","sourcesContent":["import get from 'lodash.get';\nimport isNil from 'lodash.isnil';\nimport mergeWith from 'lodash.mergewith';\nimport cloneDeep from 'lodash.clonedeep';\nimport { themePropertyMap } from './../../theme/base';\nimport {\n  getClosestBreakpoint,\n  findLastValidBreakpoint,\n  hasValidBreakpointFormat,\n  extractInObject,\n} from './../../theme/tools';\nimport { useContrastText } from '../useContrastText';\n\n/*\n Extract props from theme props and omit those from props\n*/\n/**\n *\n * @param props Props passed by the user\n * @param theme Theme object\n * @param colorModeProps `colorMode` object\n * @param componentTheme Theme for specific components\n * @param currentBreakpoint Current breakpoint values\n * @returns Extracting props from defaultProps while overriding the props that are already present\n */\nexport function extractProps(\n  props: any,\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  currentBreakpoint: number\n) {\n  let newProps: any = {};\n  for (let property in props) {\n    // If the property exists in themePropertyMap then get its value\n    if (themePropertyMap[property]) {\n      let propValues = extractPropertyFromFunction(\n        property,\n        props,\n        theme,\n        componentTheme\n      );\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        newProps[property] = propValues;\n      } else if (!isNil(propValues)) {\n        for (let nestedProp in propValues) {\n          newProps[nestedProp] = get(\n            theme,\n            `${themePropertyMap[nestedProp]}.${propValues[nestedProp]}`,\n            propValues[nestedProp]\n          );\n        }\n      } else if (property === 'shadow') {\n        let shadowProps = theme[themePropertyMap[property]](colorModeProps)[\n          props[property]\n        ];\n        if (!isNil(shadowProps)) {\n          newProps = { ...newProps, ...shadowProps };\n        }\n      } else {\n        newProps[property] = resolveValueWithBreakpoint(\n          props[property],\n          currentBreakpoint,\n          property\n        );\n      }\n    } else {\n      newProps[property] = resolveValueWithBreakpoint(\n        props[property],\n        currentBreakpoint,\n        property\n      );\n    }\n  }\n  return cloneDeep(newProps);\n}\n\n/*\nRemove props from defaultProps that are already present in props\n*/\nfunction filterDefaultProps(props: any, defaultProps: any) {\n  let [, resultProps] = extractInObject(defaultProps, Object.keys(props));\n  return resultProps;\n}\n\n/**\n * If property is functional in componentTheme, get its returned object\n *\n * @param property : name of the prop\n * @param props : all props\n * @param theme : provided theme without components\n * @param componentTheme : component specific theme\n * @returns\n */\nexport const extractPropertyFromFunction = (\n  property: string,\n  props: any,\n  theme: any,\n  componentTheme: any\n) => {\n  let propValues;\n  // Check if the entry in the theme is a function then calling it with all theme and props as params\n  if (\n    componentTheme &&\n    typeof componentTheme[themePropertyMap[property]] === 'function'\n  ) {\n    let funcProps = componentTheme[themePropertyMap[property]]({\n      theme,\n      ...props,\n    });\n    // Check if returned object from componentTheme is a nested object\n    let isNested: boolean = Object.keys(funcProps).some(function (key) {\n      return funcProps[key] && typeof funcProps[key] === 'object';\n    });\n    // If the returned value is nested object then find the property value in it, otherwise return the whole object\n    propValues = isNested\n      ? { ...get(funcProps, `${props[property]}`) }\n      : { ...funcProps };\n  } else {\n    // If the entry is any value other than function then return the whole object or value\n    propValues = get(\n      componentTheme,\n      `${themePropertyMap[property]}.${props[property]}`\n    );\n  }\n  return propValues;\n};\n\n/*\nMerge _props and apply contrastText color if not passed by theme or user\n*/\nexport function mergeUnderscoreProps(newProps: any, props: any) {\n  const _props = Object.keys(newProps).filter((propName) =>\n    propName.startsWith('_')\n  );\n  _props.forEach((propName: string) => {\n    // Adding color based on bg contrast if no color is given\n    const bg = newProps.bg ?? newProps.backgroundColor;\n    const textColor = bg\n      ? {\n          color: useContrastText(\n            bg,\n            newProps[propName]?.color ?? props[propName]?.color\n          ),\n        }\n      : {};\n    // Overriding calculated props with user added props\n    newProps[propName] = {\n      ...textColor,\n      ...newProps[propName],\n      ...props[propName],\n    };\n  });\n  return newProps;\n}\n\n/**\n *\n * Checks the property and resolves it if it has breakpoints\n * @param values : value from props\n * @param currentBreakpoint : current value for which breakpoint will be calculated\n * @param property : property name\n * @returns\n */\nexport const resolveValueWithBreakpoint = (\n  values: any,\n  currentBreakpoint: number,\n  property: any\n) => {\n  if (hasValidBreakpointFormat(values, property)) {\n    // Check the last valid breakpoint value from all values\n    // If current breakpoint is `md` and we have `base` then `lg`, then last value will be taken(`base` in this case)\n    return findLastValidBreakpoint(values, currentBreakpoint);\n  } else {\n    return values;\n  }\n};\n\n/**\n * Takes all prop related data and returns the props that needs to be applied to the component\n *\n * @param theme Theme object\n * @param colorModeProps Color mode information\n * @param componentTheme Theme object for the specific component\n * @param props Props passed by the user\n * @param windowWidth Width of the current window\n * @returns props to be applied\n */\nexport function calculateProps(\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  props: any,\n  windowWidth: any\n) {\n  let currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n  if (!props) {\n    props = {};\n  }\n\n  let newProps: any;\n  if (componentTheme) {\n    // Extracting props from defaultProps\n    newProps = extractProps(\n      filterDefaultProps(props, componentTheme.defaultProps),\n      theme,\n      colorModeProps,\n      componentTheme,\n      currentBreakpoint\n    );\n    // Extracting props from base style\n    let componentBaseStyle =\n      typeof componentTheme.baseStyle !== 'function'\n        ? componentTheme.baseStyle\n        : componentTheme.baseStyle({\n            theme,\n            ...newProps,\n            ...props,\n            ...colorModeProps,\n          });\n    newProps = mergeWith(\n      newProps,\n      componentBaseStyle,\n      // @ts-ignore\n      (objValue, srcValue, key) => {\n        if (!isNil(objValue)) {\n          delete newProps[key];\n        }\n      }\n    );\n\n    const variant =\n      props.variant || get(componentTheme, 'defaultProps.variant');\n    // Extracting props from variant\n    if (\n      variant &&\n      componentTheme.variants &&\n      componentTheme.variants[variant]\n    ) {\n      const colorScheme =\n        props.colorScheme || get(componentTheme, 'defaultProps.colorScheme');\n      let variantProps = componentTheme.variants[variant]({\n        ...props,\n        ...newProps,\n        colorScheme,\n        theme,\n        ...colorModeProps,\n      });\n      variantProps = extractProps(\n        variantProps,\n        theme,\n        colorModeProps,\n        componentTheme,\n        currentBreakpoint\n      );\n      // added this to handle order of props\n      newProps = mergeWith(\n        newProps,\n        variantProps,\n        // @ts-ignore\n        (objValue, srcValue, key) => {\n          if (!isNil(objValue)) {\n            delete newProps[key];\n          }\n        }\n      );\n      delete newProps.variant;\n      delete newProps.colorScheme;\n    }\n  }\n  // Extracting props from normal props\n  let extractedProps = extractProps(\n    props,\n    theme,\n    colorModeProps,\n    componentTheme,\n    currentBreakpoint\n  );\n  // added this to handle order of props\n  // @ts-ignore\n  newProps = mergeWith(newProps, extractedProps, (objValue, srcValue, key) => {\n    if (!isNil(objValue)) {\n      delete newProps[key];\n    }\n  });\n  newProps = mergeUnderscoreProps(newProps, props);\n  return newProps;\n}\n"]},"metadata":{},"sourceType":"script"}