{"ast":null,"code":"import{useToggleState}from\"@react-stately/toggle\";import{useLabel}from\"@react-aria/label\";import{filterDOMProps,mergeProps}from\"@react-aria/utils\";import{useToggle}from\"@react-aria/toggle\";import{useEffect}from\"react\";import _babelRuntimeHelpersEsmExtends from\"@babel/runtime/helpers/esm/extends\";export function useCheckbox(props,state,inputRef){var _useToggle=useToggle(props,state,inputRef),inputProps=_useToggle.inputProps;var isSelected=state.isSelected;var isIndeterminate=props.isIndeterminate;useEffect(function(){if(inputRef.current){inputRef.current.indeterminate=isIndeterminate;}});return{inputProps:_babelRuntimeHelpersEsmExtends({},inputProps,{checked:isSelected,'aria-checked':isIndeterminate?'mixed':isSelected})};}var $c1125120fa765e2757aafb57a69ea88$export$checkboxGroupNames=new WeakMap();export function useCheckboxGroup(props,state){var isDisabled=props.isDisabled,name=props.name;var _useLabel=useLabel(_babelRuntimeHelpersEsmExtends({},props,{labelElementType:'span'})),labelProps=_useLabel.labelProps,fieldProps=_useLabel.fieldProps;var domProps=filterDOMProps(props,{labelable:true});$c1125120fa765e2757aafb57a69ea88$export$checkboxGroupNames.set(state,name);return{groupProps:mergeProps(domProps,_babelRuntimeHelpersEsmExtends({role:'group','aria-disabled':isDisabled||undefined},fieldProps)),labelProps:labelProps};}export function useCheckboxGroupItem(props,state,inputRef){var toggleState=useToggleState({isReadOnly:props.isReadOnly||state.isReadOnly,isSelected:state.isSelected(props.value),onChange:function onChange(isSelected){if(isSelected){state.addValue(props.value);}else{state.removeValue(props.value);}if(props.onChange){props.onChange(isSelected);}}});var _useCheckbox=useCheckbox(_babelRuntimeHelpersEsmExtends({},props,{isReadOnly:props.isReadOnly||state.isReadOnly,isDisabled:props.isDisabled||state.isDisabled,name:props.name||$c1125120fa765e2757aafb57a69ea88$export$checkboxGroupNames.get(state)}),toggleState,inputRef),inputProps=_useCheckbox.inputProps;return{inputProps:inputProps};}","map":{"version":3,"sources":["packages/@react-aria/checkbox/src/useCheckbox.ts","packages/@react-aria/checkbox/src/utils.ts","packages/@react-aria/checkbox/src/useCheckboxGroup.ts","packages/@react-aria/checkbox/src/useCheckboxGroupItem.ts"],"names":["inputProps","useToggle","isSelected","isIndeterminate","useEffect","inputRef","checked","checkboxGroupNames","name","fieldProps","useLabel","labelElementType","domProps","filterDOMProps","labelable","groupProps","mergeProps","role","isDisabled","undefined","labelProps","toggleState","useToggleState","isReadOnly","props","state","onChange"],"mappings":"+SA8BO,SAAA,CAAA,WAAA,CAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAwH,CAC7H,eAAmBC,SAAS,CAAA,KAAA,CAAA,KAAA,CAA5B,QAA4B,CAA5B,CAAKD,UAAL,YAAKA,UAAL,CACA,GAAKE,CAAAA,UAAL,CAAA,KAAA,CAAKA,UAAL,CAEA,GAAKC,CAAAA,eAAL,CAAA,KAAA,CAAKA,eAAL,CACAC,SAAS,CAAC,UAAM,CAGd,GAAIC,QAAQ,CAAZ,OAAA,CAAsB,CACpBA,QAAQ,CAARA,OAAAA,CAAAA,aAAAA,CAAAA,eAAAA,CACD,CALHD,CAAS,CAATA,CAQA,MAAO,CACLJ,UAAU,CAAA,8BAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAERM,OAAO,CAFC,UAAA,CAGR,eAAgBH,eAAe,CAAA,OAAA,CAAaD,UAHpC,CAAA,CADL,CAAP,CAOD,CCpCM,GAAMK,CAAAA,0DAAkB,CAAG,GAA3B,CAAA,OAA2B,EAA3B,C,MCkBA,SAAA,CAAA,gBAAA,CAAA,KAAA,CAAA,KAAA,CAAuG,CAC5G,GAAI,CAAA,UAAJ,CAAA,KAAA,CAAI,UAAJ,CAAiBC,IAAjB,CAAA,KAAA,CAAiBA,IAAjB,CAEA,cAA+BE,QAAQ,CAAA,8BAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAIrCC,gBAAgB,CAAE,MAJmB,CAAA,CAAA,CAAvC,CAAI,UAAJ,WAAI,UAAJ,CAAiBF,UAAjB,WAAiBA,UAAjB,CAOA,GAAIG,CAAAA,QAAQ,CAAGC,cAAc,CAAA,KAAA,CAAQ,CAACC,SAAS,CAAE,IAAZ,CAAR,CAA7B,CAGA,0DAAA,CAAA,GAAA,CAAA,KAAA,CAAA,IAAA,EAEA,MAAO,CACLC,UAAU,CAAEC,UAAU,CAAA,QAAA,CAAA,8BAAA,CAAA,CACpBC,IAAI,CADgB,OAAA,CAEpB,gBAAiBC,UAAU,EAAIC,SAFX,CAAA,CADjB,UACiB,CAAA,CADjB,CAMLC,UAAAA,CAAAA,UANK,CAAP,CAQD,C,MC7BM,SAAA,CAAA,oBAAA,CAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAiJ,CACtJ,GAAMC,CAAAA,WAAW,CAAGC,cAAc,CAAC,CACjCC,UAAU,CAAEC,KAAK,CAALA,UAAAA,EAAoBC,KAAK,CADJ,UAAA,CAEjCvB,UAAU,CAAEuB,KAAK,CAALA,UAAAA,CAAiBD,KAAK,CAFD,KAErBC,CAFqB,CAGjCC,QAHiC,mBAGzB,UAHyB,CAGZ,CACnB,GAAA,UAAA,CAAgB,CACdD,KAAK,CAALA,QAAAA,CAAeD,KAAK,CAApBC,KAAAA,EADF,CAAA,IAEO,CACLA,KAAK,CAALA,WAAAA,CAAkBD,KAAK,CAAvBC,KAAAA,EACD,CAED,GAAID,KAAK,CAAT,QAAA,CAAoB,CAClBA,KAAK,CAALA,QAAAA,CAAAA,UAAAA,EACD,CACF,CAbgC,CAAD,CAAlC,CAgBA,iBAAmB,WAAA,CAAA,8BAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAEjBD,UAAU,CAAEC,KAAK,CAALA,UAAAA,EAAoBC,KAAK,CAFpB,UAAA,CAGjBP,UAAU,CAAEM,KAAK,CAALA,UAAAA,EAAoBC,KAAK,CAHpB,UAAA,CAIjBjB,IAAI,CAAEgB,KAAK,CAALA,IAAAA,EAAc,0DAAA,CAAA,GAAA,CAAA,KAAA,CAJH,CAAA,CAAA,CAAA,WAAA,CAAnB,QAAmB,CAAnB,CAAKxB,UAAL,cAAKA,UAAL,CAOA,MAAO,CAACA,UAAAA,CAAAA,UAAD,CAAP,CACD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxProps} from '@react-types/checkbox';\nimport {InputHTMLAttributes, RefObject, useEffect} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useToggle} from '@react-aria/toggle';\n\nexport interface CheckboxAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component.\n * Checkboxes allow users to select multiple items from a list of individual items, or\n * to mark one individual item as selected.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useToggleState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckbox(props: AriaCheckboxProps, state: ToggleState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  let {inputProps} = useToggle(props, state, inputRef);\n  let {isSelected} = state;\n\n  let {isIndeterminate} = props;\n  useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) {\n      inputRef.current.indeterminate = isIndeterminate;\n    }\n  });\n\n  return {\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupState} from '@react-stately/checkbox';\n\nexport const checkboxGroupNames = new WeakMap<CheckboxGroupState, string>();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupProps} from '@react-types/checkbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes} from 'react';\nimport {useLabel} from '@react-aria/label';\n\ninterface CheckboxGroupAria {\n  /** Props for the checkbox group wrapper element. */\n  groupProps: HTMLAttributes<HTMLElement>,\n  /** Props for the checkbox group's visible label (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox group component.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox group.\n * @param state - State for the checkbox group, as returned by `useCheckboxGroupState`.\n */\nexport function useCheckboxGroup(props: AriaCheckboxGroupProps, state: CheckboxGroupState): CheckboxGroupAria {\n  let {isDisabled, name} = props;\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // Pass name prop from group to all items by attaching to the state.\n  checkboxGroupNames.set(state, name);\n\n  return {\n    groupProps: mergeProps(domProps, {\n      role: 'group',\n      'aria-disabled': isDisabled || undefined,\n      ...fieldProps\n    }),\n    labelProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupItemProps} from '@react-types/checkbox';\nimport {CheckboxAria, useCheckbox} from './useCheckbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {RefObject} from 'react';\nimport {useToggleState} from '@react-stately/toggle';\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component contained within a checkbox group.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useCheckboxGroupState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckboxGroupItem(props: AriaCheckboxGroupItemProps, state: CheckboxGroupState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  const toggleState = useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange(isSelected) {\n      if (isSelected) {\n        state.addValue(props.value);\n      } else {\n        state.removeValue(props.value);\n      }\n\n      if (props.onChange) {\n        props.onChange(isSelected);\n      }\n    }\n  });\n\n  let {inputProps} = useCheckbox({\n    ...props,\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || checkboxGroupNames.get(state)\n  }, toggleState, inputRef);\n\n  return {inputProps};\n}\n"]},"metadata":{},"sourceType":"module"}