{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.useLink=useLink;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _reactNative=require(\"react-native-web/dist/index\");var linkToHREF=function linkToHREF(URL){_reactNative.Linking.openURL(URL).catch(function(err){return console.error('An error occurred',err);});};var addOnPressFunctionality=function addOnPressFunctionality(href,callback){href?linkToHREF(href):'';callback?callback():function(){};};function useLink(props){var href=props.href,isExternal=props.isExternal,_onPress=props.onPress,_ref=props._ref;var platformLinkProps={};if(_reactNative.Platform.OS==='web'){platformLinkProps={href:href,onClick:_onPress};if(isExternal&&_ref.current){_ref.current.target='_blank';}}else{platformLinkProps={onPress:function onPress(){addOnPressFunctionality(href,_onPress);}};}return{linkProps:(0,_extends2.default)({},platformLinkProps,{accessibilityRole:'link',accessible:true})};}","map":{"version":3,"sources":["useLink.ts"],"names":["linkToHREF","Linking","console","addOnPressFunctionality","href","callback","isExternal","onPress","_ref","props","platformLinkProps","Platform","onClick","linkProps","accessibilityRole","accessible"],"mappings":"iNAAA,gC,2DAIA,GAAMA,CAAAA,UAAU,CAAVA,QAAAA,CAAAA,UAAAA,CAAa,GAAbA,CAA8B,CAClCC,YAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAAA,GAAAA,EAAAA,KAAAA,CAA2B,SAAA,GAAA,CAAA,CAAA,MAASC,CAAAA,OAAO,CAAPA,KAAAA,CAAAA,mBAAAA,CAAT,GAASA,CAAT,CAA3BD,CAAAA,EADF,CAAA,CAIA,GAAME,CAAAA,uBAAuB,CAAvBA,QAAAA,CAAAA,uBAAAA,CAA0B,IAA1BA,CAA0B,QAA1BA,CAAiE,CACrEC,IAAI,CAAGJ,UAAU,CAAb,IAAa,CAAb,CAAJI,EAAAA,CACAC,QAAQ,CAAGA,QAAH,EAAA,CAAgB,UAAM,CAA9BA,CAAAA,CAFF,CAAA,CAKO,QAAA,CAAA,OAAA,CAAA,KAAA,CAAsC,CAAA,GACnCD,CAAAA,IADmC,CACCK,KADD,CAAA,IAAA,CAC7BH,UAD6B,CACCG,KADD,CAAA,UAAA,CACjBF,QADiB,CACCE,KADD,CAAA,OAAA,CACRD,IADQ,CACCC,KADD,CAAA,IAAA,CAG3C,GAAIC,CAAAA,iBAAiB,CAArB,EAAA,CAEA,GAAIC,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,GAAJ,KAAA,CAA2B,CACzBD,iBAAiB,CAAG,CAClBN,IAAI,CADc,IAAA,CAElBQ,OAAO,CAFTF,QAAoB,CAApBA,CAKA,GAAIJ,UAAU,EAAIE,IAAI,CAAtB,OAAA,CAAgC,CAC9BA,IAAI,CAAJA,OAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAEH,CATD,CAAA,IASO,CACLE,iBAAiB,CAAG,CAClBH,OAAO,CAAE,QAAA,CAAA,OAAA,EAAM,CACbJ,uBAAuB,CAAA,IAAA,CAAvBA,QAAuB,CAAvBA,CAFJO,CAAoB,CAApBA,CAOF,OAAO,CACLG,SAAS,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,EAAA,CAAA,iBAAA,CAAA,CAEPC,iBAAiB,CAFV,MAAA,CAGPC,UAAU,CAJd,IACW,CAAA,CADJ,CAAP,CAOD","sourcesContent":["import { Linking, Platform } from 'react-native';\nimport type { IUseLinkProp } from './types';\nimport type { AccessibilityRole } from 'react-native';\n\nconst linkToHREF = (URL: string) => {\n  Linking.openURL(URL).catch((err) => console.error('An error occurred', err));\n};\n\nconst addOnPressFunctionality = (href: string | any, callback: any) => {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : () => {};\n};\n\nexport function useLink(props: IUseLinkProp) {\n  const { href, isExternal, onPress, _ref } = props;\n\n  let platformLinkProps = {};\n\n  if (Platform.OS === 'web') {\n    platformLinkProps = {\n      href,\n      onClick: onPress,\n    };\n    // Adding target to a tag created by RN-Web\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: () => {\n        addOnPressFunctionality(href, onPress);\n      },\n    };\n  }\n\n  return {\n    linkProps: {\n      ...platformLinkProps,\n      accessibilityRole: 'link' as AccessibilityRole,\n      accessible: true,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}