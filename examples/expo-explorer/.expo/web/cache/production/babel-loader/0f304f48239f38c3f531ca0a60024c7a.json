{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.useClipboard=useClipboard;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _react=_interopRequireDefault(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");function useClipboard(){var _React$useState=_react.default.useState(false),_React$useState2=(0,_slicedToArray2.default)(_React$useState,2),hasCopied=_React$useState2[0],setHasCopied=_React$useState2[1];var _React$useState3=_react.default.useState(''),_React$useState4=(0,_slicedToArray2.default)(_React$useState3,2),value=_React$useState4[0],setValue=_React$useState4[1];var onCopy=function onCopy(copiedValue){return _regenerator.default.async(function onCopy$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!_reactNative.Clipboard){_context.next=3;break;}_context.next=3;return _regenerator.default.awrap(_reactNative.Clipboard.setString(copiedValue));case 3:setValue(copiedValue);setHasCopied(true);case 5:case\"end\":return _context.stop();}}},null,null,null,Promise);};return{value:value,onCopy:onCopy,hasCopied:hasCopied};}","map":{"version":3,"sources":["useClipboard.ts"],"names":["hasCopied","setHasCopied","React","value","setValue","onCopy","Clipboard"],"mappings":"yVAAA,GAAA,CAAA,MAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,C,wDAGO,QAAA,CAAA,YAAA,EAAwB,CAAA,GAAA,CAAA,eAAA,CACKE,MAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CADL,KACKA,CADL,CAAA,gBAAA,CAAA,CAAA,EAAA,eAAA,CAAA,OAAA,EAAA,eAAA,CAAA,CAAA,CAAA,CACtBF,SADsB,CAAA,gBAAA,CAAA,CAAA,CAAA,CACXC,YADW,CAAA,gBAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,gBAAA,CAEHC,MAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CAFG,EAEHA,CAFG,CAAA,gBAAA,CAAA,CAAA,EAAA,eAAA,CAAA,OAAA,EAAA,gBAAA,CAAA,CAAA,CAAA,CAEtBC,KAFsB,CAAA,gBAAA,CAAA,CAAA,CAAA,CAEfC,QAFe,CAAA,gBAAA,CAAA,CAAA,CAAA,CAG7B,GAAMC,CAAAA,MAAM,CAANA,QAAAA,CAAAA,MAAAA,CAAS,WAATA,CAAS,CAAA,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA,KAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,OAAA,QAAA,CAAA,IAAA,CAAA,QAAA,CAAA,IAAA,EAAA,IAAA,EAAA,CAAA,GAAA,CACTC,YAAAA,CADS,SAAA,CAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA,KAAA,CAELA,YAAAA,CAAAA,SAAAA,CAAAA,SAAAA,CAFK,WAELA,CAFK,CAAA,CAAA,IAAA,EAAA,CAIbF,QAAQ,CAARA,WAAQ,CAARA,CACAH,YAAY,CAAZA,IAAY,CAAZA,CALa,IAAA,EAAA,CAAA,IAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAf,CAAA,CAOA,MAAO,CACLE,KAAK,CADA,KAAA,CAELE,MAAM,CAFD,MAAA,CAGLL,SAAS,CAHX,SAAO,CAAP,CAKD","sourcesContent":["import React from 'react';\nimport { Clipboard } from 'react-native';\n\nexport function useClipboard() {\n  const [hasCopied, setHasCopied] = React.useState(false);\n  const [value, setValue] = React.useState<string>('');\n  const onCopy = async (copiedValue: string) => {\n    if (Clipboard) {\n      await Clipboard.setString(copiedValue);\n    }\n    setValue(copiedValue);\n    setHasCopied(true);\n  };\n  return {\n    value,\n    onCopy,\n    hasCopied,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}