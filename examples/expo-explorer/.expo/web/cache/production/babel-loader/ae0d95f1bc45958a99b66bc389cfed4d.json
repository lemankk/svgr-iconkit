{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _react=_interopRequireWildcard(require(\"react\"));var _useThemeProps=require(\"../../../hooks/useThemeProps\");var _Stack=require(\"../Stack\");var _this=this,_jsxFileName=\"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/primitives/Button/ButtonGroup.tsx\";var _default=(0,_react.memo)((0,_react.forwardRef)(function(_ref,ref){var children=_ref.children,divider=_ref.divider,variant=_ref.variant,size=_ref.size,colorScheme=_ref.colorScheme,isDisabled=_ref.isDisabled,isAttached=_ref.isAttached,props=(0,_objectWithoutProperties2.default)(_ref,[\"children\",\"divider\",\"variant\",\"size\",\"colorScheme\",\"isDisabled\",\"isAttached\"]);var _usePropsResolution=(0,_useThemeProps.usePropsResolution)('ButtonGroup',props),space=_usePropsResolution.space,newProps=(0,_objectWithoutProperties2.default)(_usePropsResolution,[\"space\"]);var computedChildren=_react.default.Children.map(children,function(child,index){return _react.default.cloneElement(child,(0,_extends2.default)({key:\"button-group-child-\"+index,variant:variant,size:size,colorScheme:colorScheme,isDisabled:isDisabled},child.props));});return _react.default.createElement(_Stack.Stack,(0,_extends2.default)({divider:divider,space:isAttached?0:space},newProps,{ref:ref,__self:_this,__source:{fileName:_jsxFileName,lineNumber:36,columnNumber:9}}),computedChildren);}));exports.default=_default;","map":{"version":3,"sources":["ButtonGroup.tsx"],"names":["children","divider","variant","size","colorScheme","isDisabled","isAttached","props","space","newProps","computedChildren","React","key","child"],"mappings":"wbAAA,GAAA,CAAA,MAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAEA,GAAA,CAAA,cAAA,CAAA,OAAA,gCAAA,CACA,GAAA,CAAA,MAAA,CAAA,OAAA,YAAA,C,qJAEe,CAAA,EAAA,MAAA,CAAA,IAAA,EACb,CAAA,EAAA,MAAA,CAAA,UAAA,EACE,SAAA,IAAA,CAAA,GAAA,CAYK,CAVDA,GAAAA,CAAAA,QAUC,CAAA,IAAA,CAVDA,QAAAA,CACAC,OASC,CAAA,IAAA,CATDA,OADAD,CAEAE,OAQC,CAAA,IAAA,CARDA,OAFAF,CAGAG,IAOC,CAAA,IAAA,CAPDA,IAHAH,CAIAI,WAMC,CAAA,IAAA,CANDA,WAJAJ,CAKAK,UAKC,CAAA,IAAA,CALDA,UALAL,CAMAM,UAIC,CAAA,IAAA,CAJDA,UANAN,CAOGO,KAGF,CAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,EAAA,IAAA,CAAA,CAAA,UAAA,CAAA,SAAA,CAAA,SAAA,CAAA,MAAA,CAAA,aAAA,CAAA,YAAA,CAAA,YAAA,CAAA,CAVDP,CAUC,GAAA,CAAA,mBAAA,CAC4B,CAAA,EAAA,cAAA,CAAA,kBAAA,EAAA,aAAA,CAD5B,KAC4B,CAD5B,CACKQ,KADL,CAAA,mBAAA,CAAA,KAAA,CACeC,QADf,CAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,EAAA,mBAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAEH,GAAMC,CAAAA,gBAAgB,CAAGC,MAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,QAAAA,CAEvB,SAAA,KAAA,CAAA,KAAA,CAAuC,CACrC,MAAOA,CAAAA,MAAAA,CAAAA,OAAAA,CAAAA,YAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,SAAAA,CAAAA,OAAAA,EAAAA,CACLC,GAAG,CAAA,sBADED,KAAAA,CAELT,OAAO,CAFFS,OAAAA,CAGLR,IAAI,CAHCQ,IAAAA,CAILP,WAAW,CAJNO,WAAAA,CAKLN,UAAU,CALLM,UAAAA,CAAAA,CAMFE,KAAK,CANV,KAAOF,CAAAA,CAAP,CAHJ,CAAyBA,CAAzB,CAaA,MACE,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAD,KAAA,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,CACE,OAAO,CADT,OAAA,CAEE,KAAK,CAAEL,UAAU,CAAA,CAAA,CAFnB,KAAA,CAAA,CAAA,QAAA,CAAA,CAIE,GAAG,CAJL,GAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CADF,gBACE,CADF,CA7BS,CACb,CADa,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IButtonGroupProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Stack } from '../Stack';\n\nexport default memo(\n  forwardRef(\n    (\n      {\n        children,\n        divider,\n        variant,\n        size,\n        colorScheme,\n        isDisabled,\n        isAttached,\n        ...props\n      }: IButtonGroupProps,\n      ref?: any\n    ) => {\n      const { space, ...newProps } = usePropsResolution('ButtonGroup', props);\n      const computedChildren = React.Children.map(\n        children,\n        (child: JSX.Element, index: number) => {\n          return React.cloneElement(child, {\n            key: `button-group-child-${index}`,\n            variant,\n            size,\n            colorScheme,\n            isDisabled,\n            ...child.props,\n          });\n        }\n      );\n      return (\n        <Stack\n          divider={divider}\n          space={isAttached ? 0 : space}\n          {...newProps}\n          ref={ref}\n        >\n          {computedChildren}\n        </Stack>\n      );\n    }\n  )\n);\n"]},"metadata":{},"sourceType":"script"}