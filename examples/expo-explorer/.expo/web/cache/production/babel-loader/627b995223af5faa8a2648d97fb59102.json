{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.useStyledSystemPropsResolver=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _=require(\"./\");var _styled=require(\"../utils/styled\");var useStyledSystemPropsResolver=function useStyledSystemPropsResolver(props){var theme=(0,_.useTheme)();var propsWithTheme=(0,_extends2.default)({},props,{theme:theme});var styleObject={};_styled.resolversForBox.forEach(function(resolver){styleObject=(0,_extends2.default)({},styleObject,resolver(propsWithTheme));});for(var property in styleObject){if(typeof styleObject[property]==='string'&&styleObject[property].includes('px')){styleObject[property]=parseInt(styleObject[property]);}}return styleObject;};exports.useStyledSystemPropsResolver=useStyledSystemPropsResolver;","map":{"version":3,"sources":["useStyledSystemPropsResolver.ts"],"names":["useStyledSystemPropsResolver","theme","propsWithTheme","styleObject","resolversForBox","resolver","parseInt"],"mappings":"wQAAA,GAAA,CAAA,CAAA,CAAA,OAAA,MAAA,CACA,GAAA,CAAA,OAAA,CAAA,OAAA,mBAAA,CAEO,GAAMA,CAAAA,4BAA4B,CAA5BA,QAAAA,CAAAA,4BAAAA,CAA+B,KAA/BA,CAA+C,CAC1D,GAAMC,CAAAA,KAAK,CAAG,CAAA,EAAA,CAAA,CAAd,QAAc,GAAd,CACA,GAAMC,CAAAA,cAAc,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,EAAA,CAAA,KAAA,CAAA,CAAeD,KAAK,CAAxC,KAAoB,CAAA,CAApB,CACA,GAAIE,CAAAA,WAAgB,CAApB,EAAA,CACAC,OAAAA,CAAAA,eAAAA,CAAAA,OAAAA,CAAwB,SAAA,QAAA,CAAmB,CACzCD,WAAW,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,EAAA,CAAA,WAAA,CAAwBE,QAAQ,CAA3CF,cAA2C,CAAhC,CAAXA,CADFC,CAAAA,EAIA,IAAK,GAAL,CAAA,QAAA,GAAA,CAAA,WAAA,CAAoC,CAClC,GACE,MAAOD,CAAAA,WAAW,CAAlB,QAAkB,CAAlB,GAAA,QAAA,EACAA,WAAW,CAAXA,QAAW,CAAXA,CAAAA,QAAAA,CAFF,IAEEA,CAFF,CAGE,CACAA,WAAW,CAAXA,QAAW,CAAXA,CAAwBG,QAAQ,CAACH,WAAW,CAA5CA,QAA4C,CAAZ,CAAhCA,CAEH,CAED,OAAA,CAAA,WAAA,CAjBK,CAAA,C","sourcesContent":["import { useTheme } from './';\nimport { resolversForBox } from '../utils/styled';\n\nexport const useStyledSystemPropsResolver = (props: any) => {\n  const theme = useTheme();\n  const propsWithTheme = { ...props, theme };\n  let styleObject: any = {};\n  resolversForBox.forEach((resolver: any) => {\n    styleObject = { ...styleObject, ...resolver(propsWithTheme) };\n  });\n\n  for (const property in styleObject) {\n    if (\n      typeof styleObject[property] === 'string' &&\n      styleObject[property].includes('px')\n    ) {\n      styleObject[property] = parseInt(styleObject[property]);\n    }\n  }\n\n  return styleObject;\n};\n"]},"metadata":{},"sourceType":"script"}