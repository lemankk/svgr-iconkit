{"ast":null,"code":"import{useEffect}from'react';export var onCloseMap=new WeakMap();export function useCloseOnScroll(opts){var triggerRef=opts.triggerRef,isOpen=opts.isOpen,onClose=opts.onClose;useEffect(function(){if(!isOpen){return;}var onScroll=function onScroll(e){var target=e.target;if(!triggerRef.current||!target.contains(triggerRef.current)){return;}var onCloseHandler=onClose||onCloseMap.get(triggerRef.current);if(onCloseHandler){onCloseHandler();}};window.addEventListener('scroll',onScroll,true);return function(){window.removeEventListener('scroll',onScroll,true);};},[isOpen,onClose,triggerRef]);}","map":{"version":3,"sources":["useCloseOnScroll.ts"],"names":["onCloseMap","onClose","useEffect","onScroll","e","target","triggerRef","onCloseHandler","window"],"mappings":"AAaA,OAAA,SAAA,KAAA,OAAA,CAOA,MAAO,IAAMA,CAAAA,UAA4C,CAAG,GAArD,CAAA,OAAqD,EAArD,CASP,MAAO,SAAA,CAAA,gBAAA,CAAA,IAAA,CAAsD,CAC3D,GAAI,CAAA,UAAJ,CAAA,IAAA,CAAI,UAAJ,CAAI,MAAJ,CAAA,IAAA,CAAI,MAAJ,CAAyBC,OAAzB,CAAA,IAAA,CAAyBA,OAAzB,CAEAC,SAAS,CAAC,UAAM,CACd,GAAI,CAAJ,MAAA,CAAa,CACX,OACD,CAED,GAAIC,CAAAA,QAAQ,CAAIC,QAAZD,CAAAA,QAAYC,CAAAA,CAAD,CAAmB,CAEhC,GAAIC,CAAAA,MAAM,CAAGD,CAAC,CAAd,MAAA,CACA,GAAI,CAACE,UAAU,CAAX,OAAA,EAAuB,CAACD,MAAM,CAANA,QAAAA,CAAgBC,UAAU,CAAtD,OAA4BD,CAA5B,CAAiE,CAC/D,OACD,CAED,GAAIE,CAAAA,cAAc,CAAGN,OAAO,EAAID,UAAU,CAAVA,GAAAA,CAAeM,UAAU,CAAzD,OAAgCN,CAAhC,CACA,GAAA,cAAA,CAAoB,CAClBO,cAAc,GACf,CAVH,CAAA,CAaAC,MAAM,CAANA,gBAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAAA,IAAAA,EACA,MAAO,WAAM,CACXA,MAAM,CAANA,mBAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAAA,IAAAA,EADF,CAAA,CAnBO,CAAA,CAsBN,CAAA,MAAA,CAAA,OAAA,CAtBHN,UAsBG,CAtBM,CAATA,CAuBD","sourcesContent":["//@ts-nocheck\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RefObject, useEffect} from 'react';\n\n// This behavior moved from useOverlayTrigger to useOverlayPosition.\n// For backward compatibility, where useOverlayTrigger handled hiding the popover on close,\n// it sets a close function here mapped from the trigger element. This way we can avoid\n// forcing users to pass an onClose function to useOverlayPosition which could be considered\n// a breaking change.\nexport const onCloseMap: WeakMap<HTMLElement, () => void> = new WeakMap();\n\ninterface CloseOnScrollOptions {\n  triggerRef: RefObject<HTMLElement>,\n  isOpen?: boolean,\n  onClose?: () => void\n}\n\n/** @private */\nexport function useCloseOnScroll(opts: CloseOnScrollOptions) {\n  let {triggerRef, isOpen, onClose} = opts;\n\n  useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n\n    let onScroll = (e: MouseEvent) => {\n      // Ignore if scrolling an scrollable region outside the trigger's tree.\n      let target = e.target as HTMLElement;\n      if (!triggerRef.current || !target.contains(triggerRef.current)) {\n        return;\n      }\n\n      let onCloseHandler = onClose || onCloseMap.get(triggerRef.current);\n      if (onCloseHandler) {\n        onCloseHandler();\n      }\n    };\n\n    window.addEventListener('scroll', onScroll, true);\n    return () => {\n      window.removeEventListener('scroll', onScroll, true);\n    };\n  }, [isOpen, onClose, triggerRef]);\n}\n"]},"metadata":{},"sourceType":"module"}