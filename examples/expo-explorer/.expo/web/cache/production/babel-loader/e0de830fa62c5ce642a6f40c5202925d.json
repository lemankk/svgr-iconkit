{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.extendTheme=extendTheme;var _theme=require(\"./../theme\");var _lodash=_interopRequireDefault(require(\"lodash.mergewith\"));function isFunction(value){return typeof value==='function';}function extendTheme(overrides){function customizer(source,override){if(isFunction(source)){return function(){var sourceValue=source.apply(void 0,arguments);var overrideValue=isFunction(override)?override.apply(void 0,arguments):override;return(0,_lodash.default)({},sourceValue,overrideValue,customizer);};}return undefined;}return(0,_lodash.default)({},_theme.theme,overrides,customizer);}","map":{"version":3,"sources":["extendTheme.tsx"],"names":["isFunction","sourceValue","source","overrideValue","override","defaultTheme"],"mappings":"4KAAA,GAAA,CAAA,MAAA,CAAA,OAAA,cAAA,CACA,GAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA,CAEA,QAAA,CAAA,UAAA,CAAA,KAAA,CAAyC,CACvC,MAAO,OAAA,CAAA,KAAA,GAAP,UAAA,CAGK,SAAA,CAAA,WAAA,CAAA,SAAA,CAEL,CACA,QAAA,CAAA,UAAA,CAAA,MAAA,CAAA,QAAA,CAAgD,CAC9C,GAAIA,UAAU,CAAd,MAAc,CAAd,CAAwB,CACtB,MAAO,WAAoB,CACzB,GAAMC,CAAAA,WAAW,CAAGC,MAAM,CAANA,KAAAA,CAAAA,IAAAA,EAAAA,CAApB,SAAoBA,CAApB,CACA,GAAMC,CAAAA,aAAa,CAAGH,UAAU,CAAVA,QAAU,CAAVA,CAClBI,QAAQ,CAARA,KAAAA,CAAAA,IAAAA,EAAAA,CADkBJ,SAClBI,CADkBJ,CAAtB,QAAA,CAGA,MAAO,CAAA,EAAA,OAAA,CAAA,OAAA,EAAA,EAAA,CAAA,WAAA,CAAA,aAAA,CAAP,UAAO,CAAP,CALF,CAAA,CAQF,OAAA,CAAA,SAAA,CAGF,OAAO,CAAA,EAAA,OAAA,CAAA,OAAA,EAAA,EAAA,CAAcK,MAAAA,CAAd,KAAA,CAAA,SAAA,CAAP,UAAO,CAAP,CACD","sourcesContent":["import { theme as defaultTheme, ITheme } from './../theme';\nimport mergeWith from 'lodash.mergewith';\n\nfunction isFunction(value: any): boolean {\n  return typeof value === 'function';\n}\n\nexport function extendTheme<T extends ITheme | Record<string, any>>(\n  overrides: T\n) {\n  function customizer(source: any, override: any) {\n    if (isFunction(source)) {\n      return (...args: any[]) => {\n        const sourceValue = source(...args);\n        const overrideValue = isFunction(override)\n          ? override(...args)\n          : override;\n        return mergeWith({}, sourceValue, overrideValue, customizer);\n      };\n    }\n    return undefined;\n  }\n\n  return mergeWith({}, defaultTheme, overrides, customizer);\n}\n"]},"metadata":{},"sourceType":"script"}