{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _react=_interopRequireWildcard(require(\"react\"));var _hooks=require(\"../../../hooks\");var _SVGIcon=_interopRequireDefault(require(\"./SVGIcon\"));var _factory=require(\"../../../factory\");var _this=this,_jsxFileName=\"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/primitives/Icon/Icon.tsx\";var Icon=function Icon(_ref,ref){var as=_ref.as,props=(0,_objectWithoutProperties2.default)(_ref,[\"as\"]);var _usePropsResolution=(0,_hooks.usePropsResolution)('Icon',props),size=_usePropsResolution.size,resolvedProps=(0,_objectWithoutProperties2.default)(_usePropsResolution,[\"size\"]);var tokenizedFontSize=(0,_hooks.useToken)('space',size);if(!as){return _react.default.createElement(_SVGIcon.default,(0,_extends2.default)({size:size},resolvedProps,{ref:ref,__self:_this,__source:{fileName:_jsxFileName,lineNumber:12,columnNumber:12}}));}var isJSX=_react.default.isValidElement(as);var StyledAs=(0,_factory.Factory)(isJSX?function(resolvedProps){return _react.default.cloneElement(as,(0,_extends2.default)({},resolvedProps,as.props));}:as);return _react.default.createElement(StyledAs,(0,_extends2.default)({},resolvedProps,{fontSize:tokenizedFontSize,lineHeight:tokenizedFontSize,size:size,ref:ref,__self:_this,__source:{fileName:_jsxFileName,lineNumber:26,columnNumber:5}}));};var _default=(0,_react.memo)((0,_react.forwardRef)(Icon));exports.default=_default;","map":{"version":3,"sources":["Icon.tsx"],"names":["Icon","as","props","size","resolvedProps","tokenizedFontSize","isJSX","React","StyledAs"],"mappings":"wbAAA,GAAA,CAAA,MAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,OAAA,kBAAA,CAEA,GAAA,CAAA,QAAA,CAAA,sBAAA,CAAA,OAAA,aAAA,CAAA,CACA,GAAA,CAAA,QAAA,CAAA,OAAA,oBAAA,C,+HAEA,GAAMA,CAAAA,IAAI,CAAJA,QAAAA,CAAAA,IAAAA,CAAO,IAAPA,CAAO,GAAPA,CAAoD,CAA1CC,GAAAA,CAAAA,EAA0C,CAAA,IAAA,CAA1CA,EAAAA,CAAOC,KAAmC,CAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,CAA1CD,CAA0C,GAAA,CAAA,mBAAA,CACrB,CAAA,EAAA,MAAA,CAAA,kBAAA,EAAA,MAAA,CADqB,KACrB,CADqB,CAChDE,IADgD,CAAA,mBAAA,CAAA,IAAA,CACvCC,aADuC,CAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,EAAA,mBAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAExD,GAAMC,CAAAA,iBAAiB,CAAG,CAAA,EAAA,MAAA,CAAA,QAAA,EAAA,OAAA,CAA1B,IAA0B,CAA1B,CAEA,GAAI,CAAJ,EAAA,CAAS,CACP,MAAO,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,QAAA,CAAD,OAAA,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,CAAS,IAAI,CAAb,IAAA,CAAA,CAAA,aAAA,CAAA,CAAwC,GAAG,CAA3C,GAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAAP,EAAO,CAAA,CAAA,CAAA,CAAP,CAEF,IAAMC,CAAAA,KAAK,CAAGC,MAAAA,CAAAA,OAAAA,CAAAA,cAAAA,CAAd,EAAcA,CAAd,CACA,GAAMC,CAAAA,QAAQ,CAAG,CAAA,EAAA,QAAA,CAAA,OAAA,EACfF,KAAK,CACD,SAAA,aAAA,CAAA,CAAA,MACEC,CAAAA,MAAAA,CAAAA,OAAAA,CAAAA,YAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,SAAAA,CAAAA,OAAAA,EAAAA,EAAAA,CAAAA,aAAAA,CAEKN,EAAE,CAHT,KACEM,CAAAA,CADF,CADC,CAAA,CADP,EAAiB,CAAjB,CAUA,MACE,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,QAAA,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,EAAA,CAAA,aAAA,CAAA,CAEE,QAAQ,CAFV,iBAAA,CAGE,UAAU,CAHZ,iBAAA,CAIE,IAAI,CAJN,IAAA,CAKE,GAAG,CALL,GAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CADF,CACE,CAAA,CAAA,CAAA,CADF,CAlBF,CAAA,C,aA6Be,CAAA,EAAA,MAAA,CAAA,IAAA,EAAK,CAAA,EAAA,MAAA,CAAA,UAAA,EAAL,IAAK,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport type { IIconProps } from './types';\nimport SVGIcon from './SVGIcon';\nimport { Factory } from '../../../factory';\n\nconst Icon = ({ as, ...props }: IIconProps, ref?: any) => {\n  const { size, ...resolvedProps } = usePropsResolution('Icon', props);\n  const tokenizedFontSize = useToken('space', size);\n\n  if (!as) {\n    return <SVGIcon size={size} {...resolvedProps} ref={ref} />;\n  }\n  const isJSX = React.isValidElement(as);\n  const StyledAs = Factory(\n    isJSX\n      ? (resolvedProps) =>\n          React.cloneElement(as, {\n            ...resolvedProps,\n            ...as.props,\n          })\n      : as\n  );\n\n  return (\n    <StyledAs\n      {...resolvedProps}\n      fontSize={tokenizedFontSize}\n      lineHeight={tokenizedFontSize}\n      size={size}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(Icon));\n"]},"metadata":{},"sourceType":"script"}