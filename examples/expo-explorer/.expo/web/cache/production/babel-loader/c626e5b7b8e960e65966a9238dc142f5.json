{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.usePropsWithComponentTheme=usePropsWithComponentTheme;var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _lodash=_interopRequireDefault(require(\"lodash.omit\"));var _reactNative=require(\"react-native-web/dist/index\");var _useNativeBase2=require(\"./../useNativeBase\");var _utils=require(\"./utils\");function usePropsWithComponentTheme(localTheme,propsReceived){var _useWindowDimensions;var _useNativeBase=(0,_useNativeBase2.useNativeBase)(),theme=_useNativeBase.theme,colorModeProps=(0,_objectWithoutProperties2.default)(_useNativeBase,[\"theme\"]);var windowWidth=(_useWindowDimensions=(0,_reactNative.useWindowDimensions)())==null?void 0:_useWindowDimensions.width;return(0,_utils.calculateProps)((0,_lodash.default)(theme,'components'),colorModeProps,localTheme,propsReceived,windowWidth);}","map":{"version":3,"sources":["usePropsWithComponentTheme.ts"],"names":["theme","colorModeProps","windowWidth"],"mappings":"0TAAA,GAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA,C,wDAEA,GAAA,CAAA,eAAA,CAAA,OAAA,sBAAA,CACA,GAAA,CAAA,MAAA,CAAA,OAAA,WAAA,CAEO,QAAA,CAAA,0BAAA,CAAA,UAAA,CAAA,aAAA,CAGL,CAAA,GAAA,CAAA,oBAAA,CAAA,GAAA,CAAA,cAAA,CACqC,CAAA,EAAA,eAAA,CADrC,aACqC,GADrC,CACQA,KADR,CAAA,cAAA,CAAA,KAAA,CACkBC,cADlB,CAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,EAAA,cAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAEA,GAAIC,CAAAA,WAAW,CAAA,CAAA,oBAAA,CAAG,CAAA,EAAA,YAAA,CAAH,mBAAG,GAAH,GAAA,IAAA,CAAA,IAAA,EAAA,CAAG,oBAAA,CAAlB,KAAA,CACA,MAAO,CAAA,EAAA,MAAA,CAAA,cAAA,EACL,CAAA,EAAA,OAAA,CAAA,OAAA,EAAA,KAAA,CADK,YACL,CADK,CAAA,cAAA,CAAA,UAAA,CAAA,aAAA,CAAP,WAAO,CAAP,CAOD","sourcesContent":["import omit from 'lodash.omit';\nimport { useWindowDimensions } from 'react-native';\nimport { useNativeBase } from './../useNativeBase';\nimport { calculateProps } from './utils';\n\nexport function usePropsWithComponentTheme(\n  localTheme: any,\n  propsReceived: any\n) {\n  const { theme, ...colorModeProps } = useNativeBase();\n  let windowWidth = useWindowDimensions()?.width;\n  return calculateProps(\n    omit(theme, 'components'),\n    colorModeProps,\n    localTheme,\n    propsReceived,\n    windowWidth\n  );\n}\n"]},"metadata":{},"sourceType":"script"}