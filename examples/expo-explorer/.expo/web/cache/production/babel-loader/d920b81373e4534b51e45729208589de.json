{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useRef,useState}from\"react\";import{useControlledState}from\"@react-stately/utils\";import{clamp,snapValueToStep}from\"@react-aria/utils\";var $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MIN_VALUE=0;var $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MAX_VALUE=100;var $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_STEP_VALUE=1;export function useSliderState(props){var _props$defaultValue;var isDisabled=props.isDisabled,_props$minValue=props.minValue,minValue=_props$minValue===void 0?$dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MIN_VALUE:_props$minValue,_props$maxValue=props.maxValue,maxValue=_props$maxValue===void 0?$dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MAX_VALUE:_props$maxValue,formatter=props.numberFormatter,_props$step=props.step,step=_props$step===void 0?$dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_STEP_VALUE:_props$step;var _useControlledState=useControlledState(props.value,(_props$defaultValue=props.defaultValue)!=null?_props$defaultValue:[minValue],props.onChange),_useControlledState2=_slicedToArray(_useControlledState,2),values=_useControlledState2[0],setValues=_useControlledState2[1];var _useState=useState(new Array(values.length).fill(false)),_useState2=_slicedToArray(_useState,2),isDraggings=_useState2[0],setDraggings=_useState2[1];var isEditablesRef=useRef(new Array(values.length).fill(true));var _useState3=useState(undefined),_useState4=_slicedToArray(_useState3,2),focusedIndex=_useState4[0],setFocusedIndex=_useState4[1];var valuesRef=useRef(null);valuesRef.current=values;var isDraggingsRef=useRef(null);isDraggingsRef.current=isDraggings;function getValuePercent(value){return(value-minValue)/(maxValue-minValue);}function getThumbMinValue(index){return index===0?minValue:values[index-1];}function getThumbMaxValue(index){return index===values.length-1?maxValue:values[index+1];}function isThumbEditable(index){return isEditablesRef.current[index];}function setThumbEditable(index,editable){isEditablesRef.current[index]=editable;}function updateValue(index,value){if(isDisabled||!isThumbEditable(index)){return;}var thisMin=getThumbMinValue(index);var thisMax=getThumbMaxValue(index);value=snapValueToStep(value,thisMin,thisMax,step);valuesRef.current=$dcc38d2f5fc04b76254f325fa36d$var$replaceIndex(valuesRef.current,index,value);setValues(valuesRef.current);}function updateDragging(index,dragging){if(isDisabled||!isThumbEditable(index)){return;}var wasDragging=isDraggingsRef.current[index];isDraggingsRef.current=$dcc38d2f5fc04b76254f325fa36d$var$replaceIndex(isDraggingsRef.current,index,dragging);setDraggings(isDraggingsRef.current);if(props.onChangeEnd&&wasDragging&&!isDraggingsRef.current.some(Boolean)){props.onChangeEnd(valuesRef.current);}}function getFormattedValue(value){return formatter.format(value);}function setThumbPercent(index,percent){updateValue(index,getPercentValue(percent));}function getRoundedValue(value){return Math.round((value-minValue)/step)*step+minValue;}function getPercentValue(percent){var val=percent*(maxValue-minValue)+minValue;return clamp(getRoundedValue(val),minValue,maxValue);}return{values:values,getThumbValue:function getThumbValue(index){return values[index];},setThumbValue:updateValue,setThumbPercent:setThumbPercent,isThumbDragging:function isThumbDragging(index){return isDraggings[index];},setThumbDragging:updateDragging,focusedThumb:focusedIndex,setFocusedThumb:setFocusedIndex,getThumbPercent:function getThumbPercent(index){return getValuePercent(values[index]);},getValuePercent:getValuePercent,getThumbValueLabel:function getThumbValueLabel(index){return getFormattedValue(values[index]);},getFormattedValue:getFormattedValue,getThumbMinValue:getThumbMinValue,getThumbMaxValue:getThumbMaxValue,getPercentValue:getPercentValue,isThumbEditable:isThumbEditable,setThumbEditable:setThumbEditable,step:step};}function $dcc38d2f5fc04b76254f325fa36d$var$replaceIndex(array,index,value){if(array[index]===value){return array;}return[].concat(_toConsumableArray(array.slice(0,index)),[value],_toConsumableArray(array.slice(index+1)));}","map":{"version":3,"sources":["packages/@react-stately/slider/src/useSliderState.ts"],"names":["DEFAULT_MIN_VALUE","DEFAULT_MAX_VALUE","DEFAULT_STEP_VALUE","minValue","maxValue","numberFormatter","step","useControlledState","props","useState","values","isEditablesRef","useRef","valuesRef","isDraggingsRef","value","index","isDisabled","isThumbEditable","thisMin","getThumbMinValue","thisMax","getThumbMaxValue","snapValueToStep","replaceIndex","setValues","wasDragging","setDraggings","formatter","updateValue","getPercentValue","Math","val","percent","clamp","getRoundedValue","getThumbValue","setThumbValue","setThumbPercent","isThumbDragging","isDraggings","setThumbDragging","focusedThumb","setFocusedThumb","getThumbPercent","getValuePercent","getThumbValueLabel","getFormattedValue","setThumbEditable","array"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, snapValueToStep} from '@react-aria/utils';\nimport {SliderProps} from '@react-types/slider';\nimport {useControlledState} from '@react-stately/utils';\nimport {useRef, useState} from 'react';\n\nexport interface SliderState {\n  /**\n   * Values managed by the slider by thumb index.\n   */\n  readonly values: number[],\n  /**\n   * Get the value for the specified thumb.\n   * @param index\n   */\n  getThumbValue(index: number): number,\n\n  /**\n   * Sets the value for the specified thumb.\n   * The actual value set will be clamped and rounded according to min/max/step.\n   * @param index\n   * @param value\n   */\n  setThumbValue(index: number, value: number): void,\n\n  /**\n   * Sets value for the specified thumb by percent offset (between 0 and 1).\n   * @param index\n   * @param percent\n   */\n  setThumbPercent(index: number, percent: number): void,\n\n  /**\n   * Whether the specific thumb is being dragged.\n   * @param index\n   */\n  isThumbDragging(index: number): boolean,\n  /**\n   * Set is dragging on the specified thumb.\n   * @param index\n   * @param dragging\n   */\n  setThumbDragging(index: number, dragging: boolean): void,\n\n  /**\n   * Currently-focused thumb index.\n   */\n  readonly focusedThumb: number | undefined,\n  /**\n   * Set focused true on specified thumb. This will remove focus from\n   * any thumb that had it before.\n   * @param index\n   */\n  setFocusedThumb(index: number | undefined): void,\n\n  /**\n   * Returns the specified thumb's value as a percentage from 0 to 1.\n   * @param index\n   */\n  getThumbPercent(index: number): number,\n\n  /**\n   * Returns the value as a percent between the min and max of the slider.\n   * @param index\n   */\n  getValuePercent(value: number): number,\n\n  /**\n   * Returns the string label for the specified thumb's value, per props.formatOptions.\n   * @param index\n   */\n  getThumbValueLabel(index: number): string,\n\n  /**\n   * Returns the string label for the value, per props.formatOptions.\n   * @param index\n   */\n  getFormattedValue(value: number): string,\n\n  /**\n   * Returns the min allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMinValue(index: number): number,\n\n  /**\n   * Returns the max allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMaxValue(index: number): number,\n\n  /**\n   * Converts a percent along track (between 0 and 1) to the corresponding value.\n   * @param percent\n   */\n  getPercentValue(percent: number): number,\n\n  /**\n   * Returns if the specified thumb is editable.\n   * @param index\n   */\n  isThumbEditable(index: number): boolean,\n\n  /**\n   * Set the specified thumb's editable state.\n   * @param index\n   * @param editable\n   */\n  setThumbEditable(index: number, editable: boolean): void,\n\n  /**\n   * The step amount for the slider.\n   */\n  readonly step: number\n}\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP_VALUE = 1;\n\ninterface SliderStateOptions extends SliderProps {\n  numberFormatter: Intl.NumberFormat\n}\n\n/**\n * Provides state management for a slider component. Stores values for all thumbs,\n * formats values for localization, and provides methods to update the position\n * of any thumbs.\n * @param props\n */\nexport function useSliderState(props: SliderStateOptions): SliderState {\n  const {isDisabled, minValue = DEFAULT_MIN_VALUE, maxValue = DEFAULT_MAX_VALUE, numberFormatter: formatter, step = DEFAULT_STEP_VALUE} = props;\n\n  const [values, setValues] = useControlledState<number[]>(\n    props.value as any,\n    props.defaultValue ?? [minValue] as any,\n    props.onChange as any\n  );\n  const [isDraggings, setDraggings] = useState<boolean[]>(new Array(values.length).fill(false));\n  const isEditablesRef = useRef<boolean[]>(new Array(values.length).fill(true));\n  const [focusedIndex, setFocusedIndex] = useState<number | undefined>(undefined);\n\n  const valuesRef = useRef<number[]>(null);\n  valuesRef.current = values;\n  const isDraggingsRef = useRef<boolean[]>(null);\n  isDraggingsRef.current = isDraggings;\n\n  function getValuePercent(value: number) {\n    return (value - minValue) / (maxValue - minValue);\n  }\n\n  function getThumbMinValue(index: number) {\n    return index === 0 ? minValue : values[index - 1];\n  }\n  function getThumbMaxValue(index: number) {\n    return index === values.length - 1 ? maxValue : values[index + 1];\n  }\n\n  function isThumbEditable(index: number) {\n    return isEditablesRef.current[index];\n  }\n\n  function setThumbEditable(index: number, editable: boolean) {\n    isEditablesRef.current[index] = editable;\n  }\n\n  function updateValue(index: number, value: number) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n    const thisMin = getThumbMinValue(index);\n    const thisMax = getThumbMaxValue(index);\n\n    // Round value to multiple of step, clamp value between min and max\n    value = snapValueToStep(value, thisMin, thisMax, step);\n    valuesRef.current = replaceIndex(valuesRef.current, index, value);\n    setValues(valuesRef.current);\n  }\n\n  function updateDragging(index: number, dragging: boolean) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n\n    const wasDragging = isDraggingsRef.current[index];\n    isDraggingsRef.current = replaceIndex(isDraggingsRef.current, index, dragging);\n    setDraggings(isDraggingsRef.current);\n\n    // Call onChangeEnd if no handles are dragging.\n    if (props.onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) {\n      props.onChangeEnd(valuesRef.current);\n    }\n  }\n\n  function getFormattedValue(value: number) {\n    return formatter.format(value);\n  }\n\n  function setThumbPercent(index: number, percent: number) {\n    updateValue(index, getPercentValue(percent));\n  }\n\n  function getRoundedValue(value: number) {\n    return Math.round((value - minValue) / step) * step + minValue;\n  }\n\n  function getPercentValue(percent: number) {\n    const val = percent * (maxValue - minValue) + minValue;\n    return clamp(getRoundedValue(val), minValue, maxValue);\n  }\n\n  return {\n    values: values,\n    getThumbValue: (index: number) => values[index],\n    setThumbValue: updateValue,\n    setThumbPercent,\n    isThumbDragging: (index: number) => isDraggings[index],\n    setThumbDragging: updateDragging,\n    focusedThumb: focusedIndex,\n    setFocusedThumb: setFocusedIndex,\n    getThumbPercent: (index: number) => getValuePercent(values[index]),\n    getValuePercent,\n    getThumbValueLabel: (index: number) => getFormattedValue(values[index]),\n    getFormattedValue,\n    getThumbMinValue,\n    getThumbMaxValue,\n    getPercentValue,\n    isThumbEditable,\n    setThumbEditable,\n    step\n  };\n}\n\nfunction replaceIndex<T>(array: T[], index: number, value: T) {\n  if (array[index] === value) {\n    return array;\n  }\n\n  return [...array.slice(0, index), value, ...array.slice(index + 1)];\n}\n"]},"metadata":{},"sourceType":"module"}