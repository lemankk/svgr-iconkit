{"ast":null,"code":"import{isFocusVisible,useHover,usePress}from\"@react-aria/interactions\";import{getItemCount}from\"@react-stately/collections\";import{useSelectableList,useSelectableItem}from\"@react-aria/selection\";import{useLabel}from\"@react-aria/label\";import{filterDOMProps,mergeProps,useId,isMac,isWebKit,useSlotId}from\"@react-aria/utils\";import _babelRuntimeHelpersEsmExtends from\"@babel/runtime/helpers/esm/extends\";export var listIds=new WeakMap();function $d7356e622fdc32e5aea4e1e7cc2e6e6b$var$normalizeKey(key){if(typeof key==='string'){return key.replace(/\\s*/g,'');}return''+key;}export function getItemId(state,itemKey){var listId=listIds.get(state);if(!listId){throw new Error('Unknown list');}return listId+\"-option-\"+$d7356e622fdc32e5aea4e1e7cc2e6e6b$var$normalizeKey(itemKey);}export function useListBox(props,state,ref){var domProps=filterDOMProps(props,{labelable:true});var _useSelectableList=useSelectableList(_babelRuntimeHelpersEsmExtends({},props,{ref:ref,selectionManager:state.selectionManager,collection:state.collection,disabledKeys:state.disabledKeys})),listProps=_useSelectableList.listProps;var id=useId(props.id);listIds.set(state,id);var _useLabel=useLabel(_babelRuntimeHelpersEsmExtends({},props,{id:id,labelElementType:'span'})),labelProps=_useLabel.labelProps,fieldProps=_useLabel.fieldProps;return{labelProps:labelProps,listBoxProps:mergeProps(domProps,state.selectionManager.selectionMode==='multiple'?{'aria-multiselectable':'true'}:{},_babelRuntimeHelpersEsmExtends({role:'listbox'},mergeProps(fieldProps,listProps)))};}export function useOption(props,state,ref){var isSelected=props.isSelected,isDisabled=props.isDisabled,key=props.key,shouldSelectOnPressUp=props.shouldSelectOnPressUp,shouldFocusOnHover=props.shouldFocusOnHover,isVirtualized=props.isVirtualized,shouldUseVirtualFocus=props.shouldUseVirtualFocus;var labelId=useSlotId();var descriptionId=useSlotId();var optionProps={role:'option','aria-disabled':isDisabled,'aria-selected':isSelected};if(!(isMac()&&isWebKit())){optionProps['aria-label']=props['aria-label'];optionProps['aria-labelledby']=labelId;optionProps['aria-describedby']=descriptionId;}if(isVirtualized){optionProps['aria-posinset']=state.collection.getItem(key).index+1;optionProps['aria-setsize']=getItemCount(state.collection);}var _useSelectableItem=useSelectableItem({selectionManager:state.selectionManager,key:key,ref:ref,shouldSelectOnPressUp:shouldSelectOnPressUp,isVirtualized:isVirtualized,shouldUseVirtualFocus:shouldUseVirtualFocus}),itemProps=_useSelectableItem.itemProps;var _usePress=usePress(_babelRuntimeHelpersEsmExtends({},itemProps,{isDisabled:isDisabled,preventFocusOnPress:shouldUseVirtualFocus})),pressProps=_usePress.pressProps;var _useHover=useHover({isDisabled:isDisabled||!shouldFocusOnHover,onHoverStart:function onHoverStart(){if(!isFocusVisible()){state.selectionManager.setFocused(true);state.selectionManager.setFocusedKey(key);}}}),hoverProps=_useHover.hoverProps;return{optionProps:_babelRuntimeHelpersEsmExtends({},optionProps,mergeProps(pressProps,hoverProps),{id:getItemId(state,key)}),labelProps:{id:labelId},descriptionProps:{id:descriptionId}};}export function useListBoxSection(props){var heading=props.heading,ariaLabel=props['aria-label'];var headingId=useId();return{itemProps:{role:'presentation'},headingProps:heading?{id:headingId,'aria-hidden':true}:{},groupProps:{role:'group','aria-label':ariaLabel,'aria-labelledby':heading?headingId:undefined}};}","map":{"version":3,"sources":["packages/@react-aria/listbox/src/utils.ts","packages/@react-aria/listbox/src/useListBox.ts","packages/@react-aria/listbox/src/useOption.ts","packages/@react-aria/listbox/src/useListBoxSection.ts"],"names":["listIds","key","listId","normalizeKey","domProps","filterDOMProps","labelable","listProps","useSelectableList","ref","selectionManager","state","collection","disabledKeys","id","useId","props","fieldProps","useLabel","labelElementType","labelProps","listBoxProps","mergeProps","role","shouldUseVirtualFocus","labelId","useSlotId","descriptionId","optionProps","isSelected","isMac","isWebKit","getItemCount","itemProps","useSelectableItem","shouldSelectOnPressUp","isVirtualized","pressProps","usePress","isDisabled","preventFocusOnPress","hoverProps","useHover","onHoverStart","isFocusVisible","descriptionProps","ariaLabel","headingId","headingProps","heading","groupProps","undefined"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {ListState} from '@react-stately/list';\n\nexport const listIds = new WeakMap<ListState<unknown>, string>();\n\nfunction normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId<T>(state: ListState<T>, itemKey: Key): string {\n  let listId = listIds.get(state);\n\n  if (!listId) {\n    throw new Error('Unknown list');\n  }\n\n  return `${listId}-option-${normalizeKey(itemKey)}`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, ReactNode, RefObject} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {listIds} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useId} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\ninterface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: HTMLAttributes<HTMLElement>,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\ninterface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n\n  let id = useId(props.id);\n  listIds.set(state, id);\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId} from './utils';\nimport {HTMLAttributes, Key, RefObject} from 'react';\nimport {isFocusVisible, useHover, usePress} from '@react-aria/interactions';\nimport {isMac, isWebKit, mergeProps, useSlotId} from '@react-aria/utils';\nimport {ListState} from '@react-stately/list';\nimport {useSelectableItem} from '@react-aria/selection';\n\ninterface OptionAria {\n  /** Props for the option element. */\n  optionProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the main text element inside the option. */\n  labelProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>\n}\n\ninterface AriaOptionProps {\n  /** Whether the option is disabled. */\n  isDisabled?: boolean,\n\n  /** Whether the option is selected. */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key?: Key,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether the option should be focused when the user hovers over it. */\n  shouldFocusOnHover?: boolean,\n\n  /** Whether the option is contained in a virtual scrolling listbox. */\n  isVirtualized?: boolean,\n\n  /** Whether the option should use virtual focus instead of being focused directly. */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<HTMLElement>): OptionAria {\n  let {\n    isSelected,\n    isDisabled,\n    key,\n    shouldSelectOnPressUp,\n    shouldFocusOnHover,\n    isVirtualized,\n    shouldUseVirtualFocus\n  } = props;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': isSelected\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {itemProps} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus\n  });\n\n  let {pressProps} = usePress({...itemProps, isDisabled, preventFocusOnPress: shouldUseVirtualFocus});\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(pressProps, hoverProps),\n      id: getItemId(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\ninterface AriaListBoxSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\ninterface ListBoxSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the heading element, if any. */\n  headingProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the group element. */\n  groupProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\nexport function useListBoxSection(props: AriaListBoxSectionProps): ListBoxSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}