{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useFocus}from\"@react-aria/interactions\";import _react,{useMemo,useState}from\"react\";import{mergeProps}from\"@react-aria/utils\";import _babelRuntimeHelpersEsmExtends from\"@babel/runtime/helpers/esm/extends\";import _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from\"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";var $f431c2c11cc559fa3c5864caafbcfd19$var$styles={border:0,clip:'rect(0 0 0 0)',clipPath:'inset(50%)',height:1,margin:'0 -1px -1px 0',overflow:'hidden',padding:0,position:'absolute',width:1,whiteSpace:'nowrap'};export function useVisuallyHidden(props){if(props===void 0){props={};}var _props=props,style=_props.style,isFocusable=_props.isFocusable;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isFocused=_useState2[0],setFocused=_useState2[1];var _useFocus=useFocus({isDisabled:!isFocusable,onFocusChange:setFocused}),focusProps=_useFocus.focusProps;var combinedStyles=useMemo(function(){if(isFocused){return style;}else if(style){return _babelRuntimeHelpersEsmExtends({},$f431c2c11cc559fa3c5864caafbcfd19$var$styles,style);}else{return $f431c2c11cc559fa3c5864caafbcfd19$var$styles;}},[isFocused]);return{visuallyHiddenProps:_babelRuntimeHelpersEsmExtends({},focusProps,{style:combinedStyles})};}export function VisuallyHidden(props){var children=props.children,_props$elementType=props.elementType,Element=_props$elementType===void 0?'div':_props$elementType,otherProps=_babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props,[\"children\",\"elementType\",\"isFocusable\",\"style\"]);var _useVisuallyHidden=useVisuallyHidden(props),visuallyHiddenProps=_useVisuallyHidden.visuallyHiddenProps;return _react.createElement(Element,mergeProps(otherProps,visuallyHiddenProps),children);}","map":{"version":3,"sources":["packages/@react-aria/visually-hidden/src/VisuallyHidden.tsx"],"names":["styles","border","clip","clipPath","height","margin","overflow","padding","position","width","whiteSpace","props","isFocusable","useState","focusProps","useFocus","isDisabled","onFocusChange","setFocused","combinedStyles","useMemo","visuallyHiddenProps","style","elementType","Element","useVisuallyHidden","mergeProps"],"mappings":"8YA8BA,GAAMA,CAAAA,4CAAqB,CAAG,CAC5BC,MAAM,CADsB,CAAA,CAE5BC,IAAI,CAFwB,eAAA,CAG5BC,QAAQ,CAHoB,YAAA,CAI5BC,MAAM,CAJsB,CAAA,CAK5BC,MAAM,CALsB,eAAA,CAM5BC,QAAQ,CANoB,QAAA,CAO5BC,OAAO,CAPqB,CAAA,CAQ5BC,QAAQ,CARoB,UAAA,CAS5BC,KAAK,CATuB,CAAA,CAU5BC,UAAU,CAAE,QAVgB,CAA9B,C,MAqBO,SAAA,CAAA,iBAAA,CAAA,KAAA,CAAgF,CAAA,GAArDC,KAAqD,GAAA,IAAA,EAAA,CAAA,CAArDA,KAAqD,CAAxB,EAA7BA,CAAqD,CACrF,WAAA,KAAA,CAAI,KAAJ,QAAI,KAAJ,CAEEC,WAFF,QAEEA,WAFF,CAKA,cAA8BC,QAAQ,CAAtC,KAAsC,CAAtC,wCAAI,SAAJ,eAAI,UAAJ,eACA,cAAmBE,QAAQ,CAAC,CAC1BC,UAAU,CAAE,CADc,WAAA,CAE1BC,aAAa,CAAEC,UAFW,CAAD,CAA3B,CAAKJ,UAAL,WAAKA,UAAL,CAMA,GAAIK,CAAAA,cAAc,CAAGC,OAAO,CAAC,UAAM,CACjC,GAAA,SAAA,CAAe,CACb,MAAA,CAAA,KAAA,CADF,CAAA,IAEO,IAAA,KAAA,CAAW,CAChB,MAAA,CAAA,8BAAA,CAAA,EAAA,CAAA,4CAAA,CAAA,KAAA,CAAA,CADK,CAAA,IAEA,CACL,MAAA,CAAA,4CAAA,CACD,CAPyB,CAAA,CAQzB,CARH,SAQG,CARyB,CAA5B,CAUA,MAAO,CACLC,mBAAmB,CAAA,8BAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAEjBC,KAAK,CAAEH,cAFU,CAAA,CADd,CAAP,CAMD,C,MAMM,SAAA,CAAA,cAAA,CAAA,KAAA,CAAoD,CAEzD,GAAI,CAAA,QAAJ,CAAA,KAAA,CAAI,QAAJ,oBAAA,KAAA,CAAeI,WAAf,CAA4BC,OAA5B,6BAAsC,KAAtC,oBAAA,UAAA,CAAA,mDAAA,CAAA,KAAA,CAAA,CAAA,UAAA,CAAA,aAAA,CAAA,aAAA,CAAA,OAAA,CAAA,CAAA,CACA,uBAA4BC,iBAAiB,CAA7C,KAA6C,CAA7C,CAAKJ,mBAAL,oBAAKA,mBAAL,CAEA,MACE,CAAA,MAAA,CAAA,aAAA,CAAA,OAAA,CAAaK,UAAU,CAAA,UAAA,CAAvB,mBAAuB,CAAvB,CADF,QACE,CADF,CAKD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {mergeProps} from '@react-aria/utils';\nimport React, {CSSProperties, HTMLAttributes, JSXElementConstructor, ReactNode, useMemo, useState} from 'react';\nimport {useFocus} from '@react-aria/interactions';\n\ninterface VisuallyHiddenProps extends HTMLAttributes<HTMLElement> {\n  /** The content to visually hide. */\n  children?: ReactNode,\n\n  /**\n   * The element type for the container.\n   * @default 'div'\n   */\n  elementType?: string | JSXElementConstructor<any>,\n\n  /** Whether the element should become visible on focus, for example skip links. */\n  isFocusable?: boolean\n}\n\nconst styles: CSSProperties = {\n  border: 0,\n  clip: 'rect(0 0 0 0)',\n  clipPath: 'inset(50%)',\n  height: 1,\n  margin: '0 -1px -1px 0',\n  overflow: 'hidden',\n  padding: 0,\n  position: 'absolute',\n  width: 1,\n  whiteSpace: 'nowrap'\n};\n\ninterface VisuallyHiddenAria {\n  visuallyHiddenProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides props for an element that hides its children visually\n * but keeps content visible to assistive technology.\n */\nexport function useVisuallyHidden(props: VisuallyHiddenProps = {}): VisuallyHiddenAria {\n  let {\n    style,\n    isFocusable\n  } = props;\n\n  let [isFocused, setFocused] = useState(false);\n  let {focusProps} = useFocus({\n    isDisabled: !isFocusable,\n    onFocusChange: setFocused\n  });\n\n  // If focused, don't hide the element.\n  let combinedStyles = useMemo(() => {\n    if (isFocused) {\n      return style;\n    } else if (style) {\n      return {...styles, ...style};\n    } else {\n      return styles;\n    }\n  }, [isFocused]);\n\n  return {\n    visuallyHiddenProps: {\n      ...focusProps,\n      style: combinedStyles\n    }\n  };\n}\n\n/**\n * VisuallyHidden hides its children visually, while keeping content visible\n * to screen readers.\n */\nexport function VisuallyHidden(props: VisuallyHiddenProps) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let {children, elementType: Element = 'div', isFocusable, style, ...otherProps} = props;\n  let {visuallyHiddenProps} = useVisuallyHidden(props);\n\n  return (\n    <Element {...mergeProps(otherProps, visuallyHiddenProps)}>\n      {children}\n    </Element>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}